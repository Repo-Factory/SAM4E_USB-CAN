
fresh.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002638  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000004d4  20000000  00402638  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000278  200004d4  00402b0c  000204d4  2**2
                  ALLOC
  3 .stack        00003004  2000074c  00402d84  000204d4  2**0
                  ALLOC
  4 .ARM.attributes 0000002e  00000000  00000000  000204d4  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020502  2**0
                  CONTENTS, READONLY
  6 .debug_info   00014881  00000000  00000000  0002055b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002aeb  00000000  00000000  00034ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000007e0  00000000  00000000  000378c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_macro  00017f90  00000000  00000000  000380a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000a9af  00000000  00000000  00050037  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0006aea6  00000000  00000000  0005a9e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000054af  00000000  00000000  000c588c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000870  00000000  00000000  000cad3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000146c  00000000  00000000  000cb5ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	50 37 00 20 b1 23 40 00 ad 23 40 00 ad 23 40 00     P7. .#@..#@..#@.
  400010:	ad 23 40 00 ad 23 40 00 ad 23 40 00 00 00 00 00     .#@..#@..#@.....
	...
  40002c:	ad 23 40 00 ad 23 40 00 00 00 00 00 ad 23 40 00     .#@..#@......#@.
  40003c:	ad 23 40 00 ad 23 40 00 ad 23 40 00 ad 23 40 00     .#@..#@..#@..#@.
  40004c:	ad 23 40 00 ad 23 40 00 ad 23 40 00 ad 23 40 00     .#@..#@..#@..#@.
  40005c:	ad 23 40 00 ad 23 40 00 a9 0c 40 00 bd 0c 40 00     .#@..#@...@...@.
  40006c:	d1 0c 40 00 e5 0c 40 00 f9 0c 40 00 ad 23 40 00     ..@...@...@..#@.
  40007c:	ad 23 40 00 ad 23 40 00 ad 23 40 00 ad 23 40 00     .#@..#@..#@..#@.
  40008c:	ad 23 40 00 ad 23 40 00 ad 23 40 00 ad 23 40 00     .#@..#@..#@..#@.
  40009c:	ad 23 40 00 ad 23 40 00 ad 23 40 00 ad 23 40 00     .#@..#@..#@..#@.
  4000ac:	ad 23 40 00 ad 23 40 00 ad 23 40 00 ad 23 40 00     .#@..#@..#@..#@.
  4000bc:	ad 23 40 00 ad 23 40 00 ad 23 40 00 ad 23 40 00     .#@..#@..#@..#@.
  4000cc:	c9 12 40 00 ad 23 40 00 ad 23 40 00 ad 23 40 00     ..@..#@..#@..#@.
  4000dc:	ad 23 40 00 ad 23 40 00 ad 23 40 00 ad 23 40 00     .#@..#@..#@..#@.
  4000ec:	ad 23 40 00 ad 23 40 00 ad 23 40 00                 .#@..#@..#@.

004000f8 <__do_global_dtors_aux>:
  4000f8:	b510      	push	{r4, lr}
  4000fa:	4c05      	ldr	r4, [pc, #20]	; (400110 <__do_global_dtors_aux+0x18>)
  4000fc:	7823      	ldrb	r3, [r4, #0]
  4000fe:	b933      	cbnz	r3, 40010e <__do_global_dtors_aux+0x16>
  400100:	4b04      	ldr	r3, [pc, #16]	; (400114 <__do_global_dtors_aux+0x1c>)
  400102:	b113      	cbz	r3, 40010a <__do_global_dtors_aux+0x12>
  400104:	4804      	ldr	r0, [pc, #16]	; (400118 <__do_global_dtors_aux+0x20>)
  400106:	f3af 8000 	nop.w
  40010a:	2301      	movs	r3, #1
  40010c:	7023      	strb	r3, [r4, #0]
  40010e:	bd10      	pop	{r4, pc}
  400110:	200004d4 	.word	0x200004d4
  400114:	00000000 	.word	0x00000000
  400118:	00402638 	.word	0x00402638

0040011c <frame_dummy>:
  40011c:	4b0c      	ldr	r3, [pc, #48]	; (400150 <frame_dummy+0x34>)
  40011e:	b143      	cbz	r3, 400132 <frame_dummy+0x16>
  400120:	480c      	ldr	r0, [pc, #48]	; (400154 <frame_dummy+0x38>)
  400122:	490d      	ldr	r1, [pc, #52]	; (400158 <frame_dummy+0x3c>)
  400124:	b510      	push	{r4, lr}
  400126:	f3af 8000 	nop.w
  40012a:	480c      	ldr	r0, [pc, #48]	; (40015c <frame_dummy+0x40>)
  40012c:	6803      	ldr	r3, [r0, #0]
  40012e:	b923      	cbnz	r3, 40013a <frame_dummy+0x1e>
  400130:	bd10      	pop	{r4, pc}
  400132:	480a      	ldr	r0, [pc, #40]	; (40015c <frame_dummy+0x40>)
  400134:	6803      	ldr	r3, [r0, #0]
  400136:	b933      	cbnz	r3, 400146 <frame_dummy+0x2a>
  400138:	4770      	bx	lr
  40013a:	4b09      	ldr	r3, [pc, #36]	; (400160 <frame_dummy+0x44>)
  40013c:	2b00      	cmp	r3, #0
  40013e:	d0f7      	beq.n	400130 <frame_dummy+0x14>
  400140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400144:	4718      	bx	r3
  400146:	4b06      	ldr	r3, [pc, #24]	; (400160 <frame_dummy+0x44>)
  400148:	2b00      	cmp	r3, #0
  40014a:	d0f5      	beq.n	400138 <frame_dummy+0x1c>
  40014c:	4718      	bx	r3
  40014e:	bf00      	nop
  400150:	00000000 	.word	0x00000000
  400154:	00402638 	.word	0x00402638
  400158:	200004d8 	.word	0x200004d8
  40015c:	00402638 	.word	0x00402638
  400160:	00000000 	.word	0x00000000

00400164 <udi_cdc_comm_enable>:
	uint8_t port;
	uint8_t iface_comm_num;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_comm_enabled = 0;
  400164:	490e      	ldr	r1, [pc, #56]	; (4001a0 <udi_cdc_comm_enable+0x3c>)
  400166:	2300      	movs	r3, #0
  400168:	700b      	strb	r3, [r1, #0]
	}
	port = udi_cdc_nb_comm_enabled;
#endif

	// Initialize control signal management
	udi_cdc_state[port] = CPU_TO_LE16(0);
  40016a:	4a0e      	ldr	r2, [pc, #56]	; (4001a4 <udi_cdc_comm_enable+0x40>)
  40016c:	8013      	strh	r3, [r2, #0]

	uid_cdc_state_msg[port].header.bmRequestType =
  40016e:	4a0e      	ldr	r2, [pc, #56]	; (4001a8 <udi_cdc_comm_enable+0x44>)
  400170:	20a1      	movs	r0, #161	; 0xa1
  400172:	7010      	strb	r0, [r2, #0]
			USB_REQ_DIR_IN | USB_REQ_TYPE_CLASS |
			USB_REQ_RECIP_INTERFACE;
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
  400174:	2020      	movs	r0, #32
  400176:	7050      	strb	r0, [r2, #1]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
  400178:	8053      	strh	r3, [r2, #2]
	default:
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_0;
		break;
	}

	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
  40017a:	8093      	strh	r3, [r2, #4]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
  40017c:	2002      	movs	r0, #2
  40017e:	80d0      	strh	r0, [r2, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
  400180:	8113      	strh	r3, [r2, #8]

	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
  400182:	4a0a      	ldr	r2, [pc, #40]	; (4001ac <udi_cdc_comm_enable+0x48>)
  400184:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
  400188:	6010      	str	r0, [r2, #0]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
  40018a:	7113      	strb	r3, [r2, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
  40018c:	7153      	strb	r3, [r2, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
  40018e:	2308      	movs	r3, #8
  400190:	7193      	strb	r3, [r2, #6]
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
	if (!UDI_CDC_ENABLE_EXT(port)) {
		return false;
	}
	udi_cdc_nb_comm_enabled++;
  400192:	780b      	ldrb	r3, [r1, #0]
  400194:	3301      	adds	r3, #1
  400196:	b2db      	uxtb	r3, r3
  400198:	700b      	strb	r3, [r1, #0]
	return true;
}
  40019a:	2001      	movs	r0, #1
  40019c:	4770      	bx	lr
  40019e:	bf00      	nop
  4001a0:	200004fb 	.word	0x200004fb
  4001a4:	20000590 	.word	0x20000590
  4001a8:	20000628 	.word	0x20000628
  4001ac:	200004f4 	.word	0x200004f4

004001b0 <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
  4001b0:	4a02      	ldr	r2, [pc, #8]	; (4001bc <udi_cdc_comm_disable+0xc>)
  4001b2:	7813      	ldrb	r3, [r2, #0]
  4001b4:	3b01      	subs	r3, #1
  4001b6:	b2db      	uxtb	r3, r3
  4001b8:	7013      	strb	r3, [r2, #0]
  4001ba:	4770      	bx	lr
  4001bc:	200004fb 	.word	0x200004fb

004001c0 <udi_cdc_data_disable>:
void udi_cdc_data_disable(void)
{
	uint8_t port;

	Assert(udi_cdc_nb_data_enabled != 0);
	udi_cdc_nb_data_enabled--;
  4001c0:	4a04      	ldr	r2, [pc, #16]	; (4001d4 <udi_cdc_data_disable+0x14>)
  4001c2:	7813      	ldrb	r3, [r2, #0]
  4001c4:	3b01      	subs	r3, #1
  4001c6:	b2db      	uxtb	r3, r3
  4001c8:	7013      	strb	r3, [r2, #0]
	port = udi_cdc_nb_data_enabled;
  4001ca:	7813      	ldrb	r3, [r2, #0]
	UDI_CDC_DISABLE_EXT(port);
	udi_cdc_data_running = false;
  4001cc:	2200      	movs	r2, #0
  4001ce:	4b02      	ldr	r3, [pc, #8]	; (4001d8 <udi_cdc_data_disable+0x18>)
  4001d0:	701a      	strb	r2, [r3, #0]
  4001d2:	4770      	bx	lr
  4001d4:	200004fc 	.word	0x200004fc
  4001d8:	200004f2 	.word	0x200004f2

004001dc <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
  4001dc:	2000      	movs	r0, #0
  4001de:	4770      	bx	lr

004001e0 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
  4001e0:	2000      	movs	r0, #0
  4001e2:	4770      	bx	lr

004001e4 <udi_cdc_comm_setup>:
	if (Udd_setup_is_in()) {
  4001e4:	4b1d      	ldr	r3, [pc, #116]	; (40025c <udi_cdc_comm_setup+0x78>)
  4001e6:	781b      	ldrb	r3, [r3, #0]
  4001e8:	f013 0f80 	tst.w	r3, #128	; 0x80
  4001ec:	d105      	bne.n	4001fa <udi_cdc_comm_setup+0x16>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
  4001ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
  4001f2:	2b20      	cmp	r3, #32
  4001f4:	d018      	beq.n	400228 <udi_cdc_comm_setup+0x44>
	return false;  // request Not supported
  4001f6:	2000      	movs	r0, #0
  4001f8:	4770      	bx	lr
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
  4001fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
  4001fe:	2b20      	cmp	r3, #32
  400200:	d001      	beq.n	400206 <udi_cdc_comm_setup+0x22>
	return false;  // request Not supported
  400202:	2000      	movs	r0, #0
  400204:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
  400206:	4b15      	ldr	r3, [pc, #84]	; (40025c <udi_cdc_comm_setup+0x78>)
  400208:	785b      	ldrb	r3, [r3, #1]
  40020a:	2b21      	cmp	r3, #33	; 0x21
  40020c:	d124      	bne.n	400258 <udi_cdc_comm_setup+0x74>
						udd_g_ctrlreq.req.wLength)
  40020e:	4b13      	ldr	r3, [pc, #76]	; (40025c <udi_cdc_comm_setup+0x78>)
				if (sizeof(usb_cdc_line_coding_t) !=
  400210:	88db      	ldrh	r3, [r3, #6]
  400212:	2b07      	cmp	r3, #7
  400214:	d001      	beq.n	40021a <udi_cdc_comm_setup+0x36>
					return false; // Error for USB host
  400216:	2000      	movs	r0, #0
  400218:	4770      	bx	lr
				udd_g_ctrlreq.payload =
  40021a:	4b10      	ldr	r3, [pc, #64]	; (40025c <udi_cdc_comm_setup+0x78>)
  40021c:	4a10      	ldr	r2, [pc, #64]	; (400260 <udi_cdc_comm_setup+0x7c>)
  40021e:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
  400220:	2207      	movs	r2, #7
  400222:	819a      	strh	r2, [r3, #12]
				return true;
  400224:	2001      	movs	r0, #1
  400226:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
  400228:	4b0c      	ldr	r3, [pc, #48]	; (40025c <udi_cdc_comm_setup+0x78>)
  40022a:	7858      	ldrb	r0, [r3, #1]
  40022c:	2820      	cmp	r0, #32
  40022e:	d004      	beq.n	40023a <udi_cdc_comm_setup+0x56>
	return false;  // request Not supported
  400230:	2822      	cmp	r0, #34	; 0x22
  400232:	bf14      	ite	ne
  400234:	2000      	movne	r0, #0
  400236:	2001      	moveq	r0, #1
  400238:	4770      	bx	lr
						udd_g_ctrlreq.req.wLength)
  40023a:	4b08      	ldr	r3, [pc, #32]	; (40025c <udi_cdc_comm_setup+0x78>)
				if (sizeof(usb_cdc_line_coding_t) !=
  40023c:	88db      	ldrh	r3, [r3, #6]
  40023e:	2b07      	cmp	r3, #7
  400240:	d001      	beq.n	400246 <udi_cdc_comm_setup+0x62>
					return false; // Error for USB host
  400242:	2000      	movs	r0, #0
}
  400244:	4770      	bx	lr
				udd_g_ctrlreq.callback =
  400246:	4b05      	ldr	r3, [pc, #20]	; (40025c <udi_cdc_comm_setup+0x78>)
  400248:	4a06      	ldr	r2, [pc, #24]	; (400264 <udi_cdc_comm_setup+0x80>)
  40024a:	611a      	str	r2, [r3, #16]
				udd_g_ctrlreq.payload =
  40024c:	4a04      	ldr	r2, [pc, #16]	; (400260 <udi_cdc_comm_setup+0x7c>)
  40024e:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
  400250:	2207      	movs	r2, #7
  400252:	819a      	strh	r2, [r3, #12]
				return true;
  400254:	2001      	movs	r0, #1
  400256:	4770      	bx	lr
	return false;  // request Not supported
  400258:	2000      	movs	r0, #0
  40025a:	4770      	bx	lr
  40025c:	2000070c 	.word	0x2000070c
  400260:	200004f4 	.word	0x200004f4
  400264:	00400269 	.word	0x00400269

00400268 <udi_cdc_line_coding_received>:
	}
	return port;
}

static void udi_cdc_line_coding_received(void)
{
  400268:	4770      	bx	lr
	...

0040026c <udi_cdc_tx_send>:

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
  40026c:	4b44      	ldr	r3, [pc, #272]	; (400380 <udi_cdc_tx_send+0x114>)
  40026e:	781b      	ldrb	r3, [r3, #0]
  400270:	b103      	cbz	r3, 400274 <udi_cdc_tx_send+0x8>
  400272:	4770      	bx	lr
{
  400274:	b570      	push	{r4, r5, r6, lr}
  400276:	b084      	sub	sp, #16
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
  400278:	4b42      	ldr	r3, [pc, #264]	; (400384 <udi_cdc_tx_send+0x118>)
  40027a:	4798      	blx	r3
  40027c:	2800      	cmp	r0, #0
  40027e:	d041      	beq.n	400304 <udi_cdc_tx_send+0x98>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
  400280:	4b41      	ldr	r3, [pc, #260]	; (400388 <udi_cdc_tx_send+0x11c>)
  400282:	881c      	ldrh	r4, [r3, #0]
  400284:	4b41      	ldr	r3, [pc, #260]	; (40038c <udi_cdc_tx_send+0x120>)
  400286:	4798      	blx	r3
  400288:	4284      	cmp	r4, r0
  40028a:	d076      	beq.n	40037a <udi_cdc_tx_send+0x10e>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  40028c:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400290:	fab3 f383 	clz	r3, r3
  400294:	095b      	lsrs	r3, r3, #5
  400296:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
  400298:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  40029a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40029e:	2200      	movs	r2, #0
  4002a0:	4b3b      	ldr	r3, [pc, #236]	; (400390 <udi_cdc_tx_send+0x124>)
  4002a2:	701a      	strb	r2, [r3, #0]
	return flags;
  4002a4:	9d03      	ldr	r5, [sp, #12]
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
  4002a6:	4b3b      	ldr	r3, [pc, #236]	; (400394 <udi_cdc_tx_send+0x128>)
  4002a8:	781c      	ldrb	r4, [r3, #0]
  4002aa:	b2e4      	uxtb	r4, r4
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
  4002ac:	4b3a      	ldr	r3, [pc, #232]	; (400398 <udi_cdc_tx_send+0x12c>)
  4002ae:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
  4002b2:	2b00      	cmp	r3, #0
  4002b4:	d02d      	beq.n	400312 <udi_cdc_tx_send+0xa6>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
			cpu_irq_restore(flags);
			return;
		}
	}
	sof_zlp_counter = 0;
  4002b6:	2200      	movs	r2, #0
  4002b8:	4b38      	ldr	r3, [pc, #224]	; (40039c <udi_cdc_tx_send+0x130>)
  4002ba:	801a      	strh	r2, [r3, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
  4002bc:	4b38      	ldr	r3, [pc, #224]	; (4003a0 <udi_cdc_tx_send+0x134>)
  4002be:	781b      	ldrb	r3, [r3, #0]
  4002c0:	2b00      	cmp	r3, #0
  4002c2:	d142      	bne.n	40034a <udi_cdc_tx_send+0xde>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
  4002c4:	fab4 f384 	clz	r3, r4
  4002c8:	095b      	lsrs	r3, r3, #5
  4002ca:	4a32      	ldr	r2, [pc, #200]	; (400394 <udi_cdc_tx_send+0x128>)
  4002cc:	7013      	strb	r3, [r2, #0]
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
	}
	udi_cdc_tx_trans_ongoing[port] = true;
  4002ce:	2201      	movs	r2, #1
  4002d0:	4b2b      	ldr	r3, [pc, #172]	; (400380 <udi_cdc_tx_send+0x114>)
  4002d2:	701a      	strb	r2, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4002d4:	b125      	cbz	r5, 4002e0 <udi_cdc_tx_send+0x74>
		cpu_irq_enable();
  4002d6:	4b2e      	ldr	r3, [pc, #184]	; (400390 <udi_cdc_tx_send+0x124>)
  4002d8:	701a      	strb	r2, [r3, #0]
  4002da:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4002de:	b662      	cpsie	i
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
  4002e0:	4626      	mov	r6, r4
  4002e2:	4b2d      	ldr	r3, [pc, #180]	; (400398 <udi_cdc_tx_send+0x12c>)
  4002e4:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
  4002e8:	2b40      	cmp	r3, #64	; 0x40
  4002ea:	bf14      	ite	ne
  4002ec:	2501      	movne	r5, #1
  4002ee:	2500      	moveq	r5, #0
	if (b_short_packet) {
  4002f0:	d034      	beq.n	40035c <udi_cdc_tx_send+0xf0>
		if (udd_is_high_speed()) {
  4002f2:	4b24      	ldr	r3, [pc, #144]	; (400384 <udi_cdc_tx_send+0x118>)
  4002f4:	4798      	blx	r3
  4002f6:	2800      	cmp	r0, #0
  4002f8:	d02b      	beq.n	400352 <udi_cdc_tx_send+0xe6>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
  4002fa:	4b24      	ldr	r3, [pc, #144]	; (40038c <udi_cdc_tx_send+0x120>)
  4002fc:	4798      	blx	r3
  4002fe:	4b22      	ldr	r3, [pc, #136]	; (400388 <udi_cdc_tx_send+0x11c>)
  400300:	8018      	strh	r0, [r3, #0]
  400302:	e02e      	b.n	400362 <udi_cdc_tx_send+0xf6>
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
  400304:	4b20      	ldr	r3, [pc, #128]	; (400388 <udi_cdc_tx_send+0x11c>)
  400306:	881c      	ldrh	r4, [r3, #0]
  400308:	4b26      	ldr	r3, [pc, #152]	; (4003a4 <udi_cdc_tx_send+0x138>)
  40030a:	4798      	blx	r3
  40030c:	4284      	cmp	r4, r0
  40030e:	d1bd      	bne.n	40028c <udi_cdc_tx_send+0x20>
  400310:	e033      	b.n	40037a <udi_cdc_tx_send+0x10e>
		sof_zlp_counter++;
  400312:	4a22      	ldr	r2, [pc, #136]	; (40039c <udi_cdc_tx_send+0x130>)
  400314:	8813      	ldrh	r3, [r2, #0]
  400316:	3301      	adds	r3, #1
  400318:	8013      	strh	r3, [r2, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
  40031a:	4b1a      	ldr	r3, [pc, #104]	; (400384 <udi_cdc_tx_send+0x118>)
  40031c:	4798      	blx	r3
  40031e:	b918      	cbnz	r0, 400328 <udi_cdc_tx_send+0xbc>
  400320:	4b1e      	ldr	r3, [pc, #120]	; (40039c <udi_cdc_tx_send+0x130>)
  400322:	881b      	ldrh	r3, [r3, #0]
  400324:	2b63      	cmp	r3, #99	; 0x63
  400326:	d908      	bls.n	40033a <udi_cdc_tx_send+0xce>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
  400328:	4b16      	ldr	r3, [pc, #88]	; (400384 <udi_cdc_tx_send+0x118>)
  40032a:	4798      	blx	r3
  40032c:	2800      	cmp	r0, #0
  40032e:	d0c2      	beq.n	4002b6 <udi_cdc_tx_send+0x4a>
  400330:	4b1a      	ldr	r3, [pc, #104]	; (40039c <udi_cdc_tx_send+0x130>)
  400332:	881b      	ldrh	r3, [r3, #0]
  400334:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
  400338:	d2bd      	bcs.n	4002b6 <udi_cdc_tx_send+0x4a>
	if (cpu_irq_is_enabled_flags(flags))
  40033a:	b1f5      	cbz	r5, 40037a <udi_cdc_tx_send+0x10e>
		cpu_irq_enable();
  40033c:	2201      	movs	r2, #1
  40033e:	4b14      	ldr	r3, [pc, #80]	; (400390 <udi_cdc_tx_send+0x124>)
  400340:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  400342:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400346:	b662      	cpsie	i
  400348:	e017      	b.n	40037a <udi_cdc_tx_send+0x10e>
		buf_sel_trans = (buf_sel_trans==0)?1:0;
  40034a:	fab4 f484 	clz	r4, r4
  40034e:	0964      	lsrs	r4, r4, #5
  400350:	e7bd      	b.n	4002ce <udi_cdc_tx_send+0x62>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
  400352:	4b14      	ldr	r3, [pc, #80]	; (4003a4 <udi_cdc_tx_send+0x138>)
  400354:	4798      	blx	r3
  400356:	4b0c      	ldr	r3, [pc, #48]	; (400388 <udi_cdc_tx_send+0x11c>)
  400358:	8018      	strh	r0, [r3, #0]
  40035a:	e002      	b.n	400362 <udi_cdc_tx_send+0xf6>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
  40035c:	2200      	movs	r2, #0
  40035e:	4b0a      	ldr	r3, [pc, #40]	; (400388 <udi_cdc_tx_send+0x11c>)
  400360:	801a      	strh	r2, [r3, #0]
		break;
	}
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
  400362:	4b0d      	ldr	r3, [pc, #52]	; (400398 <udi_cdc_tx_send+0x12c>)
	udd_ep_run( ep,
  400364:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
  400368:	4a0f      	ldr	r2, [pc, #60]	; (4003a8 <udi_cdc_tx_send+0x13c>)
  40036a:	9200      	str	r2, [sp, #0]
  40036c:	4a0f      	ldr	r2, [pc, #60]	; (4003ac <udi_cdc_tx_send+0x140>)
  40036e:	eb02 1284 	add.w	r2, r2, r4, lsl #6
  400372:	4629      	mov	r1, r5
  400374:	2081      	movs	r0, #129	; 0x81
  400376:	4c0e      	ldr	r4, [pc, #56]	; (4003b0 <udi_cdc_tx_send+0x144>)
  400378:	47a0      	blx	r4
			udi_cdc_data_sent);
}
  40037a:	b004      	add	sp, #16
  40037c:	bd70      	pop	{r4, r5, r6, pc}
  40037e:	bf00      	nop
  400380:	20000624 	.word	0x20000624
  400384:	00401bd1 	.word	0x00401bd1
  400388:	20000620 	.word	0x20000620
  40038c:	00401c3d 	.word	0x00401c3d
  400390:	200000a0 	.word	0x200000a0
  400394:	2000061c 	.word	0x2000061c
  400398:	20000618 	.word	0x20000618
  40039c:	200004f0 	.word	0x200004f0
  4003a0:	20000594 	.word	0x20000594
  4003a4:	00401c2d 	.word	0x00401c2d
  4003a8:	004003b5 	.word	0x004003b5
  4003ac:	20000598 	.word	0x20000598
  4003b0:	00401f99 	.word	0x00401f99

004003b4 <udi_cdc_data_sent>:
	if (UDD_EP_TRANSFER_OK != status) {
  4003b4:	b100      	cbz	r0, 4003b8 <udi_cdc_data_sent+0x4>
  4003b6:	4770      	bx	lr
{
  4003b8:	b508      	push	{r3, lr}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
  4003ba:	4b07      	ldr	r3, [pc, #28]	; (4003d8 <udi_cdc_data_sent+0x24>)
  4003bc:	781b      	ldrb	r3, [r3, #0]
  4003be:	fab3 f383 	clz	r3, r3
  4003c2:	095b      	lsrs	r3, r3, #5
  4003c4:	4a05      	ldr	r2, [pc, #20]	; (4003dc <udi_cdc_data_sent+0x28>)
  4003c6:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
	udi_cdc_tx_both_buf_to_send[port] = false;
  4003ca:	4b05      	ldr	r3, [pc, #20]	; (4003e0 <udi_cdc_data_sent+0x2c>)
  4003cc:	7018      	strb	r0, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
  4003ce:	4b05      	ldr	r3, [pc, #20]	; (4003e4 <udi_cdc_data_sent+0x30>)
  4003d0:	7018      	strb	r0, [r3, #0]
	udi_cdc_tx_send(port);
  4003d2:	4b05      	ldr	r3, [pc, #20]	; (4003e8 <udi_cdc_data_sent+0x34>)
  4003d4:	4798      	blx	r3
  4003d6:	bd08      	pop	{r3, pc}
  4003d8:	2000061c 	.word	0x2000061c
  4003dc:	20000618 	.word	0x20000618
  4003e0:	20000594 	.word	0x20000594
  4003e4:	20000624 	.word	0x20000624
  4003e8:	0040026d 	.word	0x0040026d

004003ec <udi_cdc_data_sof_notify>:
{
  4003ec:	b508      	push	{r3, lr}
	udi_cdc_tx_send(port_notify);
  4003ee:	2000      	movs	r0, #0
  4003f0:	4b01      	ldr	r3, [pc, #4]	; (4003f8 <udi_cdc_data_sof_notify+0xc>)
  4003f2:	4798      	blx	r3
  4003f4:	bd08      	pop	{r3, pc}
  4003f6:	bf00      	nop
  4003f8:	0040026d 	.word	0x0040026d

004003fc <udi_cdc_multi_get_nb_received_data>:
{
	udi_cdc_ctrl_state_change(port, true, CDC_SERIAL_STATE_OVERRUN);
}

iram_size_t udi_cdc_multi_get_nb_received_data(uint8_t port)
{
  4003fc:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  4003fe:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400402:	fab3 f383 	clz	r3, r3
  400406:	095b      	lsrs	r3, r3, #5
  400408:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40040a:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  40040c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400410:	2200      	movs	r2, #0
  400412:	4b0b      	ldr	r3, [pc, #44]	; (400440 <udi_cdc_multi_get_nb_received_data+0x44>)
  400414:	701a      	strb	r2, [r3, #0]
	return flags;
  400416:	9901      	ldr	r1, [sp, #4]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
  400418:	4b0a      	ldr	r3, [pc, #40]	; (400444 <udi_cdc_multi_get_nb_received_data+0x48>)
  40041a:	8818      	ldrh	r0, [r3, #0]
  40041c:	b283      	uxth	r3, r0
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
  40041e:	4a0a      	ldr	r2, [pc, #40]	; (400448 <udi_cdc_multi_get_nb_received_data+0x4c>)
  400420:	7812      	ldrb	r2, [r2, #0]
  400422:	b2d2      	uxtb	r2, r2
  400424:	4809      	ldr	r0, [pc, #36]	; (40044c <udi_cdc_multi_get_nb_received_data+0x50>)
  400426:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
  40042a:	b280      	uxth	r0, r0
  40042c:	1ac0      	subs	r0, r0, r3
	if (cpu_irq_is_enabled_flags(flags))
  40042e:	b129      	cbz	r1, 40043c <udi_cdc_multi_get_nb_received_data+0x40>
		cpu_irq_enable();
  400430:	2201      	movs	r2, #1
  400432:	4b03      	ldr	r3, [pc, #12]	; (400440 <udi_cdc_multi_get_nb_received_data+0x44>)
  400434:	701a      	strb	r2, [r3, #0]
  400436:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40043a:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return nb_received;
}
  40043c:	b002      	add	sp, #8
  40043e:	4770      	bx	lr
  400440:	200000a0 	.word	0x200000a0
  400444:	20000588 	.word	0x20000588
  400448:	20000584 	.word	0x20000584
  40044c:	20000580 	.word	0x20000580

00400450 <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
  400450:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
  400452:	4b03      	ldr	r3, [pc, #12]	; (400460 <udi_cdc_multi_is_rx_ready+0x10>)
  400454:	4798      	blx	r3
}
  400456:	3000      	adds	r0, #0
  400458:	bf18      	it	ne
  40045a:	2001      	movne	r0, #1
  40045c:	bd08      	pop	{r3, pc}
  40045e:	bf00      	nop
  400460:	004003fd 	.word	0x004003fd

00400464 <udi_cdc_rx_start>:
{
  400464:	b510      	push	{r4, lr}
  400466:	b084      	sub	sp, #16
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400468:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40046c:	fab3 f383 	clz	r3, r3
  400470:	095b      	lsrs	r3, r3, #5
  400472:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
  400474:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  400476:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40047a:	2200      	movs	r2, #0
  40047c:	4b1e      	ldr	r3, [pc, #120]	; (4004f8 <udi_cdc_rx_start+0x94>)
  40047e:	701a      	strb	r2, [r3, #0]
	return flags;
  400480:	9b03      	ldr	r3, [sp, #12]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
  400482:	4a1e      	ldr	r2, [pc, #120]	; (4004fc <udi_cdc_rx_start+0x98>)
  400484:	7814      	ldrb	r4, [r2, #0]
	if (udi_cdc_rx_trans_ongoing[port] ||
  400486:	4a1e      	ldr	r2, [pc, #120]	; (400500 <udi_cdc_rx_start+0x9c>)
  400488:	7812      	ldrb	r2, [r2, #0]
  40048a:	b94a      	cbnz	r2, 4004a0 <udi_cdc_rx_start+0x3c>
  40048c:	b2e4      	uxtb	r4, r4
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
  40048e:	4a1d      	ldr	r2, [pc, #116]	; (400504 <udi_cdc_rx_start+0xa0>)
  400490:	8811      	ldrh	r1, [r2, #0]
  400492:	b289      	uxth	r1, r1
  400494:	4a1c      	ldr	r2, [pc, #112]	; (400508 <udi_cdc_rx_start+0xa4>)
  400496:	f832 2014 	ldrh.w	r2, [r2, r4, lsl #1]
  40049a:	b292      	uxth	r2, r2
	if (udi_cdc_rx_trans_ongoing[port] ||
  40049c:	4291      	cmp	r1, r2
  40049e:	d209      	bcs.n	4004b4 <udi_cdc_rx_start+0x50>
	if (cpu_irq_is_enabled_flags(flags))
  4004a0:	b33b      	cbz	r3, 4004f2 <udi_cdc_rx_start+0x8e>
		cpu_irq_enable();
  4004a2:	2201      	movs	r2, #1
  4004a4:	4b14      	ldr	r3, [pc, #80]	; (4004f8 <udi_cdc_rx_start+0x94>)
  4004a6:	701a      	strb	r2, [r3, #0]
  4004a8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4004ac:	b662      	cpsie	i
		return false;
  4004ae:	2000      	movs	r0, #0
}
  4004b0:	b004      	add	sp, #16
  4004b2:	bd10      	pop	{r4, pc}
	udi_cdc_rx_pos[port] = 0;
  4004b4:	2100      	movs	r1, #0
  4004b6:	4a13      	ldr	r2, [pc, #76]	; (400504 <udi_cdc_rx_start+0xa0>)
  4004b8:	8011      	strh	r1, [r2, #0]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
  4004ba:	fab4 f284 	clz	r2, r4
  4004be:	0952      	lsrs	r2, r2, #5
  4004c0:	490e      	ldr	r1, [pc, #56]	; (4004fc <udi_cdc_rx_start+0x98>)
  4004c2:	700a      	strb	r2, [r1, #0]
	udi_cdc_rx_trans_ongoing[port] = true;
  4004c4:	2101      	movs	r1, #1
  4004c6:	4a0e      	ldr	r2, [pc, #56]	; (400500 <udi_cdc_rx_start+0x9c>)
  4004c8:	7011      	strb	r1, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
  4004ca:	b123      	cbz	r3, 4004d6 <udi_cdc_rx_start+0x72>
		cpu_irq_enable();
  4004cc:	4b0a      	ldr	r3, [pc, #40]	; (4004f8 <udi_cdc_rx_start+0x94>)
  4004ce:	7019      	strb	r1, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  4004d0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4004d4:	b662      	cpsie	i
	if (udi_cdc_multi_is_rx_ready(port)) {
  4004d6:	2000      	movs	r0, #0
  4004d8:	4b0c      	ldr	r3, [pc, #48]	; (40050c <udi_cdc_rx_start+0xa8>)
  4004da:	4798      	blx	r3
	return udd_ep_run(ep,
  4004dc:	4b0c      	ldr	r3, [pc, #48]	; (400510 <udi_cdc_rx_start+0xac>)
  4004de:	9300      	str	r3, [sp, #0]
  4004e0:	2340      	movs	r3, #64	; 0x40
  4004e2:	4a0c      	ldr	r2, [pc, #48]	; (400514 <udi_cdc_rx_start+0xb0>)
  4004e4:	eb02 1284 	add.w	r2, r2, r4, lsl #6
  4004e8:	2101      	movs	r1, #1
  4004ea:	2002      	movs	r0, #2
  4004ec:	4c0a      	ldr	r4, [pc, #40]	; (400518 <udi_cdc_rx_start+0xb4>)
  4004ee:	47a0      	blx	r4
  4004f0:	e7de      	b.n	4004b0 <udi_cdc_rx_start+0x4c>
		return false;
  4004f2:	2000      	movs	r0, #0
  4004f4:	e7dc      	b.n	4004b0 <udi_cdc_rx_start+0x4c>
  4004f6:	bf00      	nop
  4004f8:	200000a0 	.word	0x200000a0
  4004fc:	20000584 	.word	0x20000584
  400500:	2000058c 	.word	0x2000058c
  400504:	20000588 	.word	0x20000588
  400508:	20000580 	.word	0x20000580
  40050c:	00400451 	.word	0x00400451
  400510:	004005b1 	.word	0x004005b1
  400514:	20000500 	.word	0x20000500
  400518:	00401f99 	.word	0x00401f99

0040051c <udi_cdc_data_enable>:
{
  40051c:	b510      	push	{r4, lr}
	udi_cdc_nb_data_enabled = 0;
  40051e:	2400      	movs	r4, #0
  400520:	4b16      	ldr	r3, [pc, #88]	; (40057c <udi_cdc_data_enable+0x60>)
  400522:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
  400524:	4b16      	ldr	r3, [pc, #88]	; (400580 <udi_cdc_data_enable+0x64>)
  400526:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
  400528:	4b16      	ldr	r3, [pc, #88]	; (400584 <udi_cdc_data_enable+0x68>)
  40052a:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_sel[port] = 0;
  40052c:	4b16      	ldr	r3, [pc, #88]	; (400588 <udi_cdc_data_enable+0x6c>)
  40052e:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][0] = 0;
  400530:	4b16      	ldr	r3, [pc, #88]	; (40058c <udi_cdc_data_enable+0x70>)
  400532:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][1] = 0;
  400534:	805c      	strh	r4, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
  400536:	4b16      	ldr	r3, [pc, #88]	; (400590 <udi_cdc_data_enable+0x74>)
  400538:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_send(port);
  40053a:	4620      	mov	r0, r4
  40053c:	4b15      	ldr	r3, [pc, #84]	; (400594 <udi_cdc_data_enable+0x78>)
  40053e:	4798      	blx	r3
	udi_cdc_rx_trans_ongoing[port] = false;
  400540:	4b15      	ldr	r3, [pc, #84]	; (400598 <udi_cdc_data_enable+0x7c>)
  400542:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_sel[port] = 0;
  400544:	4b15      	ldr	r3, [pc, #84]	; (40059c <udi_cdc_data_enable+0x80>)
  400546:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][0] = 0;
  400548:	4b15      	ldr	r3, [pc, #84]	; (4005a0 <udi_cdc_data_enable+0x84>)
  40054a:	801c      	strh	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][1] = 0;
  40054c:	805c      	strh	r4, [r3, #2]
	udi_cdc_rx_pos[port] = 0;
  40054e:	4b15      	ldr	r3, [pc, #84]	; (4005a4 <udi_cdc_data_enable+0x88>)
  400550:	801c      	strh	r4, [r3, #0]
	if (!udi_cdc_rx_start(port)) {
  400552:	4620      	mov	r0, r4
  400554:	4b14      	ldr	r3, [pc, #80]	; (4005a8 <udi_cdc_data_enable+0x8c>)
  400556:	4798      	blx	r3
  400558:	4601      	mov	r1, r0
  40055a:	b140      	cbz	r0, 40056e <udi_cdc_data_enable+0x52>
	udi_cdc_nb_data_enabled++;
  40055c:	4a07      	ldr	r2, [pc, #28]	; (40057c <udi_cdc_data_enable+0x60>)
  40055e:	7813      	ldrb	r3, [r2, #0]
  400560:	3301      	adds	r3, #1
  400562:	b2db      	uxtb	r3, r3
  400564:	7013      	strb	r3, [r2, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
  400566:	7813      	ldrb	r3, [r2, #0]
  400568:	b2db      	uxtb	r3, r3
  40056a:	2b01      	cmp	r3, #1
  40056c:	d001      	beq.n	400572 <udi_cdc_data_enable+0x56>
}
  40056e:	4608      	mov	r0, r1
  400570:	bd10      	pop	{r4, pc}
		udi_cdc_data_running = true;
  400572:	2201      	movs	r2, #1
  400574:	4b0d      	ldr	r3, [pc, #52]	; (4005ac <udi_cdc_data_enable+0x90>)
  400576:	701a      	strb	r2, [r3, #0]
  400578:	e7f9      	b.n	40056e <udi_cdc_data_enable+0x52>
  40057a:	bf00      	nop
  40057c:	200004fc 	.word	0x200004fc
  400580:	20000624 	.word	0x20000624
  400584:	20000594 	.word	0x20000594
  400588:	2000061c 	.word	0x2000061c
  40058c:	20000618 	.word	0x20000618
  400590:	20000620 	.word	0x20000620
  400594:	0040026d 	.word	0x0040026d
  400598:	2000058c 	.word	0x2000058c
  40059c:	20000584 	.word	0x20000584
  4005a0:	20000580 	.word	0x20000580
  4005a4:	20000588 	.word	0x20000588
  4005a8:	00400465 	.word	0x00400465
  4005ac:	200004f2 	.word	0x200004f2

004005b0 <udi_cdc_data_received>:
	if (UDD_EP_TRANSFER_OK != status) {
  4005b0:	b9e8      	cbnz	r0, 4005ee <udi_cdc_data_received+0x3e>
{
  4005b2:	b510      	push	{r4, lr}
  4005b4:	b082      	sub	sp, #8
  4005b6:	4610      	mov	r0, r2
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
  4005b8:	4b0d      	ldr	r3, [pc, #52]	; (4005f0 <udi_cdc_data_received+0x40>)
  4005ba:	781c      	ldrb	r4, [r3, #0]
  4005bc:	fab4 f484 	clz	r4, r4
  4005c0:	0964      	lsrs	r4, r4, #5
	if (!n) {
  4005c2:	b151      	cbz	r1, 4005da <udi_cdc_data_received+0x2a>
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
  4005c4:	b289      	uxth	r1, r1
  4005c6:	4b0b      	ldr	r3, [pc, #44]	; (4005f4 <udi_cdc_data_received+0x44>)
  4005c8:	f823 1014 	strh.w	r1, [r3, r4, lsl #1]
	udi_cdc_rx_trans_ongoing[port] = false;
  4005cc:	2000      	movs	r0, #0
  4005ce:	4b0a      	ldr	r3, [pc, #40]	; (4005f8 <udi_cdc_data_received+0x48>)
  4005d0:	7018      	strb	r0, [r3, #0]
	udi_cdc_rx_start(port);
  4005d2:	4b0a      	ldr	r3, [pc, #40]	; (4005fc <udi_cdc_data_received+0x4c>)
  4005d4:	4798      	blx	r3
}
  4005d6:	b002      	add	sp, #8
  4005d8:	bd10      	pop	{r4, pc}
		udd_ep_run( ep,
  4005da:	4b09      	ldr	r3, [pc, #36]	; (400600 <udi_cdc_data_received+0x50>)
  4005dc:	9300      	str	r3, [sp, #0]
  4005de:	2340      	movs	r3, #64	; 0x40
  4005e0:	4a08      	ldr	r2, [pc, #32]	; (400604 <udi_cdc_data_received+0x54>)
  4005e2:	eb02 1284 	add.w	r2, r2, r4, lsl #6
  4005e6:	2101      	movs	r1, #1
  4005e8:	4c07      	ldr	r4, [pc, #28]	; (400608 <udi_cdc_data_received+0x58>)
  4005ea:	47a0      	blx	r4
		return;
  4005ec:	e7f3      	b.n	4005d6 <udi_cdc_data_received+0x26>
  4005ee:	4770      	bx	lr
  4005f0:	20000584 	.word	0x20000584
  4005f4:	20000580 	.word	0x20000580
  4005f8:	2000058c 	.word	0x2000058c
  4005fc:	00400465 	.word	0x00400465
  400600:	004005b1 	.word	0x004005b1
  400604:	20000500 	.word	0x20000500
  400608:	00401f99 	.word	0x00401f99

0040060c <udc_next_desc_in_iface>:
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
  40060c:	4b10      	ldr	r3, [pc, #64]	; (400650 <udc_next_desc_in_iface+0x44>)
  40060e:	681b      	ldr	r3, [r3, #0]
  400610:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
  400612:	8853      	ldrh	r3, [r2, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  400614:	441a      	add	r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
  400616:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  400618:	4418      	add	r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
  40061a:	4290      	cmp	r0, r2
  40061c:	d211      	bcs.n	400642 <udc_next_desc_in_iface+0x36>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  40061e:	7843      	ldrb	r3, [r0, #1]
  400620:	2b04      	cmp	r3, #4
  400622:	d010      	beq.n	400646 <udc_next_desc_in_iface+0x3a>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
  400624:	428b      	cmp	r3, r1
  400626:	d009      	beq.n	40063c <udc_next_desc_in_iface+0x30>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
  400628:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  40062a:	4418      	add	r0, r3
	while (ptr_eof_desc > desc) {
  40062c:	4290      	cmp	r0, r2
  40062e:	d206      	bcs.n	40063e <udc_next_desc_in_iface+0x32>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  400630:	7843      	ldrb	r3, [r0, #1]
  400632:	2b04      	cmp	r3, #4
  400634:	d009      	beq.n	40064a <udc_next_desc_in_iface+0x3e>
		if (desc_id == desc->bDescriptorType) {
  400636:	428b      	cmp	r3, r1
  400638:	d1f6      	bne.n	400628 <udc_next_desc_in_iface+0x1c>
  40063a:	e007      	b.n	40064c <udc_next_desc_in_iface+0x40>
  40063c:	4770      	bx	lr
	}
	return NULL; // No specific descriptor found
  40063e:	2000      	movs	r0, #0
  400640:	4770      	bx	lr
  400642:	2000      	movs	r0, #0
  400644:	4770      	bx	lr
  400646:	2000      	movs	r0, #0
  400648:	4770      	bx	lr
  40064a:	2000      	movs	r0, #0
}
  40064c:	4770      	bx	lr
  40064e:	bf00      	nop
  400650:	20000640 	.word	0x20000640

00400654 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
  400654:	b508      	push	{r3, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
  400656:	4b03      	ldr	r3, [pc, #12]	; (400664 <udc_valid_address+0x10>)
  400658:	7898      	ldrb	r0, [r3, #2]
  40065a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  40065e:	4b02      	ldr	r3, [pc, #8]	; (400668 <udc_valid_address+0x14>)
  400660:	4798      	blx	r3
  400662:	bd08      	pop	{r3, pc}
  400664:	2000070c 	.word	0x2000070c
  400668:	00401bd5 	.word	0x00401bd5

0040066c <udc_update_iface_desc>:
	if (0 == udc_num_configuration) {
  40066c:	4b19      	ldr	r3, [pc, #100]	; (4006d4 <udc_update_iface_desc+0x68>)
  40066e:	781b      	ldrb	r3, [r3, #0]
  400670:	b34b      	cbz	r3, 4006c6 <udc_update_iface_desc+0x5a>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  400672:	4b19      	ldr	r3, [pc, #100]	; (4006d8 <udc_update_iface_desc+0x6c>)
  400674:	681b      	ldr	r3, [r3, #0]
  400676:	681b      	ldr	r3, [r3, #0]
  400678:	791a      	ldrb	r2, [r3, #4]
  40067a:	4282      	cmp	r2, r0
  40067c:	d925      	bls.n	4006ca <udc_update_iface_desc+0x5e>
{
  40067e:	b470      	push	{r4, r5, r6}
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
  400680:	4a16      	ldr	r2, [pc, #88]	; (4006dc <udc_update_iface_desc+0x70>)
  400682:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
  400684:	885c      	ldrh	r4, [r3, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  400686:	441c      	add	r4, r3
	while (ptr_end_desc >
  400688:	42a3      	cmp	r3, r4
  40068a:	d220      	bcs.n	4006ce <udc_update_iface_desc+0x62>
  40068c:	2500      	movs	r5, #0
  40068e:	2601      	movs	r6, #1
  400690:	e007      	b.n	4006a2 <udc_update_iface_desc+0x36>
  400692:	4a12      	ldr	r2, [pc, #72]	; (4006dc <udc_update_iface_desc+0x70>)
  400694:	6013      	str	r3, [r2, #0]
  400696:	e00f      	b.n	4006b8 <udc_update_iface_desc+0x4c>
				udc_ptr_iface->bLength);
  400698:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
  40069a:	4413      	add	r3, r2
  40069c:	4635      	mov	r5, r6
	while (ptr_end_desc >
  40069e:	42a3      	cmp	r3, r4
  4006a0:	d20c      	bcs.n	4006bc <udc_update_iface_desc+0x50>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
  4006a2:	785a      	ldrb	r2, [r3, #1]
  4006a4:	2a04      	cmp	r2, #4
  4006a6:	d1f7      	bne.n	400698 <udc_update_iface_desc+0x2c>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
  4006a8:	789a      	ldrb	r2, [r3, #2]
  4006aa:	4282      	cmp	r2, r0
  4006ac:	d1f4      	bne.n	400698 <udc_update_iface_desc+0x2c>
  4006ae:	78da      	ldrb	r2, [r3, #3]
  4006b0:	428a      	cmp	r2, r1
  4006b2:	d1f1      	bne.n	400698 <udc_update_iface_desc+0x2c>
  4006b4:	2d00      	cmp	r5, #0
  4006b6:	d1ec      	bne.n	400692 <udc_update_iface_desc+0x26>
				return true; // Interface found
  4006b8:	2001      	movs	r0, #1
  4006ba:	e002      	b.n	4006c2 <udc_update_iface_desc+0x56>
  4006bc:	4a07      	ldr	r2, [pc, #28]	; (4006dc <udc_update_iface_desc+0x70>)
  4006be:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
  4006c0:	2000      	movs	r0, #0
}
  4006c2:	bc70      	pop	{r4, r5, r6}
  4006c4:	4770      	bx	lr
		return false;
  4006c6:	2000      	movs	r0, #0
  4006c8:	4770      	bx	lr
		return false;
  4006ca:	2000      	movs	r0, #0
  4006cc:	4770      	bx	lr
	return false; // Interface not found
  4006ce:	2000      	movs	r0, #0
  4006d0:	e7f7      	b.n	4006c2 <udc_update_iface_desc+0x56>
  4006d2:	bf00      	nop
  4006d4:	2000063c 	.word	0x2000063c
  4006d8:	20000640 	.word	0x20000640
  4006dc:	20000644 	.word	0x20000644

004006e0 <udc_iface_disable>:
{
  4006e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4006e4:	4604      	mov	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
  4006e6:	2100      	movs	r1, #0
  4006e8:	4b13      	ldr	r3, [pc, #76]	; (400738 <udc_iface_disable+0x58>)
  4006ea:	4798      	blx	r3
  4006ec:	4680      	mov	r8, r0
  4006ee:	b910      	cbnz	r0, 4006f6 <udc_iface_disable+0x16>
}
  4006f0:	4640      	mov	r0, r8
  4006f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  4006f6:	4b11      	ldr	r3, [pc, #68]	; (40073c <udc_iface_disable+0x5c>)
  4006f8:	681b      	ldr	r3, [r3, #0]
  4006fa:	685b      	ldr	r3, [r3, #4]
  4006fc:	f853 9024 	ldr.w	r9, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  400700:	f8d9 300c 	ldr.w	r3, [r9, #12]
  400704:	4798      	blx	r3
  400706:	4601      	mov	r1, r0
  400708:	4620      	mov	r0, r4
  40070a:	4b0b      	ldr	r3, [pc, #44]	; (400738 <udc_iface_disable+0x58>)
  40070c:	4798      	blx	r3
  40070e:	4680      	mov	r8, r0
  400710:	2800      	cmp	r0, #0
  400712:	d0ed      	beq.n	4006f0 <udc_iface_disable+0x10>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  400714:	4b0a      	ldr	r3, [pc, #40]	; (400740 <udc_iface_disable+0x60>)
  400716:	681c      	ldr	r4, [r3, #0]
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  400718:	2605      	movs	r6, #5
  40071a:	4d0a      	ldr	r5, [pc, #40]	; (400744 <udc_iface_disable+0x64>)
			udd_ep_free(ep_desc->bEndpointAddress);
  40071c:	4f0a      	ldr	r7, [pc, #40]	; (400748 <udc_iface_disable+0x68>)
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  40071e:	4631      	mov	r1, r6
  400720:	4620      	mov	r0, r4
  400722:	47a8      	blx	r5
			if (NULL == ep_desc) {
  400724:	4604      	mov	r4, r0
  400726:	b110      	cbz	r0, 40072e <udc_iface_disable+0x4e>
			udd_ep_free(ep_desc->bEndpointAddress);
  400728:	7880      	ldrb	r0, [r0, #2]
  40072a:	47b8      	blx	r7
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  40072c:	e7f7      	b.n	40071e <udc_iface_disable+0x3e>
	udi_api->disable();
  40072e:	f8d9 3004 	ldr.w	r3, [r9, #4]
  400732:	4798      	blx	r3
	return true;
  400734:	e7dc      	b.n	4006f0 <udc_iface_disable+0x10>
  400736:	bf00      	nop
  400738:	0040066d 	.word	0x0040066d
  40073c:	20000640 	.word	0x20000640
  400740:	20000644 	.word	0x20000644
  400744:	0040060d 	.word	0x0040060d
  400748:	00401d45 	.word	0x00401d45

0040074c <udc_iface_enable>:
{
  40074c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400750:	4680      	mov	r8, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
  400752:	4b10      	ldr	r3, [pc, #64]	; (400794 <udc_iface_enable+0x48>)
  400754:	4798      	blx	r3
  400756:	4603      	mov	r3, r0
  400758:	b1c8      	cbz	r0, 40078e <udc_iface_enable+0x42>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  40075a:	4b0f      	ldr	r3, [pc, #60]	; (400798 <udc_iface_enable+0x4c>)
  40075c:	681c      	ldr	r4, [r3, #0]
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  40075e:	2605      	movs	r6, #5
  400760:	4d0e      	ldr	r5, [pc, #56]	; (40079c <udc_iface_enable+0x50>)
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  400762:	4f0f      	ldr	r7, [pc, #60]	; (4007a0 <udc_iface_enable+0x54>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  400764:	4631      	mov	r1, r6
  400766:	4620      	mov	r0, r4
  400768:	47a8      	blx	r5
		if (NULL == ep_desc)
  40076a:	4604      	mov	r4, r0
  40076c:	b138      	cbz	r0, 40077e <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  40076e:	8882      	ldrh	r2, [r0, #4]
  400770:	78c1      	ldrb	r1, [r0, #3]
  400772:	7880      	ldrb	r0, [r0, #2]
  400774:	47b8      	blx	r7
  400776:	4603      	mov	r3, r0
  400778:	2800      	cmp	r0, #0
  40077a:	d1f3      	bne.n	400764 <udc_iface_enable+0x18>
  40077c:	e007      	b.n	40078e <udc_iface_enable+0x42>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
  40077e:	4b09      	ldr	r3, [pc, #36]	; (4007a4 <udc_iface_enable+0x58>)
  400780:	681b      	ldr	r3, [r3, #0]
  400782:	685b      	ldr	r3, [r3, #4]
  400784:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
  400788:	681b      	ldr	r3, [r3, #0]
  40078a:	4798      	blx	r3
  40078c:	4603      	mov	r3, r0
}
  40078e:	4618      	mov	r0, r3
  400790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400794:	0040066d 	.word	0x0040066d
  400798:	20000644 	.word	0x20000644
  40079c:	0040060d 	.word	0x0040060d
  4007a0:	00401c4d 	.word	0x00401c4d
  4007a4:	20000640 	.word	0x20000640

004007a8 <udc_reset>:
{
  4007a8:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
  4007aa:	4b0d      	ldr	r3, [pc, #52]	; (4007e0 <udc_reset+0x38>)
  4007ac:	781b      	ldrb	r3, [r3, #0]
  4007ae:	b183      	cbz	r3, 4007d2 <udc_reset+0x2a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4007b0:	4b0c      	ldr	r3, [pc, #48]	; (4007e4 <udc_reset+0x3c>)
  4007b2:	681b      	ldr	r3, [r3, #0]
  4007b4:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
  4007b6:	791b      	ldrb	r3, [r3, #4]
  4007b8:	b15b      	cbz	r3, 4007d2 <udc_reset+0x2a>
  4007ba:	2400      	movs	r4, #0
			udc_iface_disable(iface_num);
  4007bc:	4e0a      	ldr	r6, [pc, #40]	; (4007e8 <udc_reset+0x40>)
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4007be:	4d09      	ldr	r5, [pc, #36]	; (4007e4 <udc_reset+0x3c>)
			udc_iface_disable(iface_num);
  4007c0:	4620      	mov	r0, r4
  4007c2:	47b0      	blx	r6
				iface_num++) {
  4007c4:	3401      	adds	r4, #1
  4007c6:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4007c8:	682b      	ldr	r3, [r5, #0]
  4007ca:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
  4007cc:	791b      	ldrb	r3, [r3, #4]
  4007ce:	42a3      	cmp	r3, r4
  4007d0:	d8f6      	bhi.n	4007c0 <udc_reset+0x18>
	udc_num_configuration = 0;
  4007d2:	2200      	movs	r2, #0
  4007d4:	4b02      	ldr	r3, [pc, #8]	; (4007e0 <udc_reset+0x38>)
  4007d6:	701a      	strb	r2, [r3, #0]
	udc_device_status =
  4007d8:	2201      	movs	r2, #1
  4007da:	4b04      	ldr	r3, [pc, #16]	; (4007ec <udc_reset+0x44>)
  4007dc:	801a      	strh	r2, [r3, #0]
  4007de:	bd70      	pop	{r4, r5, r6, pc}
  4007e0:	2000063c 	.word	0x2000063c
  4007e4:	20000640 	.word	0x20000640
  4007e8:	004006e1 	.word	0x004006e1
  4007ec:	20000632 	.word	0x20000632

004007f0 <udc_sof_notify>:
{
  4007f0:	b538      	push	{r3, r4, r5, lr}
	if (udc_num_configuration) {
  4007f2:	4b0d      	ldr	r3, [pc, #52]	; (400828 <udc_sof_notify+0x38>)
  4007f4:	781b      	ldrb	r3, [r3, #0]
  4007f6:	b1b3      	cbz	r3, 400826 <udc_sof_notify+0x36>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4007f8:	4b0c      	ldr	r3, [pc, #48]	; (40082c <udc_sof_notify+0x3c>)
  4007fa:	681b      	ldr	r3, [r3, #0]
  4007fc:	681a      	ldr	r2, [r3, #0]
		for (iface_num = 0;
  4007fe:	7912      	ldrb	r2, [r2, #4]
  400800:	b18a      	cbz	r2, 400826 <udc_sof_notify+0x36>
  400802:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400804:	4d09      	ldr	r5, [pc, #36]	; (40082c <udc_sof_notify+0x3c>)
  400806:	e006      	b.n	400816 <udc_sof_notify+0x26>
				iface_num++) {
  400808:	3401      	adds	r4, #1
  40080a:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  40080c:	682b      	ldr	r3, [r5, #0]
  40080e:	681a      	ldr	r2, [r3, #0]
		for (iface_num = 0;
  400810:	7912      	ldrb	r2, [r2, #4]
  400812:	42a2      	cmp	r2, r4
  400814:	d907      	bls.n	400826 <udc_sof_notify+0x36>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
  400816:	685b      	ldr	r3, [r3, #4]
  400818:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  40081c:	691b      	ldr	r3, [r3, #16]
  40081e:	2b00      	cmp	r3, #0
  400820:	d0f2      	beq.n	400808 <udc_sof_notify+0x18>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
  400822:	4798      	blx	r3
  400824:	e7f0      	b.n	400808 <udc_sof_notify+0x18>
  400826:	bd38      	pop	{r3, r4, r5, pc}
  400828:	2000063c 	.word	0x2000063c
  40082c:	20000640 	.word	0x20000640

00400830 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
  400830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
  400832:	4b96      	ldr	r3, [pc, #600]	; (400a8c <udc_process_setup+0x25c>)
  400834:	2200      	movs	r2, #0
  400836:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
  400838:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  40083a:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
  40083c:	781b      	ldrb	r3, [r3, #0]
  40083e:	f013 0f80 	tst.w	r3, #128	; 0x80
  400842:	d114      	bne.n	40086e <udc_process_setup+0x3e>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
  400844:	f013 0f60 	tst.w	r3, #96	; 0x60
  400848:	f000 80b8 	beq.w	4009bc <udc_process_setup+0x18c>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
  40084c:	4b8f      	ldr	r3, [pc, #572]	; (400a8c <udc_process_setup+0x25c>)
  40084e:	781b      	ldrb	r3, [r3, #0]
  400850:	f003 031f 	and.w	r3, r3, #31
  400854:	2b01      	cmp	r3, #1
  400856:	f000 818b 	beq.w	400b70 <udc_process_setup+0x340>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
  40085a:	4b8c      	ldr	r3, [pc, #560]	; (400a8c <udc_process_setup+0x25c>)
  40085c:	781b      	ldrb	r3, [r3, #0]
  40085e:	f003 031f 	and.w	r3, r3, #31
  400862:	2b02      	cmp	r3, #2
  400864:	f000 81ac 	beq.w	400bc0 <udc_process_setup+0x390>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
  400868:	2300      	movs	r3, #0
#endif
}
  40086a:	4618      	mov	r0, r3
  40086c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
  40086e:	4a87      	ldr	r2, [pc, #540]	; (400a8c <udc_process_setup+0x25c>)
  400870:	88d2      	ldrh	r2, [r2, #6]
  400872:	2a00      	cmp	r2, #0
  400874:	f000 81cd 	beq.w	400c12 <udc_process_setup+0x3e2>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
  400878:	f013 0f60 	tst.w	r3, #96	; 0x60
  40087c:	d1e6      	bne.n	40084c <udc_process_setup+0x1c>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  40087e:	f013 031f 	ands.w	r3, r3, #31
  400882:	d106      	bne.n	400892 <udc_process_setup+0x62>
			switch (udd_g_ctrlreq.req.bRequest) {
  400884:	4981      	ldr	r1, [pc, #516]	; (400a8c <udc_process_setup+0x25c>)
  400886:	7849      	ldrb	r1, [r1, #1]
  400888:	2906      	cmp	r1, #6
  40088a:	d013      	beq.n	4008b4 <udc_process_setup+0x84>
  40088c:	2908      	cmp	r1, #8
  40088e:	d058      	beq.n	400942 <udc_process_setup+0x112>
  400890:	b149      	cbz	r1, 4008a6 <udc_process_setup+0x76>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  400892:	2b01      	cmp	r3, #1
  400894:	d05c      	beq.n	400950 <udc_process_setup+0x120>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  400896:	2b02      	cmp	r3, #2
  400898:	d1d8      	bne.n	40084c <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
  40089a:	4b7c      	ldr	r3, [pc, #496]	; (400a8c <udc_process_setup+0x25c>)
  40089c:	785b      	ldrb	r3, [r3, #1]
  40089e:	2b00      	cmp	r3, #0
  4008a0:	d07e      	beq.n	4009a0 <udc_process_setup+0x170>
	return false;
  4008a2:	2300      	movs	r3, #0
  4008a4:	e160      	b.n	400b68 <udc_process_setup+0x338>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
  4008a6:	2a02      	cmp	r2, #2
  4008a8:	d1d0      	bne.n	40084c <udc_process_setup+0x1c>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
  4008aa:	2102      	movs	r1, #2
  4008ac:	4878      	ldr	r0, [pc, #480]	; (400a90 <udc_process_setup+0x260>)
  4008ae:	4b79      	ldr	r3, [pc, #484]	; (400a94 <udc_process_setup+0x264>)
  4008b0:	4798      	blx	r3
  4008b2:	e09f      	b.n	4009f4 <udc_process_setup+0x1c4>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  4008b4:	4b75      	ldr	r3, [pc, #468]	; (400a8c <udc_process_setup+0x25c>)
  4008b6:	885a      	ldrh	r2, [r3, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
  4008b8:	0a13      	lsrs	r3, r2, #8
  4008ba:	3b01      	subs	r3, #1
  4008bc:	2b0e      	cmp	r3, #14
  4008be:	f200 8150 	bhi.w	400b62 <udc_process_setup+0x332>
  4008c2:	e8df f013 	tbh	[pc, r3, lsl #1]
  4008c6:	000f      	.short	0x000f
  4008c8:	0036001c 	.word	0x0036001c
  4008cc:	014e014e 	.word	0x014e014e
  4008d0:	014e014e 	.word	0x014e014e
  4008d4:	014e014e 	.word	0x014e014e
  4008d8:	014e014e 	.word	0x014e014e
  4008dc:	014e014e 	.word	0x014e014e
  4008e0:	002e014e 	.word	0x002e014e
				(uint8_t *) udc_config.confdev_lsfs,
  4008e4:	4b6c      	ldr	r3, [pc, #432]	; (400a98 <udc_process_setup+0x268>)
  4008e6:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
  4008e8:	7801      	ldrb	r1, [r0, #0]
  4008ea:	4b6a      	ldr	r3, [pc, #424]	; (400a94 <udc_process_setup+0x264>)
  4008ec:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
  4008ee:	4b67      	ldr	r3, [pc, #412]	; (400a8c <udc_process_setup+0x25c>)
  4008f0:	88da      	ldrh	r2, [r3, #6]
  4008f2:	899b      	ldrh	r3, [r3, #12]
  4008f4:	4293      	cmp	r3, r2
  4008f6:	d97d      	bls.n	4009f4 <udc_process_setup+0x1c4>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
  4008f8:	4b64      	ldr	r3, [pc, #400]	; (400a8c <udc_process_setup+0x25c>)
  4008fa:	819a      	strh	r2, [r3, #12]
  4008fc:	e07a      	b.n	4009f4 <udc_process_setup+0x1c4>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  4008fe:	b2d2      	uxtb	r2, r2
			if (conf_num >= udc_config.confdev_lsfs->
  400900:	4b65      	ldr	r3, [pc, #404]	; (400a98 <udc_process_setup+0x268>)
  400902:	681b      	ldr	r3, [r3, #0]
  400904:	7c5b      	ldrb	r3, [r3, #17]
  400906:	4293      	cmp	r3, r2
  400908:	d9a0      	bls.n	40084c <udc_process_setup+0x1c>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
  40090a:	4b63      	ldr	r3, [pc, #396]	; (400a98 <udc_process_setup+0x268>)
  40090c:	685b      	ldr	r3, [r3, #4]
  40090e:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
			udd_set_setup_payload(
  400912:	8841      	ldrh	r1, [r0, #2]
  400914:	4b5f      	ldr	r3, [pc, #380]	; (400a94 <udc_process_setup+0x264>)
  400916:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
  400918:	4b5c      	ldr	r3, [pc, #368]	; (400a8c <udc_process_setup+0x25c>)
  40091a:	689b      	ldr	r3, [r3, #8]
  40091c:	2202      	movs	r2, #2
  40091e:	705a      	strb	r2, [r3, #1]
  400920:	e7e5      	b.n	4008ee <udc_process_setup+0xbe>
		if (udc_config.conf_bos == NULL) {
  400922:	4b5d      	ldr	r3, [pc, #372]	; (400a98 <udc_process_setup+0x268>)
  400924:	6898      	ldr	r0, [r3, #8]
  400926:	2800      	cmp	r0, #0
  400928:	d090      	beq.n	40084c <udc_process_setup+0x1c>
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
  40092a:	8841      	ldrh	r1, [r0, #2]
  40092c:	4b59      	ldr	r3, [pc, #356]	; (400a94 <udc_process_setup+0x264>)
  40092e:	4798      	blx	r3
  400930:	e7dd      	b.n	4008ee <udc_process_setup+0xbe>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
  400932:	f012 0fff 	tst.w	r2, #255	; 0xff
  400936:	d189      	bne.n	40084c <udc_process_setup+0x1c>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
  400938:	2104      	movs	r1, #4
  40093a:	4858      	ldr	r0, [pc, #352]	; (400a9c <udc_process_setup+0x26c>)
  40093c:	4b55      	ldr	r3, [pc, #340]	; (400a94 <udc_process_setup+0x264>)
  40093e:	4798      	blx	r3
  400940:	e7d5      	b.n	4008ee <udc_process_setup+0xbe>
	if (udd_g_ctrlreq.req.wLength != 1) {
  400942:	2a01      	cmp	r2, #1
  400944:	d182      	bne.n	40084c <udc_process_setup+0x1c>
	udd_set_setup_payload(&udc_num_configuration,1);
  400946:	2101      	movs	r1, #1
  400948:	4855      	ldr	r0, [pc, #340]	; (400aa0 <udc_process_setup+0x270>)
  40094a:	4b52      	ldr	r3, [pc, #328]	; (400a94 <udc_process_setup+0x264>)
  40094c:	4798      	blx	r3
  40094e:	e051      	b.n	4009f4 <udc_process_setup+0x1c4>
			switch (udd_g_ctrlreq.req.bRequest) {
  400950:	494e      	ldr	r1, [pc, #312]	; (400a8c <udc_process_setup+0x25c>)
  400952:	7849      	ldrb	r1, [r1, #1]
  400954:	290a      	cmp	r1, #10
  400956:	d19e      	bne.n	400896 <udc_process_setup+0x66>
	if (udd_g_ctrlreq.req.wLength != 1) {
  400958:	2a01      	cmp	r2, #1
  40095a:	f47f af77 	bne.w	40084c <udc_process_setup+0x1c>
	if (!udc_num_configuration) {
  40095e:	4b50      	ldr	r3, [pc, #320]	; (400aa0 <udc_process_setup+0x270>)
  400960:	781b      	ldrb	r3, [r3, #0]
  400962:	2b00      	cmp	r3, #0
  400964:	f43f af72 	beq.w	40084c <udc_process_setup+0x1c>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  400968:	4b48      	ldr	r3, [pc, #288]	; (400a8c <udc_process_setup+0x25c>)
  40096a:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  40096c:	4b4d      	ldr	r3, [pc, #308]	; (400aa4 <udc_process_setup+0x274>)
  40096e:	681d      	ldr	r5, [r3, #0]
  400970:	682b      	ldr	r3, [r5, #0]
  400972:	791b      	ldrb	r3, [r3, #4]
  400974:	42a3      	cmp	r3, r4
  400976:	f67f af69 	bls.w	40084c <udc_process_setup+0x1c>
	if (!udc_update_iface_desc(iface_num, 0)) {
  40097a:	2100      	movs	r1, #0
  40097c:	4620      	mov	r0, r4
  40097e:	4b4a      	ldr	r3, [pc, #296]	; (400aa8 <udc_process_setup+0x278>)
  400980:	4798      	blx	r3
  400982:	2800      	cmp	r0, #0
  400984:	f43f af62 	beq.w	40084c <udc_process_setup+0x1c>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  400988:	686b      	ldr	r3, [r5, #4]
	udc_iface_setting = udi_api->getsetting();
  40098a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  40098e:	68db      	ldr	r3, [r3, #12]
  400990:	4798      	blx	r3
  400992:	4b46      	ldr	r3, [pc, #280]	; (400aac <udc_process_setup+0x27c>)
  400994:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
  400996:	2101      	movs	r1, #1
  400998:	4618      	mov	r0, r3
  40099a:	4b3e      	ldr	r3, [pc, #248]	; (400a94 <udc_process_setup+0x264>)
  40099c:	4798      	blx	r3
  40099e:	e029      	b.n	4009f4 <udc_process_setup+0x1c4>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
  4009a0:	2a02      	cmp	r2, #2
  4009a2:	f47f af53 	bne.w	40084c <udc_process_setup+0x1c>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
  4009a6:	4b39      	ldr	r3, [pc, #228]	; (400a8c <udc_process_setup+0x25c>)
  4009a8:	7918      	ldrb	r0, [r3, #4]
  4009aa:	4b41      	ldr	r3, [pc, #260]	; (400ab0 <udc_process_setup+0x280>)
  4009ac:	4798      	blx	r3
  4009ae:	4b41      	ldr	r3, [pc, #260]	; (400ab4 <udc_process_setup+0x284>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
  4009b0:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
  4009b2:	2102      	movs	r1, #2
  4009b4:	4618      	mov	r0, r3
  4009b6:	4b37      	ldr	r3, [pc, #220]	; (400a94 <udc_process_setup+0x264>)
  4009b8:	4798      	blx	r3
  4009ba:	e01b      	b.n	4009f4 <udc_process_setup+0x1c4>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  4009bc:	f013 031f 	ands.w	r3, r3, #31
  4009c0:	f040 8082 	bne.w	400ac8 <udc_process_setup+0x298>
			switch (udd_g_ctrlreq.req.bRequest) {
  4009c4:	4a31      	ldr	r2, [pc, #196]	; (400a8c <udc_process_setup+0x25c>)
  4009c6:	7852      	ldrb	r2, [r2, #1]
  4009c8:	3a01      	subs	r2, #1
  4009ca:	2a08      	cmp	r2, #8
  4009cc:	d87c      	bhi.n	400ac8 <udc_process_setup+0x298>
  4009ce:	e8df f012 	tbh	[pc, r2, lsl #1]
  4009d2:	0013      	.short	0x0013
  4009d4:	00ca007b 	.word	0x00ca007b
  4009d8:	0009007b 	.word	0x0009007b
  4009dc:	007b007b 	.word	0x007b007b
  4009e0:	0023007b 	.word	0x0023007b
	if (udd_g_ctrlreq.req.wLength) {
  4009e4:	4b29      	ldr	r3, [pc, #164]	; (400a8c <udc_process_setup+0x25c>)
  4009e6:	88db      	ldrh	r3, [r3, #6]
  4009e8:	2b00      	cmp	r3, #0
  4009ea:	f47f af2f 	bne.w	40084c <udc_process_setup+0x1c>
	udd_g_ctrlreq.callback = udc_valid_address;
  4009ee:	4a32      	ldr	r2, [pc, #200]	; (400ab8 <udc_process_setup+0x288>)
  4009f0:	4b26      	ldr	r3, [pc, #152]	; (400a8c <udc_process_setup+0x25c>)
  4009f2:	611a      	str	r2, [r3, #16]
			return true;
  4009f4:	2301      	movs	r3, #1
  4009f6:	e738      	b.n	40086a <udc_process_setup+0x3a>
	if (udd_g_ctrlreq.req.wLength) {
  4009f8:	4b24      	ldr	r3, [pc, #144]	; (400a8c <udc_process_setup+0x25c>)
  4009fa:	88db      	ldrh	r3, [r3, #6]
  4009fc:	2b00      	cmp	r3, #0
  4009fe:	f47f af25 	bne.w	40084c <udc_process_setup+0x1c>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
  400a02:	4b22      	ldr	r3, [pc, #136]	; (400a8c <udc_process_setup+0x25c>)
  400a04:	885b      	ldrh	r3, [r3, #2]
  400a06:	2b01      	cmp	r3, #1
  400a08:	f47f af20 	bne.w	40084c <udc_process_setup+0x1c>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
  400a0c:	4a20      	ldr	r2, [pc, #128]	; (400a90 <udc_process_setup+0x260>)
  400a0e:	8813      	ldrh	r3, [r2, #0]
  400a10:	f023 0302 	bic.w	r3, r3, #2
  400a14:	8013      	strh	r3, [r2, #0]
  400a16:	e7ed      	b.n	4009f4 <udc_process_setup+0x1c4>
	if (udd_g_ctrlreq.req.wLength) {
  400a18:	4b1c      	ldr	r3, [pc, #112]	; (400a8c <udc_process_setup+0x25c>)
  400a1a:	88db      	ldrh	r3, [r3, #6]
  400a1c:	2b00      	cmp	r3, #0
  400a1e:	f47f af15 	bne.w	40084c <udc_process_setup+0x1c>
	if (!udd_getaddress()) {
  400a22:	4b26      	ldr	r3, [pc, #152]	; (400abc <udc_process_setup+0x28c>)
  400a24:	4798      	blx	r3
  400a26:	2800      	cmp	r0, #0
  400a28:	f43f af10 	beq.w	40084c <udc_process_setup+0x1c>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  400a2c:	4b17      	ldr	r3, [pc, #92]	; (400a8c <udc_process_setup+0x25c>)
  400a2e:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
  400a30:	4b19      	ldr	r3, [pc, #100]	; (400a98 <udc_process_setup+0x268>)
  400a32:	681b      	ldr	r3, [r3, #0]
  400a34:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  400a36:	429a      	cmp	r2, r3
  400a38:	f73f af08 	bgt.w	40084c <udc_process_setup+0x1c>
	udc_reset();
  400a3c:	4b20      	ldr	r3, [pc, #128]	; (400ac0 <udc_process_setup+0x290>)
  400a3e:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
  400a40:	4b12      	ldr	r3, [pc, #72]	; (400a8c <udc_process_setup+0x25c>)
  400a42:	789b      	ldrb	r3, [r3, #2]
  400a44:	4a16      	ldr	r2, [pc, #88]	; (400aa0 <udc_process_setup+0x270>)
  400a46:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
  400a48:	2b00      	cmp	r3, #0
  400a4a:	d0d3      	beq.n	4009f4 <udc_process_setup+0x1c4>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
  400a4c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
  400a50:	3b01      	subs	r3, #1
  400a52:	4a11      	ldr	r2, [pc, #68]	; (400a98 <udc_process_setup+0x268>)
  400a54:	6852      	ldr	r2, [r2, #4]
  400a56:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
  400a5a:	4912      	ldr	r1, [pc, #72]	; (400aa4 <udc_process_setup+0x274>)
  400a5c:	6008      	str	r0, [r1, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400a5e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  400a62:	791b      	ldrb	r3, [r3, #4]
  400a64:	2b00      	cmp	r3, #0
  400a66:	d0c5      	beq.n	4009f4 <udc_process_setup+0x1c4>
  400a68:	2400      	movs	r4, #0
		if (!udc_iface_enable(iface_num, 0)) {
  400a6a:	4626      	mov	r6, r4
  400a6c:	4d15      	ldr	r5, [pc, #84]	; (400ac4 <udc_process_setup+0x294>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400a6e:	460f      	mov	r7, r1
		if (!udc_iface_enable(iface_num, 0)) {
  400a70:	4631      	mov	r1, r6
  400a72:	4620      	mov	r0, r4
  400a74:	47a8      	blx	r5
  400a76:	2800      	cmp	r0, #0
  400a78:	f43f aee8 	beq.w	40084c <udc_process_setup+0x1c>
			iface_num++) {
  400a7c:	3401      	adds	r4, #1
  400a7e:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400a80:	683b      	ldr	r3, [r7, #0]
  400a82:	681b      	ldr	r3, [r3, #0]
  400a84:	791b      	ldrb	r3, [r3, #4]
  400a86:	42a3      	cmp	r3, r4
  400a88:	d8f2      	bhi.n	400a70 <udc_process_setup+0x240>
  400a8a:	e7b3      	b.n	4009f4 <udc_process_setup+0x1c4>
  400a8c:	2000070c 	.word	0x2000070c
  400a90:	20000632 	.word	0x20000632
  400a94:	00401c41 	.word	0x00401c41
  400a98:	2000002c 	.word	0x2000002c
  400a9c:	20000028 	.word	0x20000028
  400aa0:	2000063c 	.word	0x2000063c
  400aa4:	20000640 	.word	0x20000640
  400aa8:	0040066d 	.word	0x0040066d
  400aac:	20000638 	.word	0x20000638
  400ab0:	00401d9d 	.word	0x00401d9d
  400ab4:	20000634 	.word	0x20000634
  400ab8:	00400655 	.word	0x00400655
  400abc:	00401c11 	.word	0x00401c11
  400ac0:	004007a9 	.word	0x004007a9
  400ac4:	0040074d 	.word	0x0040074d
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  400ac8:	2b01      	cmp	r3, #1
  400aca:	d00a      	beq.n	400ae2 <udc_process_setup+0x2b2>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  400acc:	2b02      	cmp	r3, #2
  400ace:	f47f aebd 	bne.w	40084c <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
  400ad2:	4b52      	ldr	r3, [pc, #328]	; (400c1c <udc_process_setup+0x3ec>)
  400ad4:	785b      	ldrb	r3, [r3, #1]
  400ad6:	2b01      	cmp	r3, #1
  400ad8:	d020      	beq.n	400b1c <udc_process_setup+0x2ec>
  400ada:	2b03      	cmp	r3, #3
  400adc:	d02e      	beq.n	400b3c <udc_process_setup+0x30c>
	return false;
  400ade:	2300      	movs	r3, #0
  400ae0:	e042      	b.n	400b68 <udc_process_setup+0x338>
			switch (udd_g_ctrlreq.req.bRequest) {
  400ae2:	4a4e      	ldr	r2, [pc, #312]	; (400c1c <udc_process_setup+0x3ec>)
  400ae4:	7852      	ldrb	r2, [r2, #1]
  400ae6:	2a0b      	cmp	r2, #11
  400ae8:	d1f0      	bne.n	400acc <udc_process_setup+0x29c>
	if (udd_g_ctrlreq.req.wLength) {
  400aea:	4b4c      	ldr	r3, [pc, #304]	; (400c1c <udc_process_setup+0x3ec>)
  400aec:	88db      	ldrh	r3, [r3, #6]
  400aee:	2b00      	cmp	r3, #0
  400af0:	f47f aeac 	bne.w	40084c <udc_process_setup+0x1c>
	if (!udc_num_configuration) {
  400af4:	4b4a      	ldr	r3, [pc, #296]	; (400c20 <udc_process_setup+0x3f0>)
  400af6:	781b      	ldrb	r3, [r3, #0]
  400af8:	2b00      	cmp	r3, #0
  400afa:	f43f aea7 	beq.w	40084c <udc_process_setup+0x1c>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  400afe:	4b47      	ldr	r3, [pc, #284]	; (400c1c <udc_process_setup+0x3ec>)
  400b00:	791c      	ldrb	r4, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
  400b02:	885d      	ldrh	r5, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
  400b04:	4620      	mov	r0, r4
  400b06:	4b47      	ldr	r3, [pc, #284]	; (400c24 <udc_process_setup+0x3f4>)
  400b08:	4798      	blx	r3
  400b0a:	2800      	cmp	r0, #0
  400b0c:	f43f ae9e 	beq.w	40084c <udc_process_setup+0x1c>
	return udc_iface_enable(iface_num, setting_num);
  400b10:	b2e9      	uxtb	r1, r5
  400b12:	4620      	mov	r0, r4
  400b14:	4b44      	ldr	r3, [pc, #272]	; (400c28 <udc_process_setup+0x3f8>)
  400b16:	4798      	blx	r3
  400b18:	4603      	mov	r3, r0
  400b1a:	e025      	b.n	400b68 <udc_process_setup+0x338>
	if (udd_g_ctrlreq.req.wLength) {
  400b1c:	4b3f      	ldr	r3, [pc, #252]	; (400c1c <udc_process_setup+0x3ec>)
  400b1e:	88db      	ldrh	r3, [r3, #6]
  400b20:	2b00      	cmp	r3, #0
  400b22:	f47f ae93 	bne.w	40084c <udc_process_setup+0x1c>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  400b26:	4b3d      	ldr	r3, [pc, #244]	; (400c1c <udc_process_setup+0x3ec>)
  400b28:	885b      	ldrh	r3, [r3, #2]
  400b2a:	2b00      	cmp	r3, #0
  400b2c:	f47f ae8e 	bne.w	40084c <udc_process_setup+0x1c>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  400b30:	4b3a      	ldr	r3, [pc, #232]	; (400c1c <udc_process_setup+0x3ec>)
  400b32:	7918      	ldrb	r0, [r3, #4]
  400b34:	4b3d      	ldr	r3, [pc, #244]	; (400c2c <udc_process_setup+0x3fc>)
  400b36:	4798      	blx	r3
  400b38:	4603      	mov	r3, r0
  400b3a:	e015      	b.n	400b68 <udc_process_setup+0x338>
	if (udd_g_ctrlreq.req.wLength) {
  400b3c:	4b37      	ldr	r3, [pc, #220]	; (400c1c <udc_process_setup+0x3ec>)
  400b3e:	88db      	ldrh	r3, [r3, #6]
  400b40:	2b00      	cmp	r3, #0
  400b42:	f47f ae83 	bne.w	40084c <udc_process_setup+0x1c>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  400b46:	4b35      	ldr	r3, [pc, #212]	; (400c1c <udc_process_setup+0x3ec>)
  400b48:	885b      	ldrh	r3, [r3, #2]
  400b4a:	2b00      	cmp	r3, #0
  400b4c:	f47f ae7e 	bne.w	40084c <udc_process_setup+0x1c>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
  400b50:	4c32      	ldr	r4, [pc, #200]	; (400c1c <udc_process_setup+0x3ec>)
  400b52:	7920      	ldrb	r0, [r4, #4]
  400b54:	4b36      	ldr	r3, [pc, #216]	; (400c30 <udc_process_setup+0x400>)
  400b56:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  400b58:	7920      	ldrb	r0, [r4, #4]
  400b5a:	4b36      	ldr	r3, [pc, #216]	; (400c34 <udc_process_setup+0x404>)
  400b5c:	4798      	blx	r3
  400b5e:	4603      	mov	r3, r0
  400b60:	e002      	b.n	400b68 <udc_process_setup+0x338>
		return false;
  400b62:	2300      	movs	r3, #0
  400b64:	e000      	b.n	400b68 <udc_process_setup+0x338>
				return udc_req_std_dev_set_feature();
  400b66:	2300      	movs	r3, #0
		if (udc_reqstd()) {
  400b68:	2b00      	cmp	r3, #0
  400b6a:	f47f ae7e 	bne.w	40086a <udc_process_setup+0x3a>
  400b6e:	e66d      	b.n	40084c <udc_process_setup+0x1c>
	if (0 == udc_num_configuration) {
  400b70:	4b2b      	ldr	r3, [pc, #172]	; (400c20 <udc_process_setup+0x3f0>)
  400b72:	781b      	ldrb	r3, [r3, #0]
  400b74:	2b00      	cmp	r3, #0
  400b76:	d04e      	beq.n	400c16 <udc_process_setup+0x3e6>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  400b78:	4b28      	ldr	r3, [pc, #160]	; (400c1c <udc_process_setup+0x3ec>)
  400b7a:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  400b7c:	4b2e      	ldr	r3, [pc, #184]	; (400c38 <udc_process_setup+0x408>)
  400b7e:	681d      	ldr	r5, [r3, #0]
  400b80:	682b      	ldr	r3, [r5, #0]
  400b82:	791b      	ldrb	r3, [r3, #4]
  400b84:	42a3      	cmp	r3, r4
  400b86:	d801      	bhi.n	400b8c <udc_process_setup+0x35c>
	return false;
  400b88:	2300      	movs	r3, #0
  400b8a:	e66e      	b.n	40086a <udc_process_setup+0x3a>
	if (!udc_update_iface_desc(iface_num, 0)) {
  400b8c:	2100      	movs	r1, #0
  400b8e:	4620      	mov	r0, r4
  400b90:	4b2a      	ldr	r3, [pc, #168]	; (400c3c <udc_process_setup+0x40c>)
  400b92:	4798      	blx	r3
  400b94:	2800      	cmp	r0, #0
  400b96:	f43f ae60 	beq.w	40085a <udc_process_setup+0x2a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  400b9a:	686b      	ldr	r3, [r5, #4]
  400b9c:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  400ba0:	68eb      	ldr	r3, [r5, #12]
  400ba2:	4798      	blx	r3
  400ba4:	4601      	mov	r1, r0
  400ba6:	4620      	mov	r0, r4
  400ba8:	4b24      	ldr	r3, [pc, #144]	; (400c3c <udc_process_setup+0x40c>)
  400baa:	4798      	blx	r3
  400bac:	2800      	cmp	r0, #0
  400bae:	f43f ae54 	beq.w	40085a <udc_process_setup+0x2a>
	return udi_api->setup();
  400bb2:	68ab      	ldr	r3, [r5, #8]
  400bb4:	4798      	blx	r3
		if (udc_req_iface()) {
  400bb6:	4603      	mov	r3, r0
  400bb8:	2800      	cmp	r0, #0
  400bba:	f47f ae56 	bne.w	40086a <udc_process_setup+0x3a>
  400bbe:	e64c      	b.n	40085a <udc_process_setup+0x2a>
	if (0 == udc_num_configuration) {
  400bc0:	4b17      	ldr	r3, [pc, #92]	; (400c20 <udc_process_setup+0x3f0>)
  400bc2:	781b      	ldrb	r3, [r3, #0]
  400bc4:	b30b      	cbz	r3, 400c0a <udc_process_setup+0x3da>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400bc6:	4b1c      	ldr	r3, [pc, #112]	; (400c38 <udc_process_setup+0x408>)
  400bc8:	681a      	ldr	r2, [r3, #0]
  400bca:	6813      	ldr	r3, [r2, #0]
  400bcc:	791b      	ldrb	r3, [r3, #4]
  400bce:	b1f3      	cbz	r3, 400c0e <udc_process_setup+0x3de>
  400bd0:	2400      	movs	r4, #0
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  400bd2:	4e1a      	ldr	r6, [pc, #104]	; (400c3c <udc_process_setup+0x40c>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400bd4:	4f18      	ldr	r7, [pc, #96]	; (400c38 <udc_process_setup+0x408>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
  400bd6:	6853      	ldr	r3, [r2, #4]
  400bd8:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  400bdc:	68eb      	ldr	r3, [r5, #12]
  400bde:	4798      	blx	r3
  400be0:	4601      	mov	r1, r0
  400be2:	4620      	mov	r0, r4
  400be4:	47b0      	blx	r6
  400be6:	4603      	mov	r3, r0
  400be8:	2800      	cmp	r0, #0
  400bea:	f43f ae3e 	beq.w	40086a <udc_process_setup+0x3a>
		if (udi_api->setup()) {
  400bee:	68ab      	ldr	r3, [r5, #8]
  400bf0:	4798      	blx	r3
  400bf2:	4603      	mov	r3, r0
  400bf4:	2800      	cmp	r0, #0
  400bf6:	f47f ae38 	bne.w	40086a <udc_process_setup+0x3a>
			iface_num++) {
  400bfa:	3401      	adds	r4, #1
  400bfc:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400bfe:	683a      	ldr	r2, [r7, #0]
  400c00:	6811      	ldr	r1, [r2, #0]
  400c02:	7909      	ldrb	r1, [r1, #4]
  400c04:	42a1      	cmp	r1, r4
  400c06:	d8e6      	bhi.n	400bd6 <udc_process_setup+0x3a6>
  400c08:	e62f      	b.n	40086a <udc_process_setup+0x3a>
		return false; // The device is not is configured state yet
  400c0a:	2300      	movs	r3, #0
  400c0c:	e62d      	b.n	40086a <udc_process_setup+0x3a>
	return false;
  400c0e:	2300      	movs	r3, #0
  400c10:	e62b      	b.n	40086a <udc_process_setup+0x3a>
			return false; // Error from USB host
  400c12:	2300      	movs	r3, #0
  400c14:	e629      	b.n	40086a <udc_process_setup+0x3a>
	return false;
  400c16:	2300      	movs	r3, #0
  400c18:	e627      	b.n	40086a <udc_process_setup+0x3a>
  400c1a:	bf00      	nop
  400c1c:	2000070c 	.word	0x2000070c
  400c20:	2000063c 	.word	0x2000063c
  400c24:	004006e1 	.word	0x004006e1
  400c28:	0040074d 	.word	0x0040074d
  400c2c:	00401ec1 	.word	0x00401ec1
  400c30:	00402115 	.word	0x00402115
  400c34:	00401ddd 	.word	0x00401ddd
  400c38:	20000640 	.word	0x20000640
  400c3c:	0040066d 	.word	0x0040066d

00400c40 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400c44:	4681      	mov	r9, r0
  400c46:	460f      	mov	r7, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400c48:	4b12      	ldr	r3, [pc, #72]	; (400c94 <pio_handler_process+0x54>)
  400c4a:	4798      	blx	r3
  400c4c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400c4e:	4648      	mov	r0, r9
  400c50:	4b11      	ldr	r3, [pc, #68]	; (400c98 <pio_handler_process+0x58>)
  400c52:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400c54:	4005      	ands	r5, r0
  400c56:	d013      	beq.n	400c80 <pio_handler_process+0x40>
  400c58:	4c10      	ldr	r4, [pc, #64]	; (400c9c <pio_handler_process+0x5c>)
  400c5a:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400c5e:	e003      	b.n	400c68 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400c60:	42b4      	cmp	r4, r6
  400c62:	d00d      	beq.n	400c80 <pio_handler_process+0x40>
  400c64:	3410      	adds	r4, #16
		while (status != 0) {
  400c66:	b15d      	cbz	r5, 400c80 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400c68:	6820      	ldr	r0, [r4, #0]
  400c6a:	42b8      	cmp	r0, r7
  400c6c:	d1f8      	bne.n	400c60 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400c6e:	6861      	ldr	r1, [r4, #4]
  400c70:	4229      	tst	r1, r5
  400c72:	d0f5      	beq.n	400c60 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400c74:	68e3      	ldr	r3, [r4, #12]
  400c76:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400c78:	6863      	ldr	r3, [r4, #4]
  400c7a:	ea25 0503 	bic.w	r5, r5, r3
  400c7e:	e7ef      	b.n	400c60 <pio_handler_process+0x20>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400c80:	4b07      	ldr	r3, [pc, #28]	; (400ca0 <pio_handler_process+0x60>)
  400c82:	681b      	ldr	r3, [r3, #0]
  400c84:	b123      	cbz	r3, 400c90 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  400c86:	4b07      	ldr	r3, [pc, #28]	; (400ca4 <pio_handler_process+0x64>)
  400c88:	681b      	ldr	r3, [r3, #0]
  400c8a:	b10b      	cbz	r3, 400c90 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  400c8c:	4648      	mov	r0, r9
  400c8e:	4798      	blx	r3
  400c90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400c94:	00402279 	.word	0x00402279
  400c98:	0040227d 	.word	0x0040227d
  400c9c:	20000648 	.word	0x20000648
  400ca0:	20000724 	.word	0x20000724
  400ca4:	200006b8 	.word	0x200006b8

00400ca8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400ca8:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400caa:	2109      	movs	r1, #9
  400cac:	4801      	ldr	r0, [pc, #4]	; (400cb4 <PIOA_Handler+0xc>)
  400cae:	4b02      	ldr	r3, [pc, #8]	; (400cb8 <PIOA_Handler+0x10>)
  400cb0:	4798      	blx	r3
  400cb2:	bd08      	pop	{r3, pc}
  400cb4:	400e0e00 	.word	0x400e0e00
  400cb8:	00400c41 	.word	0x00400c41

00400cbc <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400cbc:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400cbe:	210a      	movs	r1, #10
  400cc0:	4801      	ldr	r0, [pc, #4]	; (400cc8 <PIOB_Handler+0xc>)
  400cc2:	4b02      	ldr	r3, [pc, #8]	; (400ccc <PIOB_Handler+0x10>)
  400cc4:	4798      	blx	r3
  400cc6:	bd08      	pop	{r3, pc}
  400cc8:	400e1000 	.word	0x400e1000
  400ccc:	00400c41 	.word	0x00400c41

00400cd0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400cd0:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400cd2:	210b      	movs	r1, #11
  400cd4:	4801      	ldr	r0, [pc, #4]	; (400cdc <PIOC_Handler+0xc>)
  400cd6:	4b02      	ldr	r3, [pc, #8]	; (400ce0 <PIOC_Handler+0x10>)
  400cd8:	4798      	blx	r3
  400cda:	bd08      	pop	{r3, pc}
  400cdc:	400e1200 	.word	0x400e1200
  400ce0:	00400c41 	.word	0x00400c41

00400ce4 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400ce4:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400ce6:	210c      	movs	r1, #12
  400ce8:	4801      	ldr	r0, [pc, #4]	; (400cf0 <PIOD_Handler+0xc>)
  400cea:	4b02      	ldr	r3, [pc, #8]	; (400cf4 <PIOD_Handler+0x10>)
  400cec:	4798      	blx	r3
  400cee:	bd08      	pop	{r3, pc}
  400cf0:	400e1400 	.word	0x400e1400
  400cf4:	00400c41 	.word	0x00400c41

00400cf8 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400cf8:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400cfa:	210d      	movs	r1, #13
  400cfc:	4801      	ldr	r0, [pc, #4]	; (400d04 <PIOE_Handler+0xc>)
  400cfe:	4b02      	ldr	r3, [pc, #8]	; (400d08 <PIOE_Handler+0x10>)
  400d00:	4798      	blx	r3
  400d02:	bd08      	pop	{r3, pc}
  400d04:	400e1600 	.word	0x400e1600
  400d08:	00400c41 	.word	0x00400c41

00400d0c <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 *
 * \param b_enable   true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
  400d0c:	b082      	sub	sp, #8
	if (!b_idle && udd_b_idle) {
  400d0e:	4601      	mov	r1, r0
  400d10:	bb28      	cbnz	r0, 400d5e <udd_sleep_mode+0x52>
  400d12:	4b24      	ldr	r3, [pc, #144]	; (400da4 <udd_sleep_mode+0x98>)
  400d14:	781b      	ldrb	r3, [r3, #0]
  400d16:	b91b      	cbnz	r3, 400d20 <udd_sleep_mode+0x14>
		sleepmgr_unlock_mode(UDP_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
		sleepmgr_lock_mode(UDP_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
  400d18:	4b22      	ldr	r3, [pc, #136]	; (400da4 <udd_sleep_mode+0x98>)
  400d1a:	7019      	strb	r1, [r3, #0]
}
  400d1c:	b002      	add	sp, #8
  400d1e:	4770      	bx	lr
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
  400d20:	4b21      	ldr	r3, [pc, #132]	; (400da8 <udd_sleep_mode+0x9c>)
  400d22:	789b      	ldrb	r3, [r3, #2]
  400d24:	b903      	cbnz	r3, 400d28 <udd_sleep_mode+0x1c>
  400d26:	e7fe      	b.n	400d26 <udd_sleep_mode+0x1a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400d28:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400d2c:	fab3 f383 	clz	r3, r3
  400d30:	095b      	lsrs	r3, r3, #5
  400d32:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  400d34:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  400d36:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400d3a:	2200      	movs	r2, #0
  400d3c:	4b1b      	ldr	r3, [pc, #108]	; (400dac <udd_sleep_mode+0xa0>)
  400d3e:	701a      	strb	r2, [r3, #0]
	return flags;
  400d40:	9800      	ldr	r0, [sp, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
  400d42:	4a19      	ldr	r2, [pc, #100]	; (400da8 <udd_sleep_mode+0x9c>)
  400d44:	7893      	ldrb	r3, [r2, #2]
  400d46:	3b01      	subs	r3, #1
  400d48:	7093      	strb	r3, [r2, #2]
	if (cpu_irq_is_enabled_flags(flags))
  400d4a:	2800      	cmp	r0, #0
  400d4c:	d0e4      	beq.n	400d18 <udd_sleep_mode+0xc>
		cpu_irq_enable();
  400d4e:	2201      	movs	r2, #1
  400d50:	4b16      	ldr	r3, [pc, #88]	; (400dac <udd_sleep_mode+0xa0>)
  400d52:	701a      	strb	r2, [r3, #0]
  400d54:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400d58:	b662      	cpsie	i
  400d5a:	e7dd      	b.n	400d18 <udd_sleep_mode+0xc>
  400d5c:	e7fe      	b.n	400d5c <udd_sleep_mode+0x50>
	if (b_idle && !udd_b_idle) {
  400d5e:	4b11      	ldr	r3, [pc, #68]	; (400da4 <udd_sleep_mode+0x98>)
  400d60:	781b      	ldrb	r3, [r3, #0]
  400d62:	2b00      	cmp	r3, #0
  400d64:	d1d8      	bne.n	400d18 <udd_sleep_mode+0xc>
	if(sleepmgr_locks[mode] >= 0xff) {
  400d66:	4b10      	ldr	r3, [pc, #64]	; (400da8 <udd_sleep_mode+0x9c>)
  400d68:	789b      	ldrb	r3, [r3, #2]
  400d6a:	2bff      	cmp	r3, #255	; 0xff
  400d6c:	d0f6      	beq.n	400d5c <udd_sleep_mode+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400d6e:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400d72:	fab3 f383 	clz	r3, r3
  400d76:	095b      	lsrs	r3, r3, #5
  400d78:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400d7a:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  400d7c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400d80:	2200      	movs	r2, #0
  400d82:	4b0a      	ldr	r3, [pc, #40]	; (400dac <udd_sleep_mode+0xa0>)
  400d84:	701a      	strb	r2, [r3, #0]
	return flags;
  400d86:	9801      	ldr	r0, [sp, #4]
	++sleepmgr_locks[mode];
  400d88:	4a07      	ldr	r2, [pc, #28]	; (400da8 <udd_sleep_mode+0x9c>)
  400d8a:	7893      	ldrb	r3, [r2, #2]
  400d8c:	3301      	adds	r3, #1
  400d8e:	7093      	strb	r3, [r2, #2]
	if (cpu_irq_is_enabled_flags(flags))
  400d90:	2800      	cmp	r0, #0
  400d92:	d0c1      	beq.n	400d18 <udd_sleep_mode+0xc>
		cpu_irq_enable();
  400d94:	2201      	movs	r2, #1
  400d96:	4b05      	ldr	r3, [pc, #20]	; (400dac <udd_sleep_mode+0xa0>)
  400d98:	701a      	strb	r2, [r3, #0]
  400d9a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400d9e:	b662      	cpsie	i
  400da0:	e7ba      	b.n	400d18 <udd_sleep_mode+0xc>
  400da2:	bf00      	nop
  400da4:	200006bd 	.word	0x200006bd
  400da8:	20000704 	.word	0x20000704
  400dac:	200000a0 	.word	0x200000a0

00400db0 <udd_ctrl_init>:
	cpu_irq_restore(flags);
}

static void udd_ctrl_init(void)
{
	udd_g_ctrlreq.callback = NULL;
  400db0:	4a03      	ldr	r2, [pc, #12]	; (400dc0 <udd_ctrl_init+0x10>)
  400db2:	2300      	movs	r3, #0
  400db4:	6113      	str	r3, [r2, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  400db6:	6153      	str	r3, [r2, #20]
	udd_g_ctrlreq.payload_size = 0;
  400db8:	8193      	strh	r3, [r2, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
  400dba:	4a02      	ldr	r2, [pc, #8]	; (400dc4 <udd_ctrl_init+0x14>)
  400dbc:	7013      	strb	r3, [r2, #0]
  400dbe:	4770      	bx	lr
  400dc0:	2000070c 	.word	0x2000070c
  400dc4:	200006c2 	.word	0x200006c2

00400dc8 <udd_ctrl_stall_data>:
	udd_ack_bank0_received(0);
}


static void udd_ctrl_stall_data(void)
{
  400dc8:	b082      	sub	sp, #8
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
  400dca:	2205      	movs	r2, #5
  400dcc:	4b0a      	ldr	r3, [pc, #40]	; (400df8 <udd_ctrl_stall_data+0x30>)
  400dce:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
  400dd0:	4a0a      	ldr	r2, [pc, #40]	; (400dfc <udd_ctrl_stall_data+0x34>)
  400dd2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400dd4:	9301      	str	r3, [sp, #4]
  400dd6:	9b01      	ldr	r3, [sp, #4]
  400dd8:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  400ddc:	9301      	str	r3, [sp, #4]
  400dde:	9b01      	ldr	r3, [sp, #4]
  400de0:	f043 0320 	orr.w	r3, r3, #32
  400de4:	9301      	str	r3, [sp, #4]
  400de6:	9b01      	ldr	r3, [sp, #4]
  400de8:	6313      	str	r3, [r2, #48]	; 0x30
  400dea:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400dec:	f013 0f20 	tst.w	r3, #32
  400df0:	d0fb      	beq.n	400dea <udd_ctrl_stall_data+0x22>
}
  400df2:	b002      	add	sp, #8
  400df4:	4770      	bx	lr
  400df6:	bf00      	nop
  400df8:	200006c2 	.word	0x200006c2
  400dfc:	40084000 	.word	0x40084000

00400e00 <udd_ctrl_send_zlp_in>:


static void udd_ctrl_send_zlp_in(void)
{
  400e00:	b082      	sub	sp, #8
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
  400e02:	2203      	movs	r2, #3
  400e04:	4b0a      	ldr	r3, [pc, #40]	; (400e30 <udd_ctrl_send_zlp_in+0x30>)
  400e06:	701a      	strb	r2, [r3, #0]
	// Validate and send empty IN packet on control endpoint
	// Send ZLP on IN endpoint
	udd_set_transmit_ready(0);
  400e08:	4a0a      	ldr	r2, [pc, #40]	; (400e34 <udd_ctrl_send_zlp_in+0x34>)
  400e0a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400e0c:	9301      	str	r3, [sp, #4]
  400e0e:	9b01      	ldr	r3, [sp, #4]
  400e10:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  400e14:	9301      	str	r3, [sp, #4]
  400e16:	9b01      	ldr	r3, [sp, #4]
  400e18:	f043 0310 	orr.w	r3, r3, #16
  400e1c:	9301      	str	r3, [sp, #4]
  400e1e:	9b01      	ldr	r3, [sp, #4]
  400e20:	6313      	str	r3, [r2, #48]	; 0x30
  400e22:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400e24:	f013 0f10 	tst.w	r3, #16
  400e28:	d0fb      	beq.n	400e22 <udd_ctrl_send_zlp_in+0x22>
}
  400e2a:	b002      	add	sp, #8
  400e2c:	4770      	bx	lr
  400e2e:	bf00      	nop
  400e30:	200006c2 	.word	0x200006c2
  400e34:	40084000 	.word	0x40084000

00400e38 <udd_ctrl_endofrequest>:
	// because the buffer of control endpoint is already free
}


static void udd_ctrl_endofrequest(void)
{
  400e38:	b508      	push	{r3, lr}
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
  400e3a:	4b02      	ldr	r3, [pc, #8]	; (400e44 <udd_ctrl_endofrequest+0xc>)
  400e3c:	691b      	ldr	r3, [r3, #16]
  400e3e:	b103      	cbz	r3, 400e42 <udd_ctrl_endofrequest+0xa>
		udd_g_ctrlreq.callback();
  400e40:	4798      	blx	r3
  400e42:	bd08      	pop	{r3, pc}
  400e44:	2000070c 	.word	0x2000070c

00400e48 <udd_ctrl_in_sent>:
{
  400e48:	b530      	push	{r4, r5, lr}
  400e4a:	b087      	sub	sp, #28
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
  400e4c:	4b63      	ldr	r3, [pc, #396]	; (400fdc <udd_ctrl_in_sent+0x194>)
  400e4e:	781b      	ldrb	r3, [r3, #0]
  400e50:	2b03      	cmp	r3, #3
  400e52:	d029      	beq.n	400ea8 <udd_ctrl_in_sent+0x60>
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
  400e54:	4b62      	ldr	r3, [pc, #392]	; (400fe0 <udd_ctrl_in_sent+0x198>)
  400e56:	881b      	ldrh	r3, [r3, #0]
  400e58:	4a62      	ldr	r2, [pc, #392]	; (400fe4 <udd_ctrl_in_sent+0x19c>)
  400e5a:	8994      	ldrh	r4, [r2, #12]
  400e5c:	1ae4      	subs	r4, r4, r3
  400e5e:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
  400e60:	2c00      	cmp	r4, #0
  400e62:	d144      	bne.n	400eee <udd_ctrl_in_sent+0xa6>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  400e64:	4a60      	ldr	r2, [pc, #384]	; (400fe8 <udd_ctrl_in_sent+0x1a0>)
  400e66:	8811      	ldrh	r1, [r2, #0]
  400e68:	440b      	add	r3, r1
  400e6a:	b29b      	uxth	r3, r3
  400e6c:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans)
  400e6e:	4a5d      	ldr	r2, [pc, #372]	; (400fe4 <udd_ctrl_in_sent+0x19c>)
  400e70:	88d2      	ldrh	r2, [r2, #6]
  400e72:	429a      	cmp	r2, r3
  400e74:	d003      	beq.n	400e7e <udd_ctrl_in_sent+0x36>
				|| b_shortpacket) {
  400e76:	4b5d      	ldr	r3, [pc, #372]	; (400fec <udd_ctrl_in_sent+0x1a4>)
  400e78:	781b      	ldrb	r3, [r3, #0]
  400e7a:	2b00      	cmp	r3, #0
  400e7c:	d02b      	beq.n	400ed6 <udd_ctrl_in_sent+0x8e>
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  400e7e:	2204      	movs	r2, #4
  400e80:	4b56      	ldr	r3, [pc, #344]	; (400fdc <udd_ctrl_in_sent+0x194>)
  400e82:	701a      	strb	r2, [r3, #0]
			udd_ack_in_sent(0);
  400e84:	4a5a      	ldr	r2, [pc, #360]	; (400ff0 <udd_ctrl_in_sent+0x1a8>)
  400e86:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400e88:	9301      	str	r3, [sp, #4]
  400e8a:	9b01      	ldr	r3, [sp, #4]
  400e8c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  400e90:	9301      	str	r3, [sp, #4]
  400e92:	9b01      	ldr	r3, [sp, #4]
  400e94:	f023 0301 	bic.w	r3, r3, #1
  400e98:	9301      	str	r3, [sp, #4]
  400e9a:	9b01      	ldr	r3, [sp, #4]
  400e9c:	6313      	str	r3, [r2, #48]	; 0x30
  400e9e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400ea0:	f013 0f01 	tst.w	r3, #1
  400ea4:	d1fb      	bne.n	400e9e <udd_ctrl_in_sent+0x56>
  400ea6:	e014      	b.n	400ed2 <udd_ctrl_in_sent+0x8a>
		udd_ack_in_sent(0);
  400ea8:	4a51      	ldr	r2, [pc, #324]	; (400ff0 <udd_ctrl_in_sent+0x1a8>)
  400eaa:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400eac:	9300      	str	r3, [sp, #0]
  400eae:	9b00      	ldr	r3, [sp, #0]
  400eb0:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  400eb4:	9300      	str	r3, [sp, #0]
  400eb6:	9b00      	ldr	r3, [sp, #0]
  400eb8:	f023 0301 	bic.w	r3, r3, #1
  400ebc:	9300      	str	r3, [sp, #0]
  400ebe:	9b00      	ldr	r3, [sp, #0]
  400ec0:	6313      	str	r3, [r2, #48]	; 0x30
  400ec2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400ec4:	f013 0f01 	tst.w	r3, #1
  400ec8:	d1fb      	bne.n	400ec2 <udd_ctrl_in_sent+0x7a>
		udd_ctrl_endofrequest();
  400eca:	4b4a      	ldr	r3, [pc, #296]	; (400ff4 <udd_ctrl_in_sent+0x1ac>)
  400ecc:	4798      	blx	r3
		udd_ctrl_init();
  400ece:	4b4a      	ldr	r3, [pc, #296]	; (400ff8 <udd_ctrl_in_sent+0x1b0>)
  400ed0:	4798      	blx	r3
}
  400ed2:	b007      	add	sp, #28
  400ed4:	bd30      	pop	{r4, r5, pc}
		if ((!udd_g_ctrlreq.over_under_run)
  400ed6:	4b43      	ldr	r3, [pc, #268]	; (400fe4 <udd_ctrl_in_sent+0x19c>)
  400ed8:	695b      	ldr	r3, [r3, #20]
  400eda:	2b00      	cmp	r3, #0
  400edc:	d05d      	beq.n	400f9a <udd_ctrl_in_sent+0x152>
				|| (!udd_g_ctrlreq.over_under_run())) {
  400ede:	4798      	blx	r3
  400ee0:	2800      	cmp	r0, #0
  400ee2:	d05a      	beq.n	400f9a <udd_ctrl_in_sent+0x152>
			udd_ctrl_payload_nb_trans = 0;
  400ee4:	2200      	movs	r2, #0
  400ee6:	4b3e      	ldr	r3, [pc, #248]	; (400fe0 <udd_ctrl_in_sent+0x198>)
  400ee8:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
  400eea:	4b3e      	ldr	r3, [pc, #248]	; (400fe4 <udd_ctrl_in_sent+0x19c>)
  400eec:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
  400eee:	2c3f      	cmp	r4, #63	; 0x3f
  400ef0:	d953      	bls.n	400f9a <udd_ctrl_in_sent+0x152>
		b_shortpacket = false;
  400ef2:	2200      	movs	r2, #0
  400ef4:	4b3d      	ldr	r3, [pc, #244]	; (400fec <udd_ctrl_in_sent+0x1a4>)
  400ef6:	701a      	strb	r2, [r3, #0]
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
  400ef8:	2440      	movs	r4, #64	; 0x40
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  400efa:	4b3a      	ldr	r3, [pc, #232]	; (400fe4 <udd_ctrl_in_sent+0x19c>)
  400efc:	6899      	ldr	r1, [r3, #8]
  400efe:	4b38      	ldr	r3, [pc, #224]	; (400fe0 <udd_ctrl_in_sent+0x198>)
  400f00:	8818      	ldrh	r0, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400f02:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400f06:	fab3 f383 	clz	r3, r3
  400f0a:	095b      	lsrs	r3, r3, #5
  400f0c:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
  400f0e:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  400f10:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400f14:	2200      	movs	r2, #0
  400f16:	4b39      	ldr	r3, [pc, #228]	; (400ffc <udd_ctrl_in_sent+0x1b4>)
  400f18:	701a      	strb	r2, [r3, #0]
	return flags;
  400f1a:	9d05      	ldr	r5, [sp, #20]
	if (Is_udd_bank0_received(0)) {
  400f1c:	4b34      	ldr	r3, [pc, #208]	; (400ff0 <udd_ctrl_in_sent+0x1a8>)
  400f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400f20:	f013 0f02 	tst.w	r3, #2
  400f24:	d13d      	bne.n	400fa2 <udd_ctrl_in_sent+0x15a>
	for (i = 0; i < nb_remain; i++) {
  400f26:	b14c      	cbz	r4, 400f3c <udd_ctrl_in_sent+0xf4>
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  400f28:	4401      	add	r1, r0
  400f2a:	460a      	mov	r2, r1
		udd_endpoint_fifo_write(0, *ptr_src++);
  400f2c:	4830      	ldr	r0, [pc, #192]	; (400ff0 <udd_ctrl_in_sent+0x1a8>)
  400f2e:	f812 3b01 	ldrb.w	r3, [r2], #1
  400f32:	6503      	str	r3, [r0, #80]	; 0x50
	for (i = 0; i < nb_remain; i++) {
  400f34:	1a53      	subs	r3, r2, r1
  400f36:	b2db      	uxtb	r3, r3
  400f38:	42a3      	cmp	r3, r4
  400f3a:	d3f8      	bcc.n	400f2e <udd_ctrl_in_sent+0xe6>
	udd_ctrl_payload_nb_trans += nb_remain;
  400f3c:	4b28      	ldr	r3, [pc, #160]	; (400fe0 <udd_ctrl_in_sent+0x198>)
  400f3e:	881a      	ldrh	r2, [r3, #0]
  400f40:	4414      	add	r4, r2
  400f42:	801c      	strh	r4, [r3, #0]
	udd_set_transmit_ready(0);
  400f44:	4a2a      	ldr	r2, [pc, #168]	; (400ff0 <udd_ctrl_in_sent+0x1a8>)
  400f46:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400f48:	9303      	str	r3, [sp, #12]
  400f4a:	9b03      	ldr	r3, [sp, #12]
  400f4c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  400f50:	9303      	str	r3, [sp, #12]
  400f52:	9b03      	ldr	r3, [sp, #12]
  400f54:	f043 0310 	orr.w	r3, r3, #16
  400f58:	9303      	str	r3, [sp, #12]
  400f5a:	9b03      	ldr	r3, [sp, #12]
  400f5c:	6313      	str	r3, [r2, #48]	; 0x30
  400f5e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400f60:	f013 0f10 	tst.w	r3, #16
  400f64:	d0fb      	beq.n	400f5e <udd_ctrl_in_sent+0x116>
	udd_ack_in_sent(0);
  400f66:	4a22      	ldr	r2, [pc, #136]	; (400ff0 <udd_ctrl_in_sent+0x1a8>)
  400f68:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400f6a:	9304      	str	r3, [sp, #16]
  400f6c:	9b04      	ldr	r3, [sp, #16]
  400f6e:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  400f72:	9304      	str	r3, [sp, #16]
  400f74:	9b04      	ldr	r3, [sp, #16]
  400f76:	f023 0301 	bic.w	r3, r3, #1
  400f7a:	9304      	str	r3, [sp, #16]
  400f7c:	9b04      	ldr	r3, [sp, #16]
  400f7e:	6313      	str	r3, [r2, #48]	; 0x30
  400f80:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400f82:	f013 0f01 	tst.w	r3, #1
  400f86:	d1fb      	bne.n	400f80 <udd_ctrl_in_sent+0x138>
	if (cpu_irq_is_enabled_flags(flags))
  400f88:	2d00      	cmp	r5, #0
  400f8a:	d0a2      	beq.n	400ed2 <udd_ctrl_in_sent+0x8a>
		cpu_irq_enable();
  400f8c:	2201      	movs	r2, #1
  400f8e:	4b1b      	ldr	r3, [pc, #108]	; (400ffc <udd_ctrl_in_sent+0x1b4>)
  400f90:	701a      	strb	r2, [r3, #0]
  400f92:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400f96:	b662      	cpsie	i
  400f98:	e79b      	b.n	400ed2 <udd_ctrl_in_sent+0x8a>
		b_shortpacket = true;
  400f9a:	2201      	movs	r2, #1
  400f9c:	4b13      	ldr	r3, [pc, #76]	; (400fec <udd_ctrl_in_sent+0x1a4>)
  400f9e:	701a      	strb	r2, [r3, #0]
  400fa0:	e7ab      	b.n	400efa <udd_ctrl_in_sent+0xb2>
	if (cpu_irq_is_enabled_flags(flags))
  400fa2:	b12d      	cbz	r5, 400fb0 <udd_ctrl_in_sent+0x168>
		cpu_irq_enable();
  400fa4:	2201      	movs	r2, #1
  400fa6:	4b15      	ldr	r3, [pc, #84]	; (400ffc <udd_ctrl_in_sent+0x1b4>)
  400fa8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  400faa:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400fae:	b662      	cpsie	i
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  400fb0:	2204      	movs	r2, #4
  400fb2:	4b0a      	ldr	r3, [pc, #40]	; (400fdc <udd_ctrl_in_sent+0x194>)
  400fb4:	701a      	strb	r2, [r3, #0]
		udd_ack_in_sent(0);
  400fb6:	4a0e      	ldr	r2, [pc, #56]	; (400ff0 <udd_ctrl_in_sent+0x1a8>)
  400fb8:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400fba:	9302      	str	r3, [sp, #8]
  400fbc:	9b02      	ldr	r3, [sp, #8]
  400fbe:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  400fc2:	9302      	str	r3, [sp, #8]
  400fc4:	9b02      	ldr	r3, [sp, #8]
  400fc6:	f023 0301 	bic.w	r3, r3, #1
  400fca:	9302      	str	r3, [sp, #8]
  400fcc:	9b02      	ldr	r3, [sp, #8]
  400fce:	6313      	str	r3, [r2, #48]	; 0x30
  400fd0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400fd2:	f013 0f01 	tst.w	r3, #1
  400fd6:	d1fb      	bne.n	400fd0 <udd_ctrl_in_sent+0x188>
  400fd8:	e77b      	b.n	400ed2 <udd_ctrl_in_sent+0x8a>
  400fda:	bf00      	nop
  400fdc:	200006c2 	.word	0x200006c2
  400fe0:	200006be 	.word	0x200006be
  400fe4:	2000070c 	.word	0x2000070c
  400fe8:	200006c0 	.word	0x200006c0
  400fec:	200006bc 	.word	0x200006bc
  400ff0:	40084000 	.word	0x40084000
  400ff4:	00400e39 	.word	0x00400e39
  400ff8:	00400db1 	.word	0x00400db1
  400ffc:	200000a0 	.word	0x200000a0

00401000 <udd_ep_finish_job>:
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, int status,
		uint8_t ep_num)
{
  401000:	b538      	push	{r3, r4, r5, lr}
	if (ptr_job->busy == false) {
  401002:	7c43      	ldrb	r3, [r0, #17]
  401004:	f013 0f10 	tst.w	r3, #16
  401008:	d016      	beq.n	401038 <udd_ep_finish_job+0x38>
  40100a:	460d      	mov	r5, r1
		return; // No on-going job
	}
	ptr_job->busy = false;
  40100c:	7c43      	ldrb	r3, [r0, #17]
  40100e:	f36f 1304 	bfc	r3, #4, #1
  401012:	7443      	strb	r3, [r0, #17]
	if (NULL == ptr_job->call_trans) {
  401014:	6804      	ldr	r4, [r0, #0]
  401016:	b17c      	cbz	r4, 401038 <udd_ep_finish_job+0x38>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_type_in(ep_num)) {
  401018:	f102 030c 	add.w	r3, r2, #12
  40101c:	4907      	ldr	r1, [pc, #28]	; (40103c <udd_ep_finish_job+0x3c>)
  40101e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
  401022:	f413 6f80 	tst.w	r3, #1024	; 0x400
		ep_num |= USB_EP_DIR_IN;
  401026:	bf18      	it	ne
  401028:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
	}
	ptr_job->call_trans((status == UDD_EP_TRANSFER_ABORT) ?
  40102c:	6881      	ldr	r1, [r0, #8]
  40102e:	2d01      	cmp	r5, #1
  401030:	bf14      	ite	ne
  401032:	2000      	movne	r0, #0
  401034:	2001      	moveq	r0, #1
  401036:	47a0      	blx	r4
  401038:	bd38      	pop	{r3, r4, r5, pc}
  40103a:	bf00      	nop
  40103c:	40084000 	.word	0x40084000

00401040 <udd_ep_ack_out_received>:
		UDD_EP_TRANSFER_ABORT : UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}


static void udd_ep_ack_out_received(udd_ep_id_t ep)
{
  401040:	b430      	push	{r4, r5}
  401042:	b082      	sub	sp, #8
	bool bank0_received, bank1_received;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  401044:	1e41      	subs	r1, r0, #1
  401046:	0083      	lsls	r3, r0, #2
  401048:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  40104c:	f503 2300 	add.w	r3, r3, #524288	; 0x80000

	bank0_received = Is_udd_bank0_received(ep);
  401050:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	bank1_received = Is_udd_bank1_received(ep);
  401052:	6b1c      	ldr	r4, [r3, #48]	; 0x30

	if (bank0_received && bank1_received) {
  401054:	f012 0f02 	tst.w	r2, #2
  401058:	d032      	beq.n	4010c0 <udd_ep_ack_out_received+0x80>
  40105a:	f014 0f40 	tst.w	r4, #64	; 0x40
  40105e:	d108      	bne.n	401072 <udd_ep_ack_out_received+0x32>
		// The only way is to use ptr_job->bank
	} else if (bank0_received) {
		// Must be bank0
		ptr_job->bank = 0;
  401060:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  401064:	4c2a      	ldr	r4, [pc, #168]	; (401110 <udd_ep_ack_out_received+0xd0>)
  401066:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  40106a:	7c54      	ldrb	r4, [r2, #17]
  40106c:	f36f 0483 	bfc	r4, #2, #2
  401070:	7454      	strb	r4, [r2, #17]
	} else {
		// Must be bank1
		ptr_job->bank = 1;
	}
	if (ptr_job->bank == 0) {
  401072:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  401076:	4c26      	ldr	r4, [pc, #152]	; (401110 <udd_ep_ack_out_received+0xd0>)
  401078:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  40107c:	7c52      	ldrb	r2, [r2, #17]
  40107e:	f012 0f0c 	tst.w	r2, #12
  401082:	d128      	bne.n	4010d6 <udd_ep_ack_out_received+0x96>
		udd_ack_bank0_received(ep);
  401084:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401086:	9200      	str	r2, [sp, #0]
  401088:	9a00      	ldr	r2, [sp, #0]
  40108a:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  40108e:	9200      	str	r2, [sp, #0]
  401090:	9a00      	ldr	r2, [sp, #0]
  401092:	f022 0202 	bic.w	r2, r2, #2
  401096:	9200      	str	r2, [sp, #0]
  401098:	9a00      	ldr	r2, [sp, #0]
  40109a:	631a      	str	r2, [r3, #48]	; 0x30
  40109c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40109e:	f012 0f02 	tst.w	r2, #2
  4010a2:	d1fb      	bne.n	40109c <udd_ep_ack_out_received+0x5c>
		if (udd_get_endpoint_bank_max_nbr(ep) > 1) {
  4010a4:	b380      	cbz	r0, 401108 <udd_ep_ack_out_received+0xc8>
  4010a6:	2803      	cmp	r0, #3
  4010a8:	d02e      	beq.n	401108 <udd_ep_ack_out_received+0xc8>
			ptr_job->bank = 1;
  4010aa:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  4010ae:	4b18      	ldr	r3, [pc, #96]	; (401110 <udd_ep_ack_out_received+0xd0>)
  4010b0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
  4010b4:	7c5a      	ldrb	r2, [r3, #17]
  4010b6:	2101      	movs	r1, #1
  4010b8:	f361 0283 	bfi	r2, r1, #2, #2
  4010bc:	745a      	strb	r2, [r3, #17]
  4010be:	e023      	b.n	401108 <udd_ep_ack_out_received+0xc8>
		ptr_job->bank = 1;
  4010c0:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  4010c4:	4c12      	ldr	r4, [pc, #72]	; (401110 <udd_ep_ack_out_received+0xd0>)
  4010c6:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  4010ca:	7c54      	ldrb	r4, [r2, #17]
  4010cc:	2501      	movs	r5, #1
  4010ce:	f365 0483 	bfi	r4, r5, #2, #2
  4010d2:	7454      	strb	r4, [r2, #17]
  4010d4:	e7cd      	b.n	401072 <udd_ep_ack_out_received+0x32>
		}
	} else {
		udd_ack_bank1_received(ep);
  4010d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4010d8:	9201      	str	r2, [sp, #4]
  4010da:	9a01      	ldr	r2, [sp, #4]
  4010dc:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4010e0:	9201      	str	r2, [sp, #4]
  4010e2:	9a01      	ldr	r2, [sp, #4]
  4010e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
  4010e8:	9201      	str	r2, [sp, #4]
  4010ea:	9a01      	ldr	r2, [sp, #4]
  4010ec:	631a      	str	r2, [r3, #48]	; 0x30
  4010ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4010f0:	f012 0f40 	tst.w	r2, #64	; 0x40
  4010f4:	d1fb      	bne.n	4010ee <udd_ep_ack_out_received+0xae>
		ptr_job->bank = 0;
  4010f6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  4010fa:	4b05      	ldr	r3, [pc, #20]	; (401110 <udd_ep_ack_out_received+0xd0>)
  4010fc:	eb03 0181 	add.w	r1, r3, r1, lsl #2
  401100:	7c4b      	ldrb	r3, [r1, #17]
  401102:	f36f 0383 	bfc	r3, #2, #2
  401106:	744b      	strb	r3, [r1, #17]
	}
}
  401108:	b002      	add	sp, #8
  40110a:	bc30      	pop	{r4, r5}
  40110c:	4770      	bx	lr
  40110e:	bf00      	nop
  401110:	200006c4 	.word	0x200006c4

00401114 <udd_ep_in_sent>:
	return is_short_pkt;
}


static bool udd_ep_in_sent(udd_ep_id_t ep, bool b_tx)
{
  401114:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401118:	b083      	sub	sp, #12
  40111a:	4688      	mov	r8, r1
	bool b_shortpacket;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  40111c:	4681      	mov	r9, r0
  40111e:	1e46      	subs	r6, r0, #1

	// All banks are full
	if (ptr_job->bank >= udd_get_endpoint_bank_max_nbr(ep)) {
  401120:	eb06 0286 	add.w	r2, r6, r6, lsl #2
  401124:	4b66      	ldr	r3, [pc, #408]	; (4012c0 <udd_ep_in_sent+0x1ac>)
  401126:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  40112a:	f893 c011 	ldrb.w	ip, [r3, #17]
  40112e:	f3cc 0c81 	ubfx	ip, ip, #2, #2
  401132:	2800      	cmp	r0, #0
  401134:	f000 80b7 	beq.w	4012a6 <udd_ep_in_sent+0x192>
  401138:	2803      	cmp	r0, #3
  40113a:	bf0c      	ite	eq
  40113c:	2301      	moveq	r3, #1
  40113e:	2302      	movne	r3, #2
  401140:	4563      	cmp	r3, ip
  401142:	f340 80b2 	ble.w	4012aa <udd_ep_in_sent+0x196>
		return true; // Data pending
	}

	// No more data in buffer
	if (ptr_job->buf_cnt >= ptr_job->buf_size && !ptr_job->b_shortpacket) {
  401146:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  40114a:	4a5d      	ldr	r2, [pc, #372]	; (4012c0 <udd_ep_in_sent+0x1ac>)
  40114c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401150:	68da      	ldr	r2, [r3, #12]
  401152:	689b      	ldr	r3, [r3, #8]
  401154:	429a      	cmp	r2, r3
  401156:	d309      	bcc.n	40116c <udd_ep_in_sent+0x58>
  401158:	eb06 0186 	add.w	r1, r6, r6, lsl #2
  40115c:	4c58      	ldr	r4, [pc, #352]	; (4012c0 <udd_ep_in_sent+0x1ac>)
  40115e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
  401162:	7c49      	ldrb	r1, [r1, #17]
  401164:	f011 0f40 	tst.w	r1, #64	; 0x40
  401168:	f000 80a3 	beq.w	4012b2 <udd_ep_in_sent+0x19e>
	uint8_t *ptr_src = &ptr_job->buf[ptr_job->buf_cnt];
  40116c:	eb06 0586 	add.w	r5, r6, r6, lsl #2
  401170:	4953      	ldr	r1, [pc, #332]	; (4012c0 <udd_ep_in_sent+0x1ac>)
  401172:	eb01 0585 	add.w	r5, r1, r5, lsl #2
  401176:	686c      	ldr	r4, [r5, #4]
  401178:	4414      	add	r4, r2
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  40117a:	1a99      	subs	r1, r3, r2
	uint32_t pkt_size = ptr_job->size;
  40117c:	8a2b      	ldrh	r3, [r5, #16]
  40117e:	f3c3 0709 	ubfx	r7, r3, #0, #10
	if (nb_remain < pkt_size) {
  401182:	42b9      	cmp	r1, r7
		pkt_size = nb_remain;
  401184:	bf3a      	itte	cc
  401186:	460f      	movcc	r7, r1
		is_short_pkt = true;
  401188:	f04f 0e01 	movcc.w	lr, #1
	bool is_short_pkt = false;
  40118c:	f04f 0e00 	movcs.w	lr, #0
	ptr_job->buf_cnt += pkt_size;
  401190:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  401194:	494a      	ldr	r1, [pc, #296]	; (4012c0 <udd_ep_in_sent+0x1ac>)
  401196:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  40119a:	443a      	add	r2, r7
  40119c:	60da      	str	r2, [r3, #12]
	for (; pkt_size >= 8; pkt_size -= 8) {
  40119e:	2f07      	cmp	r7, #7
  4011a0:	d92b      	bls.n	4011fa <udd_ep_in_sent+0xe6>
  4011a2:	f104 0308 	add.w	r3, r4, #8
  4011a6:	463d      	mov	r5, r7
  4011a8:	0082      	lsls	r2, r0, #2
  4011aa:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  4011ae:	f502 2200 	add.w	r2, r2, #524288	; 0x80000
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4011b2:	f813 1c08 	ldrb.w	r1, [r3, #-8]
  4011b6:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4011b8:	f813 1c07 	ldrb.w	r1, [r3, #-7]
  4011bc:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4011be:	f813 1c06 	ldrb.w	r1, [r3, #-6]
  4011c2:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4011c4:	f813 1c05 	ldrb.w	r1, [r3, #-5]
  4011c8:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4011ca:	f813 1c04 	ldrb.w	r1, [r3, #-4]
  4011ce:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4011d0:	f813 1c03 	ldrb.w	r1, [r3, #-3]
  4011d4:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4011d6:	f813 1c02 	ldrb.w	r1, [r3, #-2]
  4011da:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4011dc:	f813 1c01 	ldrb.w	r1, [r3, #-1]
  4011e0:	6511      	str	r1, [r2, #80]	; 0x50
	for (; pkt_size >= 8; pkt_size -= 8) {
  4011e2:	3d08      	subs	r5, #8
  4011e4:	3308      	adds	r3, #8
  4011e6:	2d07      	cmp	r5, #7
  4011e8:	d8e3      	bhi.n	4011b2 <udd_ep_in_sent+0x9e>
  4011ea:	f1a7 0308 	sub.w	r3, r7, #8
  4011ee:	f023 0307 	bic.w	r3, r3, #7
  4011f2:	3308      	adds	r3, #8
  4011f4:	441c      	add	r4, r3
  4011f6:	f007 0707 	and.w	r7, r7, #7
	for (; pkt_size; pkt_size--) {
  4011fa:	b14f      	cbz	r7, 401210 <udd_ep_in_sent+0xfc>
  4011fc:	19e3      	adds	r3, r4, r7
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4011fe:	4931      	ldr	r1, [pc, #196]	; (4012c4 <udd_ep_in_sent+0x1b0>)
  401200:	f109 0914 	add.w	r9, r9, #20
  401204:	f814 2b01 	ldrb.w	r2, [r4], #1
  401208:	f841 2029 	str.w	r2, [r1, r9, lsl #2]
	for (; pkt_size; pkt_size--) {
  40120c:	429c      	cmp	r4, r3
  40120e:	d1f9      	bne.n	401204 <udd_ep_in_sent+0xf0>
	ptr_job->bank++;
  401210:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  401214:	4a2a      	ldr	r2, [pc, #168]	; (4012c0 <udd_ep_in_sent+0x1ac>)
  401216:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40121a:	f10c 0c01 	add.w	ip, ip, #1
  40121e:	7c5a      	ldrb	r2, [r3, #17]
  401220:	f36c 0283 	bfi	r2, ip, #2, #2
  401224:	745a      	strb	r2, [r3, #17]

	// Fill FIFO
	b_shortpacket = udd_ep_write_fifo(ep);

	// Data is ready to send
	if (b_tx) {
  401226:	f1b8 0f00 	cmp.w	r8, #0
  40122a:	d014      	beq.n	401256 <udd_ep_in_sent+0x142>
  40122c:	0080      	lsls	r0, r0, #2
  40122e:	f100 2040 	add.w	r0, r0, #1073758208	; 0x40004000
  401232:	f500 2000 	add.w	r0, r0, #524288	; 0x80000
		udd_set_transmit_ready(ep);
  401236:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401238:	9301      	str	r3, [sp, #4]
  40123a:	9b01      	ldr	r3, [sp, #4]
  40123c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401240:	9301      	str	r3, [sp, #4]
  401242:	9b01      	ldr	r3, [sp, #4]
  401244:	f043 0310 	orr.w	r3, r3, #16
  401248:	9301      	str	r3, [sp, #4]
  40124a:	9b01      	ldr	r3, [sp, #4]
  40124c:	6303      	str	r3, [r0, #48]	; 0x30
  40124e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401250:	f013 0f10 	tst.w	r3, #16
  401254:	d0fb      	beq.n	40124e <udd_ep_in_sent+0x13a>
	}
	// Short PKT? no need to send it again.
	if (b_shortpacket) {
  401256:	f1be 0f00 	cmp.w	lr, #0
  40125a:	d008      	beq.n	40126e <udd_ep_in_sent+0x15a>
		ptr_job->b_shortpacket = false;
  40125c:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  401260:	4a17      	ldr	r2, [pc, #92]	; (4012c0 <udd_ep_in_sent+0x1ac>)
  401262:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401266:	7c5a      	ldrb	r2, [r3, #17]
  401268:	f36f 1286 	bfc	r2, #6, #1
  40126c:	745a      	strb	r2, [r3, #17]
	}
	// All transfer done, including ZLP, Finish Job
	if ((ptr_job->buf_cnt >= ptr_job->buf_size)
  40126e:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  401272:	4a13      	ldr	r2, [pc, #76]	; (4012c0 <udd_ep_in_sent+0x1ac>)
  401274:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401278:	68da      	ldr	r2, [r3, #12]
  40127a:	689b      	ldr	r3, [r3, #8]
  40127c:	429a      	cmp	r2, r3
  40127e:	d31a      	bcc.n	4012b6 <udd_ep_in_sent+0x1a2>
			&& (!ptr_job->b_shortpacket)) {
  401280:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  401284:	4a0e      	ldr	r2, [pc, #56]	; (4012c0 <udd_ep_in_sent+0x1ac>)
  401286:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40128a:	7c5b      	ldrb	r3, [r3, #17]
  40128c:	f013 0f40 	tst.w	r3, #64	; 0x40
  401290:	d113      	bne.n	4012ba <udd_ep_in_sent+0x1a6>
		ptr_job->b_buf_end = true;
  401292:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  401296:	eb02 0686 	add.w	r6, r2, r6, lsl #2
  40129a:	7c73      	ldrb	r3, [r6, #17]
  40129c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4012a0:	7473      	strb	r3, [r6, #17]
		return false;
  4012a2:	2000      	movs	r0, #0
  4012a4:	e002      	b.n	4012ac <udd_ep_in_sent+0x198>
	if (ptr_job->bank >= udd_get_endpoint_bank_max_nbr(ep)) {
  4012a6:	2301      	movs	r3, #1
  4012a8:	e74a      	b.n	401140 <udd_ep_in_sent+0x2c>
		return true; // Data pending
  4012aa:	2001      	movs	r0, #1
	}
	return true; // Pending
}
  4012ac:	b003      	add	sp, #12
  4012ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return false;
  4012b2:	2000      	movs	r0, #0
  4012b4:	e7fa      	b.n	4012ac <udd_ep_in_sent+0x198>
	return true; // Pending
  4012b6:	2001      	movs	r0, #1
  4012b8:	e7f8      	b.n	4012ac <udd_ep_in_sent+0x198>
  4012ba:	2001      	movs	r0, #1
  4012bc:	e7f6      	b.n	4012ac <udd_ep_in_sent+0x198>
  4012be:	bf00      	nop
  4012c0:	200006c4 	.word	0x200006c4
  4012c4:	40084000 	.word	0x40084000

004012c8 <UDP_Handler>:
{
  4012c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4012cc:	b09b      	sub	sp, #108	; 0x6c
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
  4012ce:	4b86      	ldr	r3, [pc, #536]	; (4014e8 <UDP_Handler+0x220>)
  4012d0:	4798      	blx	r3
  4012d2:	b920      	cbnz	r0, 4012de <UDP_Handler+0x16>
  4012d4:	4b85      	ldr	r3, [pc, #532]	; (4014ec <UDP_Handler+0x224>)
  4012d6:	69db      	ldr	r3, [r3, #28]
  4012d8:	f413 7f80 	tst.w	r3, #256	; 0x100
  4012dc:	d03b      	beq.n	401356 <UDP_Handler+0x8e>
	udd_enable_periph_ck();
  4012de:	2023      	movs	r0, #35	; 0x23
  4012e0:	4b83      	ldr	r3, [pc, #524]	; (4014f0 <UDP_Handler+0x228>)
  4012e2:	4798      	blx	r3
	if (Is_udd_sof_interrupt_enabled() && Is_udd_sof()) {
  4012e4:	4b81      	ldr	r3, [pc, #516]	; (4014ec <UDP_Handler+0x224>)
  4012e6:	699b      	ldr	r3, [r3, #24]
  4012e8:	f413 6f00 	tst.w	r3, #2048	; 0x800
  4012ec:	d004      	beq.n	4012f8 <UDP_Handler+0x30>
  4012ee:	4b7f      	ldr	r3, [pc, #508]	; (4014ec <UDP_Handler+0x224>)
  4012f0:	69db      	ldr	r3, [r3, #28]
  4012f2:	f413 6f00 	tst.w	r3, #2048	; 0x800
  4012f6:	d137      	bne.n	401368 <UDP_Handler+0xa0>
	if (!Is_udd_endpoint_interrupt(0))
  4012f8:	4b7c      	ldr	r3, [pc, #496]	; (4014ec <UDP_Handler+0x224>)
  4012fa:	69db      	ldr	r3, [r3, #28]
  4012fc:	f013 0f01 	tst.w	r3, #1
  401300:	f000 81b6 	beq.w	401670 <UDP_Handler+0x3a8>
	if (Is_udd_setup_received(0)) {
  401304:	4b79      	ldr	r3, [pc, #484]	; (4014ec <UDP_Handler+0x224>)
  401306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401308:	f013 0f04 	tst.w	r3, #4
  40130c:	d133      	bne.n	401376 <UDP_Handler+0xae>
	if (Is_udd_in_sent(0)) {
  40130e:	4b77      	ldr	r3, [pc, #476]	; (4014ec <UDP_Handler+0x224>)
  401310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401312:	f013 0f01 	tst.w	r3, #1
  401316:	f040 80c3 	bne.w	4014a0 <UDP_Handler+0x1d8>
	if (Is_udd_bank0_received(0)) {
  40131a:	4b74      	ldr	r3, [pc, #464]	; (4014ec <UDP_Handler+0x224>)
  40131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40131e:	f013 0f02 	tst.w	r3, #2
  401322:	f040 80c0 	bne.w	4014a6 <UDP_Handler+0x1de>
	if (Is_udd_stall(0)) {
  401326:	4b71      	ldr	r3, [pc, #452]	; (4014ec <UDP_Handler+0x224>)
  401328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40132a:	f013 0f08 	tst.w	r3, #8
  40132e:	f000 819f 	beq.w	401670 <UDP_Handler+0x3a8>
		udd_ack_stall(0);
  401332:	4a6e      	ldr	r2, [pc, #440]	; (4014ec <UDP_Handler+0x224>)
  401334:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401336:	9300      	str	r3, [sp, #0]
  401338:	9b00      	ldr	r3, [sp, #0]
  40133a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40133e:	9300      	str	r3, [sp, #0]
  401340:	9b00      	ldr	r3, [sp, #0]
  401342:	f023 0308 	bic.w	r3, r3, #8
  401346:	9300      	str	r3, [sp, #0]
  401348:	9b00      	ldr	r3, [sp, #0]
  40134a:	6313      	str	r3, [r2, #48]	; 0x30
  40134c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40134e:	f013 0f08 	tst.w	r3, #8
  401352:	d1fb      	bne.n	40134c <UDP_Handler+0x84>
  401354:	e005      	b.n	401362 <UDP_Handler+0x9a>
  __ASM volatile ("cpsid i" : : : "memory");
  401356:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  401358:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
  40135c:	2200      	movs	r2, #0
  40135e:	4b65      	ldr	r3, [pc, #404]	; (4014f4 <UDP_Handler+0x22c>)
  401360:	701a      	strb	r2, [r3, #0]
}
  401362:	b01b      	add	sp, #108	; 0x6c
  401364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		udd_ack_sof();
  401368:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40136c:	4b5f      	ldr	r3, [pc, #380]	; (4014ec <UDP_Handler+0x224>)
  40136e:	621a      	str	r2, [r3, #32]
		udc_sof_notify();
  401370:	4b61      	ldr	r3, [pc, #388]	; (4014f8 <UDP_Handler+0x230>)
  401372:	4798      	blx	r3
		goto udd_interrupt_sof_end;
  401374:	e7f5      	b.n	401362 <UDP_Handler+0x9a>
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
  401376:	4b61      	ldr	r3, [pc, #388]	; (4014fc <UDP_Handler+0x234>)
  401378:	781b      	ldrb	r3, [r3, #0]
  40137a:	b9cb      	cbnz	r3, 4013b0 <UDP_Handler+0xe8>
	if (8 != udd_byte_count(0)) {
  40137c:	4b5b      	ldr	r3, [pc, #364]	; (4014ec <UDP_Handler+0x224>)
  40137e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401380:	f3c3 430a 	ubfx	r3, r3, #16, #11
  401384:	2b08      	cmp	r3, #8
  401386:	d018      	beq.n	4013ba <UDP_Handler+0xf2>
		udd_ack_setup_received(0);
  401388:	4a58      	ldr	r2, [pc, #352]	; (4014ec <UDP_Handler+0x224>)
  40138a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40138c:	9301      	str	r3, [sp, #4]
  40138e:	9b01      	ldr	r3, [sp, #4]
  401390:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401394:	9301      	str	r3, [sp, #4]
  401396:	9b01      	ldr	r3, [sp, #4]
  401398:	f023 0304 	bic.w	r3, r3, #4
  40139c:	9301      	str	r3, [sp, #4]
  40139e:	9b01      	ldr	r3, [sp, #4]
  4013a0:	6313      	str	r3, [r2, #48]	; 0x30
  4013a2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4013a4:	f013 0f04 	tst.w	r3, #4
  4013a8:	d1fb      	bne.n	4013a2 <UDP_Handler+0xda>
		udd_ctrl_stall_data();
  4013aa:	4b55      	ldr	r3, [pc, #340]	; (401500 <UDP_Handler+0x238>)
  4013ac:	4798      	blx	r3
  4013ae:	e7d8      	b.n	401362 <UDP_Handler+0x9a>
		udd_ctrl_endofrequest();
  4013b0:	4b54      	ldr	r3, [pc, #336]	; (401504 <UDP_Handler+0x23c>)
  4013b2:	4798      	blx	r3
		udd_ctrl_init();
  4013b4:	4b54      	ldr	r3, [pc, #336]	; (401508 <UDP_Handler+0x240>)
  4013b6:	4798      	blx	r3
  4013b8:	e7e0      	b.n	40137c <UDP_Handler+0xb4>
  4013ba:	4b54      	ldr	r3, [pc, #336]	; (40150c <UDP_Handler+0x244>)
  4013bc:	f103 0008 	add.w	r0, r3, #8
			udd_endpoint_fifo_read(0);
  4013c0:	494a      	ldr	r1, [pc, #296]	; (4014ec <UDP_Handler+0x224>)
  4013c2:	6d0a      	ldr	r2, [r1, #80]	; 0x50
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
  4013c4:	f803 2f01 	strb.w	r2, [r3, #1]!
	for (i = 0; i < 8; i++) {
  4013c8:	4283      	cmp	r3, r0
  4013ca:	d1fa      	bne.n	4013c2 <UDP_Handler+0xfa>
	if (udc_process_setup() == false) {
  4013cc:	4b50      	ldr	r3, [pc, #320]	; (401510 <UDP_Handler+0x248>)
  4013ce:	4798      	blx	r3
  4013d0:	b998      	cbnz	r0, 4013fa <UDP_Handler+0x132>
		udd_ack_setup_received(0);
  4013d2:	4a46      	ldr	r2, [pc, #280]	; (4014ec <UDP_Handler+0x224>)
  4013d4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4013d6:	9302      	str	r3, [sp, #8]
  4013d8:	9b02      	ldr	r3, [sp, #8]
  4013da:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4013de:	9302      	str	r3, [sp, #8]
  4013e0:	9b02      	ldr	r3, [sp, #8]
  4013e2:	f023 0304 	bic.w	r3, r3, #4
  4013e6:	9302      	str	r3, [sp, #8]
  4013e8:	9b02      	ldr	r3, [sp, #8]
  4013ea:	6313      	str	r3, [r2, #48]	; 0x30
  4013ec:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4013ee:	f013 0f04 	tst.w	r3, #4
  4013f2:	d1fb      	bne.n	4013ec <UDP_Handler+0x124>
		udd_ctrl_stall_data();
  4013f4:	4b42      	ldr	r3, [pc, #264]	; (401500 <UDP_Handler+0x238>)
  4013f6:	4798      	blx	r3
  4013f8:	e7b3      	b.n	401362 <UDP_Handler+0x9a>
	if (Udd_setup_is_in()) {
  4013fa:	4b46      	ldr	r3, [pc, #280]	; (401514 <UDP_Handler+0x24c>)
  4013fc:	f993 3000 	ldrsb.w	r3, [r3]
  401400:	2b00      	cmp	r3, #0
  401402:	db1d      	blt.n	401440 <UDP_Handler+0x178>
		udd_ack_setup_received(0);
  401404:	4a39      	ldr	r2, [pc, #228]	; (4014ec <UDP_Handler+0x224>)
  401406:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401408:	9305      	str	r3, [sp, #20]
  40140a:	9b05      	ldr	r3, [sp, #20]
  40140c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401410:	9305      	str	r3, [sp, #20]
  401412:	9b05      	ldr	r3, [sp, #20]
  401414:	f023 0304 	bic.w	r3, r3, #4
  401418:	9305      	str	r3, [sp, #20]
  40141a:	9b05      	ldr	r3, [sp, #20]
  40141c:	6313      	str	r3, [r2, #48]	; 0x30
  40141e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401420:	f013 0f04 	tst.w	r3, #4
  401424:	d1fb      	bne.n	40141e <UDP_Handler+0x156>
		if (0 == udd_g_ctrlreq.req.wLength) {
  401426:	4b3b      	ldr	r3, [pc, #236]	; (401514 <UDP_Handler+0x24c>)
  401428:	88db      	ldrh	r3, [r3, #6]
  40142a:	2b00      	cmp	r3, #0
  40142c:	d035      	beq.n	40149a <UDP_Handler+0x1d2>
		udd_ctrl_prev_payload_nb_trans = 0;
  40142e:	2300      	movs	r3, #0
  401430:	4a39      	ldr	r2, [pc, #228]	; (401518 <UDP_Handler+0x250>)
  401432:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_nb_trans = 0;
  401434:	4a39      	ldr	r2, [pc, #228]	; (40151c <UDP_Handler+0x254>)
  401436:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
  401438:	2201      	movs	r2, #1
  40143a:	4b30      	ldr	r3, [pc, #192]	; (4014fc <UDP_Handler+0x234>)
  40143c:	701a      	strb	r2, [r3, #0]
  40143e:	e790      	b.n	401362 <UDP_Handler+0x9a>
		udd_set_endpoint_direction_in(0);
  401440:	4a2a      	ldr	r2, [pc, #168]	; (4014ec <UDP_Handler+0x224>)
  401442:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401444:	9303      	str	r3, [sp, #12]
  401446:	9b03      	ldr	r3, [sp, #12]
  401448:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40144c:	9303      	str	r3, [sp, #12]
  40144e:	9b03      	ldr	r3, [sp, #12]
  401450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401454:	9303      	str	r3, [sp, #12]
  401456:	9b03      	ldr	r3, [sp, #12]
  401458:	6313      	str	r3, [r2, #48]	; 0x30
  40145a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40145c:	f013 0f80 	tst.w	r3, #128	; 0x80
  401460:	d0fb      	beq.n	40145a <UDP_Handler+0x192>
		udd_ack_setup_received(0);
  401462:	4a22      	ldr	r2, [pc, #136]	; (4014ec <UDP_Handler+0x224>)
  401464:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401466:	9304      	str	r3, [sp, #16]
  401468:	9b04      	ldr	r3, [sp, #16]
  40146a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40146e:	9304      	str	r3, [sp, #16]
  401470:	9b04      	ldr	r3, [sp, #16]
  401472:	f023 0304 	bic.w	r3, r3, #4
  401476:	9304      	str	r3, [sp, #16]
  401478:	9b04      	ldr	r3, [sp, #16]
  40147a:	6313      	str	r3, [r2, #48]	; 0x30
  40147c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40147e:	f013 0f04 	tst.w	r3, #4
  401482:	d1fb      	bne.n	40147c <UDP_Handler+0x1b4>
		udd_ctrl_prev_payload_nb_trans = 0;
  401484:	2300      	movs	r3, #0
  401486:	4a24      	ldr	r2, [pc, #144]	; (401518 <UDP_Handler+0x250>)
  401488:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_nb_trans = 0;
  40148a:	4a24      	ldr	r2, [pc, #144]	; (40151c <UDP_Handler+0x254>)
  40148c:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
  40148e:	2202      	movs	r2, #2
  401490:	4b1a      	ldr	r3, [pc, #104]	; (4014fc <UDP_Handler+0x234>)
  401492:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
  401494:	4b22      	ldr	r3, [pc, #136]	; (401520 <UDP_Handler+0x258>)
  401496:	4798      	blx	r3
  401498:	e763      	b.n	401362 <UDP_Handler+0x9a>
			udd_ctrl_send_zlp_in();
  40149a:	4b22      	ldr	r3, [pc, #136]	; (401524 <UDP_Handler+0x25c>)
  40149c:	4798      	blx	r3
  40149e:	e760      	b.n	401362 <UDP_Handler+0x9a>
		udd_ctrl_in_sent();
  4014a0:	4b1f      	ldr	r3, [pc, #124]	; (401520 <UDP_Handler+0x258>)
  4014a2:	4798      	blx	r3
  4014a4:	e75d      	b.n	401362 <UDP_Handler+0x9a>
	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
  4014a6:	4b15      	ldr	r3, [pc, #84]	; (4014fc <UDP_Handler+0x234>)
  4014a8:	781b      	ldrb	r3, [r3, #0]
  4014aa:	2b01      	cmp	r3, #1
  4014ac:	d03c      	beq.n	401528 <UDP_Handler+0x260>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
  4014ae:	2b02      	cmp	r3, #2
  4014b0:	d004      	beq.n	4014bc <UDP_Handler+0x1f4>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
  4014b2:	2b04      	cmp	r3, #4
  4014b4:	d002      	beq.n	4014bc <UDP_Handler+0x1f4>
			udd_ctrl_stall_data();
  4014b6:	4b12      	ldr	r3, [pc, #72]	; (401500 <UDP_Handler+0x238>)
  4014b8:	4798      	blx	r3
  4014ba:	e001      	b.n	4014c0 <UDP_Handler+0x1f8>
			udd_ctrl_endofrequest();
  4014bc:	4b11      	ldr	r3, [pc, #68]	; (401504 <UDP_Handler+0x23c>)
  4014be:	4798      	blx	r3
		udd_ack_bank0_received(0);
  4014c0:	4a0a      	ldr	r2, [pc, #40]	; (4014ec <UDP_Handler+0x224>)
  4014c2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4014c4:	9306      	str	r3, [sp, #24]
  4014c6:	9b06      	ldr	r3, [sp, #24]
  4014c8:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4014cc:	9306      	str	r3, [sp, #24]
  4014ce:	9b06      	ldr	r3, [sp, #24]
  4014d0:	f023 0302 	bic.w	r3, r3, #2
  4014d4:	9306      	str	r3, [sp, #24]
  4014d6:	9b06      	ldr	r3, [sp, #24]
  4014d8:	6313      	str	r3, [r2, #48]	; 0x30
  4014da:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4014dc:	f013 0f02 	tst.w	r3, #2
  4014e0:	d1fb      	bne.n	4014da <UDP_Handler+0x212>
		udd_ctrl_init();
  4014e2:	4b09      	ldr	r3, [pc, #36]	; (401508 <UDP_Handler+0x240>)
  4014e4:	4798      	blx	r3
  4014e6:	e73c      	b.n	401362 <UDP_Handler+0x9a>
  4014e8:	0040239d 	.word	0x0040239d
  4014ec:	40084000 	.word	0x40084000
  4014f0:	004022f5 	.word	0x004022f5
  4014f4:	200000a0 	.word	0x200000a0
  4014f8:	004007f1 	.word	0x004007f1
  4014fc:	200006c2 	.word	0x200006c2
  401500:	00400dc9 	.word	0x00400dc9
  401504:	00400e39 	.word	0x00400e39
  401508:	00400db1 	.word	0x00400db1
  40150c:	2000070b 	.word	0x2000070b
  401510:	00400831 	.word	0x00400831
  401514:	2000070c 	.word	0x2000070c
  401518:	200006c0 	.word	0x200006c0
  40151c:	200006be 	.word	0x200006be
  401520:	00400e49 	.word	0x00400e49
  401524:	00400e01 	.word	0x00400e01
	nb_data = udd_byte_count(0);
  401528:	4b93      	ldr	r3, [pc, #588]	; (401778 <UDP_Handler+0x4b0>)
  40152a:	6b19      	ldr	r1, [r3, #48]	; 0x30
  40152c:	f3c1 410a 	ubfx	r1, r1, #16, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
  401530:	4b92      	ldr	r3, [pc, #584]	; (40177c <UDP_Handler+0x4b4>)
  401532:	899b      	ldrh	r3, [r3, #12]
  401534:	4a92      	ldr	r2, [pc, #584]	; (401780 <UDP_Handler+0x4b8>)
  401536:	8815      	ldrh	r5, [r2, #0]
  401538:	186a      	adds	r2, r5, r1
  40153a:	4293      	cmp	r3, r2
		nb_data = udd_g_ctrlreq.payload_size -
  40153c:	bfbc      	itt	lt
  40153e:	1b5b      	sublt	r3, r3, r5
  401540:	b299      	uxthlt	r1, r3
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  401542:	4b8e      	ldr	r3, [pc, #568]	; (40177c <UDP_Handler+0x4b4>)
  401544:	6898      	ldr	r0, [r3, #8]
  401546:	4428      	add	r0, r5
	for (i = 0; i < nb_data; i++) {
  401548:	b171      	cbz	r1, 401568 <UDP_Handler+0x2a0>
  40154a:	4602      	mov	r2, r0
		*ptr_dest++ = udd_endpoint_fifo_read(0);
  40154c:	4c8a      	ldr	r4, [pc, #552]	; (401778 <UDP_Handler+0x4b0>)
  40154e:	6d23      	ldr	r3, [r4, #80]	; 0x50
  401550:	f802 3b01 	strb.w	r3, [r2], #1
	for (i = 0; i < nb_data; i++) {
  401554:	1a13      	subs	r3, r2, r0
  401556:	b2db      	uxtb	r3, r3
  401558:	428b      	cmp	r3, r1
  40155a:	d3f8      	bcc.n	40154e <UDP_Handler+0x286>
	udd_ctrl_payload_nb_trans += nb_data;
  40155c:	440d      	add	r5, r1
  40155e:	b2ad      	uxth	r5, r5
  401560:	4b87      	ldr	r3, [pc, #540]	; (401780 <UDP_Handler+0x4b8>)
  401562:	801d      	strh	r5, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
  401564:	2940      	cmp	r1, #64	; 0x40
  401566:	d01a      	beq.n	40159e <UDP_Handler+0x2d6>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
  401568:	4b84      	ldr	r3, [pc, #528]	; (40177c <UDP_Handler+0x4b4>)
  40156a:	819d      	strh	r5, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
  40156c:	695b      	ldr	r3, [r3, #20]
  40156e:	b113      	cbz	r3, 401576 <UDP_Handler+0x2ae>
			if (!udd_g_ctrlreq.over_under_run()) {
  401570:	4798      	blx	r3
  401572:	2800      	cmp	r0, #0
  401574:	d030      	beq.n	4015d8 <UDP_Handler+0x310>
		udd_ack_bank0_received(0);
  401576:	4a80      	ldr	r2, [pc, #512]	; (401778 <UDP_Handler+0x4b0>)
  401578:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40157a:	9308      	str	r3, [sp, #32]
  40157c:	9b08      	ldr	r3, [sp, #32]
  40157e:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401582:	9308      	str	r3, [sp, #32]
  401584:	9b08      	ldr	r3, [sp, #32]
  401586:	f023 0302 	bic.w	r3, r3, #2
  40158a:	9308      	str	r3, [sp, #32]
  40158c:	9b08      	ldr	r3, [sp, #32]
  40158e:	6313      	str	r3, [r2, #48]	; 0x30
  401590:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401592:	f013 0f02 	tst.w	r3, #2
  401596:	d1fb      	bne.n	401590 <UDP_Handler+0x2c8>
		udd_ctrl_send_zlp_in();
  401598:	4b7a      	ldr	r3, [pc, #488]	; (401784 <UDP_Handler+0x4bc>)
  40159a:	4798      	blx	r3
  40159c:	e6e1      	b.n	401362 <UDP_Handler+0x9a>
			|| (udd_g_ctrlreq.req.wLength <=
  40159e:	4b77      	ldr	r3, [pc, #476]	; (40177c <UDP_Handler+0x4b4>)
  4015a0:	88da      	ldrh	r2, [r3, #6]
			(udd_ctrl_prev_payload_nb_trans +
  4015a2:	4b79      	ldr	r3, [pc, #484]	; (401788 <UDP_Handler+0x4c0>)
  4015a4:	881b      	ldrh	r3, [r3, #0]
  4015a6:	442b      	add	r3, r5
			|| (udd_g_ctrlreq.req.wLength <=
  4015a8:	429a      	cmp	r2, r3
  4015aa:	dddd      	ble.n	401568 <UDP_Handler+0x2a0>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
  4015ac:	4b73      	ldr	r3, [pc, #460]	; (40177c <UDP_Handler+0x4b4>)
  4015ae:	899b      	ldrh	r3, [r3, #12]
  4015b0:	42ab      	cmp	r3, r5
  4015b2:	d025      	beq.n	401600 <UDP_Handler+0x338>
	udd_ack_bank0_received(0);
  4015b4:	4a70      	ldr	r2, [pc, #448]	; (401778 <UDP_Handler+0x4b0>)
  4015b6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4015b8:	930b      	str	r3, [sp, #44]	; 0x2c
  4015ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4015bc:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4015c0:	930b      	str	r3, [sp, #44]	; 0x2c
  4015c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4015c4:	f023 0302 	bic.w	r3, r3, #2
  4015c8:	930b      	str	r3, [sp, #44]	; 0x2c
  4015ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4015cc:	6313      	str	r3, [r2, #48]	; 0x30
  4015ce:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4015d0:	f013 0f02 	tst.w	r3, #2
  4015d4:	d1fb      	bne.n	4015ce <UDP_Handler+0x306>
  4015d6:	e6c4      	b.n	401362 <UDP_Handler+0x9a>
				udd_ctrl_stall_data();
  4015d8:	4b6c      	ldr	r3, [pc, #432]	; (40178c <UDP_Handler+0x4c4>)
  4015da:	4798      	blx	r3
				udd_ack_bank0_received(0);
  4015dc:	4a66      	ldr	r2, [pc, #408]	; (401778 <UDP_Handler+0x4b0>)
  4015de:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4015e0:	9307      	str	r3, [sp, #28]
  4015e2:	9b07      	ldr	r3, [sp, #28]
  4015e4:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4015e8:	9307      	str	r3, [sp, #28]
  4015ea:	9b07      	ldr	r3, [sp, #28]
  4015ec:	f023 0302 	bic.w	r3, r3, #2
  4015f0:	9307      	str	r3, [sp, #28]
  4015f2:	9b07      	ldr	r3, [sp, #28]
  4015f4:	6313      	str	r3, [r2, #48]	; 0x30
  4015f6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4015f8:	f013 0f02 	tst.w	r3, #2
  4015fc:	d1fb      	bne.n	4015f6 <UDP_Handler+0x32e>
  4015fe:	e6b0      	b.n	401362 <UDP_Handler+0x9a>
		if (!udd_g_ctrlreq.over_under_run) {
  401600:	4b5e      	ldr	r3, [pc, #376]	; (40177c <UDP_Handler+0x4b4>)
  401602:	695b      	ldr	r3, [r3, #20]
  401604:	b153      	cbz	r3, 40161c <UDP_Handler+0x354>
		if (!udd_g_ctrlreq.over_under_run()) {
  401606:	4798      	blx	r3
  401608:	b1e8      	cbz	r0, 401646 <UDP_Handler+0x37e>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  40160a:	495f      	ldr	r1, [pc, #380]	; (401788 <UDP_Handler+0x4c0>)
  40160c:	4a5c      	ldr	r2, [pc, #368]	; (401780 <UDP_Handler+0x4b8>)
  40160e:	880b      	ldrh	r3, [r1, #0]
  401610:	8810      	ldrh	r0, [r2, #0]
  401612:	4403      	add	r3, r0
  401614:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_nb_trans = 0;
  401616:	2300      	movs	r3, #0
  401618:	8013      	strh	r3, [r2, #0]
  40161a:	e7cb      	b.n	4015b4 <UDP_Handler+0x2ec>
			udd_ctrl_stall_data();
  40161c:	4b5b      	ldr	r3, [pc, #364]	; (40178c <UDP_Handler+0x4c4>)
  40161e:	4798      	blx	r3
			udd_ack_bank0_received(0);
  401620:	4a55      	ldr	r2, [pc, #340]	; (401778 <UDP_Handler+0x4b0>)
  401622:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401624:	9309      	str	r3, [sp, #36]	; 0x24
  401626:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401628:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40162c:	9309      	str	r3, [sp, #36]	; 0x24
  40162e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401630:	f023 0302 	bic.w	r3, r3, #2
  401634:	9309      	str	r3, [sp, #36]	; 0x24
  401636:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401638:	6313      	str	r3, [r2, #48]	; 0x30
  40163a:	4613      	mov	r3, r2
  40163c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40163e:	f012 0f02 	tst.w	r2, #2
  401642:	d1fb      	bne.n	40163c <UDP_Handler+0x374>
  401644:	e68d      	b.n	401362 <UDP_Handler+0x9a>
			udd_ctrl_stall_data();
  401646:	4b51      	ldr	r3, [pc, #324]	; (40178c <UDP_Handler+0x4c4>)
  401648:	4798      	blx	r3
			udd_ack_bank0_received(0);
  40164a:	4a4b      	ldr	r2, [pc, #300]	; (401778 <UDP_Handler+0x4b0>)
  40164c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40164e:	930a      	str	r3, [sp, #40]	; 0x28
  401650:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401652:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401656:	930a      	str	r3, [sp, #40]	; 0x28
  401658:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40165a:	f023 0302 	bic.w	r3, r3, #2
  40165e:	930a      	str	r3, [sp, #40]	; 0x28
  401660:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401662:	6313      	str	r3, [r2, #48]	; 0x30
  401664:	4613      	mov	r3, r2
  401666:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401668:	f012 0f02 	tst.w	r2, #2
  40166c:	d1fb      	bne.n	401666 <UDP_Handler+0x39e>
  40166e:	e678      	b.n	401362 <UDP_Handler+0x9a>
  401670:	4a47      	ldr	r2, [pc, #284]	; (401790 <UDP_Handler+0x4c8>)
	for (i = 0; i < nb_data; i++) {
  401672:	2301      	movs	r3, #1
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Check RXRDY and TXEMPTY event for none DMA endpoints
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  401674:	f8df e100 	ldr.w	lr, [pc, #256]	; 401778 <UDP_Handler+0x4b0>
  401678:	4618      	mov	r0, r3
  40167a:	e17f      	b.n	40197c <UDP_Handler+0x6b4>
	uint32_t pkt_size = ptr_job->size;
  40167c:	eb07 0287 	add.w	r2, r7, r7, lsl #2
  401680:	4b43      	ldr	r3, [pc, #268]	; (401790 <UDP_Handler+0x4c8>)
  401682:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  401686:	f8b3 a010 	ldrh.w	sl, [r3, #16]
  40168a:	f3ca 0a09 	ubfx	sl, sl, #0, #10
	nb_data = udd_byte_count(ep);
  40168e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401690:	f3c3 490a 	ubfx	r9, r3, #16, #11
	if (nb_data > 0) {
  401694:	f1b9 0f00 	cmp.w	r9, #0
  401698:	f000 81df 	beq.w	401a5a <UDP_Handler+0x792>
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  40169c:	4b3c      	ldr	r3, [pc, #240]	; (401790 <UDP_Handler+0x4c8>)
  40169e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  4016a2:	f8d3 e008 	ldr.w	lr, [r3, #8]
  4016a6:	68da      	ldr	r2, [r3, #12]
  4016a8:	ebae 0002 	sub.w	r0, lr, r2
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
  4016ac:	6859      	ldr	r1, [r3, #4]
		if (nb_data >= nb_remain) {
  4016ae:	4548      	cmp	r0, r9
  4016b0:	f240 81c7 	bls.w	401a42 <UDP_Handler+0x77a>
		ptr_job->buf_cnt += nb_data;
  4016b4:	eb07 0087 	add.w	r0, r7, r7, lsl #2
  4016b8:	4b35      	ldr	r3, [pc, #212]	; (401790 <UDP_Handler+0x4c8>)
  4016ba:	eb03 0380 	add.w	r3, r3, r0, lsl #2
  4016be:	eb02 0009 	add.w	r0, r2, r9
  4016c2:	60d8      	str	r0, [r3, #12]
	nb_data = udd_byte_count(ep);
  4016c4:	4648      	mov	r0, r9
	bool b_full = false, b_short;
  4016c6:	f04f 0b00 	mov.w	fp, #0
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
  4016ca:	4411      	add	r1, r2
  4016cc:	460b      	mov	r3, r1
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
  4016ce:	6d22      	ldr	r2, [r4, #80]	; 0x50
  4016d0:	f803 2b01 	strb.w	r2, [r3], #1
		for (i = 0; i < nb_data; i++) {
  4016d4:	1a5a      	subs	r2, r3, r1
  4016d6:	4282      	cmp	r2, r0
  4016d8:	d3f9      	bcc.n	4016ce <UDP_Handler+0x406>
	udd_ep_ack_out_received(ep);
  4016da:	4630      	mov	r0, r6
  4016dc:	4b2d      	ldr	r3, [pc, #180]	; (401794 <UDP_Handler+0x4cc>)
  4016de:	4798      	blx	r3
	if ((b_full || b_short) &&
  4016e0:	f1bb 0f00 	cmp.w	fp, #0
  4016e4:	f000 81bc 	beq.w	401a60 <UDP_Handler+0x798>
			!Is_udd_endpoint_stall_requested(ep)) {
  4016e8:	6b23      	ldr	r3, [r4, #48]	; 0x30
	if ((b_full || b_short) &&
  4016ea:	f013 0f20 	tst.w	r3, #32
  4016ee:	f47f ae38 	bne.w	401362 <UDP_Handler+0x9a>
		udd_disable_endpoint_interrupt(ep);
  4016f2:	4b21      	ldr	r3, [pc, #132]	; (401778 <UDP_Handler+0x4b0>)
  4016f4:	615d      	str	r5, [r3, #20]
		ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  4016f6:	4b26      	ldr	r3, [pc, #152]	; (401790 <UDP_Handler+0x4c8>)
  4016f8:	00ba      	lsls	r2, r7, #2
  4016fa:	19d1      	adds	r1, r2, r7
  4016fc:	eb03 0181 	add.w	r1, r3, r1, lsl #2
  401700:	68cb      	ldr	r3, [r1, #12]
  401702:	608b      	str	r3, [r1, #8]
		udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  401704:	4632      	mov	r2, r6
  401706:	2100      	movs	r1, #0
  401708:	4640      	mov	r0, r8
  40170a:	4b23      	ldr	r3, [pc, #140]	; (401798 <UDP_Handler+0x4d0>)
  40170c:	4798      	blx	r3
  40170e:	e628      	b.n	401362 <UDP_Handler+0x9a>
			return true;
		}
		// TXIN: packet sent
		if (Is_udd_in_sent(ep)) {

			ptr_job->bank--;
  401710:	eb07 0287 	add.w	r2, r7, r7, lsl #2
  401714:	4b1e      	ldr	r3, [pc, #120]	; (401790 <UDP_Handler+0x4c8>)
  401716:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  40171a:	7c53      	ldrb	r3, [r2, #17]
  40171c:	f3c3 0181 	ubfx	r1, r3, #2, #2
  401720:	3103      	adds	r1, #3
  401722:	f361 0383 	bfi	r3, r1, #2, #2
  401726:	7453      	strb	r3, [r2, #17]
			// Stall when all banks free
			if (ptr_job->b_stall_requested) {
  401728:	7c53      	ldrb	r3, [r2, #17]
  40172a:	f013 0f20 	tst.w	r3, #32
  40172e:	d05f      	beq.n	4017f0 <UDP_Handler+0x528>
				if (ptr_job->bank) {
  401730:	f013 0f0c 	tst.w	r3, #12
  401734:	d032      	beq.n	40179c <UDP_Handler+0x4d4>
					// Send remaining
					udd_set_transmit_ready(ep);
  401736:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401738:	930c      	str	r3, [sp, #48]	; 0x30
  40173a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40173c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401740:	930c      	str	r3, [sp, #48]	; 0x30
  401742:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401744:	f043 0310 	orr.w	r3, r3, #16
  401748:	930c      	str	r3, [sp, #48]	; 0x30
  40174a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40174c:	6323      	str	r3, [r4, #48]	; 0x30
  40174e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401750:	f013 0f10 	tst.w	r3, #16
  401754:	d0fb      	beq.n	40174e <UDP_Handler+0x486>
					udd_ack_in_sent(ep);
  401756:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401758:	930d      	str	r3, [sp, #52]	; 0x34
  40175a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40175c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401760:	930d      	str	r3, [sp, #52]	; 0x34
  401762:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  401764:	f023 0301 	bic.w	r3, r3, #1
  401768:	930d      	str	r3, [sp, #52]	; 0x34
  40176a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40176c:	6323      	str	r3, [r4, #48]	; 0x30
  40176e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401770:	f013 0f01 	tst.w	r3, #1
  401774:	d1fb      	bne.n	40176e <UDP_Handler+0x4a6>
  401776:	e5f4      	b.n	401362 <UDP_Handler+0x9a>
  401778:	40084000 	.word	0x40084000
  40177c:	2000070c 	.word	0x2000070c
  401780:	200006be 	.word	0x200006be
  401784:	00400e01 	.word	0x00400e01
  401788:	200006c0 	.word	0x200006c0
  40178c:	00400dc9 	.word	0x00400dc9
  401790:	200006c4 	.word	0x200006c4
  401794:	00401041 	.word	0x00401041
  401798:	00401001 	.word	0x00401001
				} else {
					// Ack last packet
					udd_ack_in_sent(ep);
  40179c:	6b23      	ldr	r3, [r4, #48]	; 0x30
  40179e:	930e      	str	r3, [sp, #56]	; 0x38
  4017a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4017a2:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4017a6:	930e      	str	r3, [sp, #56]	; 0x38
  4017a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4017aa:	f023 0301 	bic.w	r3, r3, #1
  4017ae:	930e      	str	r3, [sp, #56]	; 0x38
  4017b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4017b2:	6323      	str	r3, [r4, #48]	; 0x30
  4017b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4017b6:	f013 0f01 	tst.w	r3, #1
  4017ba:	d1fb      	bne.n	4017b4 <UDP_Handler+0x4ec>
					// Enable stall
					udd_enable_stall_handshake(ep);
  4017bc:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4017be:	930f      	str	r3, [sp, #60]	; 0x3c
  4017c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4017c2:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4017c6:	930f      	str	r3, [sp, #60]	; 0x3c
  4017c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4017ca:	f043 0320 	orr.w	r3, r3, #32
  4017ce:	930f      	str	r3, [sp, #60]	; 0x3c
  4017d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4017d2:	6323      	str	r3, [r4, #48]	; 0x30
  4017d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4017d6:	f013 0f20 	tst.w	r3, #32
  4017da:	d0fb      	beq.n	4017d4 <UDP_Handler+0x50c>
					// Halt executed
					ptr_job->b_stall_requested = false;
  4017dc:	eb07 0787 	add.w	r7, r7, r7, lsl #2
  4017e0:	4ba1      	ldr	r3, [pc, #644]	; (401a68 <UDP_Handler+0x7a0>)
  4017e2:	eb03 0387 	add.w	r3, r3, r7, lsl #2
  4017e6:	7c5a      	ldrb	r2, [r3, #17]
  4017e8:	f36f 1245 	bfc	r2, #5, #1
  4017ec:	745a      	strb	r2, [r3, #17]
  4017ee:	e5b8      	b.n	401362 <UDP_Handler+0x9a>
				}
				return true;
			}
			// Finish Job when buffer end
			if (ptr_job->b_buf_end) {
  4017f0:	f013 0f80 	tst.w	r3, #128	; 0x80
  4017f4:	d138      	bne.n	401868 <UDP_Handler+0x5a0>
				ptr_job->b_buf_end = false;
				ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
                udd_disable_endpoint_interrupt(ep);
                udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
			}
			if (ptr_job->buf_cnt >= ptr_job->buf_size &&
  4017f6:	eb07 0287 	add.w	r2, r7, r7, lsl #2
  4017fa:	4b9b      	ldr	r3, [pc, #620]	; (401a68 <UDP_Handler+0x7a0>)
  4017fc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  401800:	68da      	ldr	r2, [r3, #12]
  401802:	689b      	ldr	r3, [r3, #8]
  401804:	429a      	cmp	r2, r3
  401806:	d341      	bcc.n	40188c <UDP_Handler+0x5c4>
					!ptr_job->b_shortpacket &&
  401808:	eb07 0287 	add.w	r2, r7, r7, lsl #2
  40180c:	4b96      	ldr	r3, [pc, #600]	; (401a68 <UDP_Handler+0x7a0>)
  40180e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  401812:	7c5b      	ldrb	r3, [r3, #17]
  401814:	f013 0f4c 	tst.w	r3, #76	; 0x4c
  401818:	d138      	bne.n	40188c <UDP_Handler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  40181a:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40181e:	fab3 f383 	clz	r3, r3
  401822:	095b      	lsrs	r3, r3, #5
  401824:	9310      	str	r3, [sp, #64]	; 0x40
  __ASM volatile ("cpsid i" : : : "memory");
  401826:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  401828:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40182c:	2200      	movs	r2, #0
  40182e:	4b8f      	ldr	r3, [pc, #572]	; (401a6c <UDP_Handler+0x7a4>)
  401830:	701a      	strb	r2, [r3, #0]
	return flags;
  401832:	9b10      	ldr	r3, [sp, #64]	; 0x40
					ptr_job->bank == 0) {
				// All transfer done, including ZLP
				irqflags_t flags = cpu_irq_save();
				udd_disable_endpoint_interrupt(ep);
  401834:	4a8e      	ldr	r2, [pc, #568]	; (401a70 <UDP_Handler+0x7a8>)
  401836:	6155      	str	r5, [r2, #20]
	if (cpu_irq_is_enabled_flags(flags))
  401838:	b12b      	cbz	r3, 401846 <UDP_Handler+0x57e>
		cpu_irq_enable();
  40183a:	2201      	movs	r2, #1
  40183c:	4b8b      	ldr	r3, [pc, #556]	; (401a6c <UDP_Handler+0x7a4>)
  40183e:	701a      	strb	r2, [r3, #0]
  401840:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401844:	b662      	cpsie	i
				cpu_irq_restore(flags);
				// Ack last packet
				udd_ack_in_sent(ep);
  401846:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401848:	9311      	str	r3, [sp, #68]	; 0x44
  40184a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40184c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401850:	9311      	str	r3, [sp, #68]	; 0x44
  401852:	9b11      	ldr	r3, [sp, #68]	; 0x44
  401854:	f023 0301 	bic.w	r3, r3, #1
  401858:	9311      	str	r3, [sp, #68]	; 0x44
  40185a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40185c:	6323      	str	r3, [r4, #48]	; 0x30
  40185e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401860:	f013 0f01 	tst.w	r3, #1
  401864:	d1fb      	bne.n	40185e <UDP_Handler+0x596>
  401866:	e57c      	b.n	401362 <UDP_Handler+0x9a>
				ptr_job->b_buf_end = false;
  401868:	2314      	movs	r3, #20
  40186a:	4a7f      	ldr	r2, [pc, #508]	; (401a68 <UDP_Handler+0x7a0>)
  40186c:	fb03 2307 	mla	r3, r3, r7, r2
  401870:	7c59      	ldrb	r1, [r3, #17]
  401872:	f36f 11c7 	bfc	r1, #7, #1
  401876:	7459      	strb	r1, [r3, #17]
				ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  401878:	68da      	ldr	r2, [r3, #12]
  40187a:	609a      	str	r2, [r3, #8]
                udd_disable_endpoint_interrupt(ep);
  40187c:	4b7c      	ldr	r3, [pc, #496]	; (401a70 <UDP_Handler+0x7a8>)
  40187e:	615d      	str	r5, [r3, #20]
                udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  401880:	4632      	mov	r2, r6
  401882:	2100      	movs	r1, #0
  401884:	4640      	mov	r0, r8
  401886:	4b7b      	ldr	r3, [pc, #492]	; (401a74 <UDP_Handler+0x7ac>)
  401888:	4798      	blx	r3
  40188a:	e7b4      	b.n	4017f6 <UDP_Handler+0x52e>
				return true;
			} else if (udd_get_endpoint_bank_max_nbr(ep) > 1
  40188c:	2e00      	cmp	r6, #0
  40188e:	d05b      	beq.n	401948 <UDP_Handler+0x680>
  401890:	2e03      	cmp	r6, #3
  401892:	d059      	beq.n	401948 <UDP_Handler+0x680>
					&& ptr_job->bank > 0) {
  401894:	eb07 0287 	add.w	r2, r7, r7, lsl #2
  401898:	4b73      	ldr	r3, [pc, #460]	; (401a68 <UDP_Handler+0x7a0>)
  40189a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  40189e:	7c5b      	ldrb	r3, [r3, #17]
  4018a0:	f013 0f0c 	tst.w	r3, #12
  4018a4:	d024      	beq.n	4018f0 <UDP_Handler+0x628>
				// Already banks buffered, transmit while loading
				udd_set_transmit_ready(ep);
  4018a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4018a8:	9312      	str	r3, [sp, #72]	; 0x48
  4018aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4018ac:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4018b0:	9312      	str	r3, [sp, #72]	; 0x48
  4018b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4018b4:	f043 0310 	orr.w	r3, r3, #16
  4018b8:	9312      	str	r3, [sp, #72]	; 0x48
  4018ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4018bc:	6323      	str	r3, [r4, #48]	; 0x30
  4018be:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4018c0:	f013 0f10 	tst.w	r3, #16
  4018c4:	d0fb      	beq.n	4018be <UDP_Handler+0x5f6>
				udd_ack_in_sent(ep);
  4018c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4018c8:	9313      	str	r3, [sp, #76]	; 0x4c
  4018ca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4018cc:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4018d0:	9313      	str	r3, [sp, #76]	; 0x4c
  4018d2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4018d4:	f023 0301 	bic.w	r3, r3, #1
  4018d8:	9313      	str	r3, [sp, #76]	; 0x4c
  4018da:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4018dc:	6323      	str	r3, [r4, #48]	; 0x30
  4018de:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4018e0:	f013 0f01 	tst.w	r3, #1
  4018e4:	d1fb      	bne.n	4018de <UDP_Handler+0x616>
				udd_ep_in_sent(ep, false);
  4018e6:	2100      	movs	r1, #0
  4018e8:	4630      	mov	r0, r6
  4018ea:	4b63      	ldr	r3, [pc, #396]	; (401a78 <UDP_Handler+0x7b0>)
  4018ec:	4798      	blx	r3
  4018ee:	e538      	b.n	401362 <UDP_Handler+0x9a>
			} else if (udd_get_endpoint_bank_max_nbr(ep) > 1) {
				// Still bank free, load and transmit
				if (!udd_ep_in_sent(ep, true)) {
  4018f0:	2101      	movs	r1, #1
  4018f2:	4630      	mov	r0, r6
  4018f4:	4b60      	ldr	r3, [pc, #384]	; (401a78 <UDP_Handler+0x7b0>)
  4018f6:	4798      	blx	r3
  4018f8:	b1a0      	cbz	r0, 401924 <UDP_Handler+0x65c>
					ptr_job->b_buf_end = false;
					ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
                    udd_disable_endpoint_interrupt(ep);
                    udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
				}
				udd_ack_in_sent(ep);
  4018fa:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4018fc:	9314      	str	r3, [sp, #80]	; 0x50
  4018fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
  401900:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401904:	9314      	str	r3, [sp, #80]	; 0x50
  401906:	9b14      	ldr	r3, [sp, #80]	; 0x50
  401908:	f023 0301 	bic.w	r3, r3, #1
  40190c:	9314      	str	r3, [sp, #80]	; 0x50
  40190e:	9b14      	ldr	r3, [sp, #80]	; 0x50
  401910:	6323      	str	r3, [r4, #48]	; 0x30
  401912:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401914:	f013 0f01 	tst.w	r3, #1
  401918:	d1fb      	bne.n	401912 <UDP_Handler+0x64a>
				udd_ep_in_sent(ep, false);
  40191a:	2100      	movs	r1, #0
  40191c:	4630      	mov	r0, r6
  40191e:	4b56      	ldr	r3, [pc, #344]	; (401a78 <UDP_Handler+0x7b0>)
  401920:	4798      	blx	r3
  401922:	e51e      	b.n	401362 <UDP_Handler+0x9a>
					ptr_job->b_buf_end = false;
  401924:	2314      	movs	r3, #20
  401926:	4a50      	ldr	r2, [pc, #320]	; (401a68 <UDP_Handler+0x7a0>)
  401928:	fb03 2707 	mla	r7, r3, r7, r2
  40192c:	7c7a      	ldrb	r2, [r7, #17]
  40192e:	f36f 12c7 	bfc	r2, #7, #1
  401932:	747a      	strb	r2, [r7, #17]
					ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  401934:	68fb      	ldr	r3, [r7, #12]
  401936:	60bb      	str	r3, [r7, #8]
                    udd_disable_endpoint_interrupt(ep);
  401938:	4b4d      	ldr	r3, [pc, #308]	; (401a70 <UDP_Handler+0x7a8>)
  40193a:	615d      	str	r5, [r3, #20]
                    udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  40193c:	4632      	mov	r2, r6
  40193e:	2100      	movs	r1, #0
  401940:	4640      	mov	r0, r8
  401942:	4b4c      	ldr	r3, [pc, #304]	; (401a74 <UDP_Handler+0x7ac>)
  401944:	4798      	blx	r3
  401946:	e7d8      	b.n	4018fa <UDP_Handler+0x632>
			} else {
				// Single bank transfer, ack when ready
				udd_ep_in_sent(ep, true);
  401948:	2101      	movs	r1, #1
  40194a:	4630      	mov	r0, r6
  40194c:	4b4a      	ldr	r3, [pc, #296]	; (401a78 <UDP_Handler+0x7b0>)
  40194e:	4798      	blx	r3
				udd_ack_in_sent(ep);
  401950:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401952:	9315      	str	r3, [sp, #84]	; 0x54
  401954:	9b15      	ldr	r3, [sp, #84]	; 0x54
  401956:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40195a:	9315      	str	r3, [sp, #84]	; 0x54
  40195c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40195e:	f023 0301 	bic.w	r3, r3, #1
  401962:	9315      	str	r3, [sp, #84]	; 0x54
  401964:	9b15      	ldr	r3, [sp, #84]	; 0x54
  401966:	6323      	str	r3, [r4, #48]	; 0x30
  401968:	6b23      	ldr	r3, [r4, #48]	; 0x30
  40196a:	f013 0f01 	tst.w	r3, #1
  40196e:	d1fb      	bne.n	401968 <UDP_Handler+0x6a0>
  401970:	e4f7      	b.n	401362 <UDP_Handler+0x9a>
  401972:	3301      	adds	r3, #1
  401974:	3214      	adds	r2, #20
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
  401976:	2b04      	cmp	r3, #4
  401978:	f000 8086 	beq.w	401a88 <UDP_Handler+0x7c0>
  40197c:	b2de      	uxtb	r6, r3
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  40197e:	f8de 1018 	ldr.w	r1, [lr, #24]
  401982:	fa00 f503 	lsl.w	r5, r0, r3
  401986:	4229      	tst	r1, r5
  401988:	d0f3      	beq.n	401972 <UDP_Handler+0x6aa>
  40198a:	1e5f      	subs	r7, r3, #1
		ptr_job = &udd_ep_job[ep - 1];
  40198c:	4690      	mov	r8, r2
  40198e:	009c      	lsls	r4, r3, #2
  401990:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
  401994:	f504 2400 	add.w	r4, r4, #524288	; 0x80000
		if (Is_udd_any_bank_received(ep)) {
  401998:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40199a:	f011 0f42 	tst.w	r1, #66	; 0x42
  40199e:	f47f ae6d 	bne.w	40167c <UDP_Handler+0x3b4>
		if (Is_udd_in_sent(ep)) {
  4019a2:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4019a4:	f011 0f01 	tst.w	r1, #1
  4019a8:	f47f aeb2 	bne.w	401710 <UDP_Handler+0x448>
			}
			return true;
		}
		// Stall sent/CRC error
		if (Is_udd_stall(ep)) {
  4019ac:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4019ae:	f011 0f08 	tst.w	r1, #8
  4019b2:	d0de      	beq.n	401972 <UDP_Handler+0x6aa>
			udd_ack_stall(ep);
  4019b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4019b6:	9316      	str	r3, [sp, #88]	; 0x58
  4019b8:	9b16      	ldr	r3, [sp, #88]	; 0x58
  4019ba:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4019be:	9316      	str	r3, [sp, #88]	; 0x58
  4019c0:	9b16      	ldr	r3, [sp, #88]	; 0x58
  4019c2:	f023 0308 	bic.w	r3, r3, #8
  4019c6:	9316      	str	r3, [sp, #88]	; 0x58
  4019c8:	9b16      	ldr	r3, [sp, #88]	; 0x58
  4019ca:	6323      	str	r3, [r4, #48]	; 0x30
  4019cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4019ce:	f013 0f08 	tst.w	r3, #8
  4019d2:	d1fb      	bne.n	4019cc <UDP_Handler+0x704>
			if (udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_OUT ||
  4019d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4019d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  4019da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  4019de:	f43f acc0 	beq.w	401362 <UDP_Handler+0x9a>
				udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_IN) {
  4019e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4019e4:	e4bd      	b.n	401362 <UDP_Handler+0x9a>
	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  4019e6:	4b22      	ldr	r3, [pc, #136]	; (401a70 <UDP_Handler+0x7a8>)
  4019e8:	69db      	ldr	r3, [r3, #28]
  4019ea:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  4019ee:	d050      	beq.n	401a92 <UDP_Handler+0x7ca>
		udd_ack_wakeups();
  4019f0:	4c1f      	ldr	r4, [pc, #124]	; (401a70 <UDP_Handler+0x7a8>)
  4019f2:	f44f 5318 	mov.w	r3, #9728	; 0x2600
  4019f6:	6223      	str	r3, [r4, #32]
		udd_disable_wakeups();
  4019f8:	6163      	str	r3, [r4, #20]
		udd_sleep_mode(true); // Enter in IDLE mode
  4019fa:	2001      	movs	r0, #1
  4019fc:	4b1f      	ldr	r3, [pc, #124]	; (401a7c <UDP_Handler+0x7b4>)
  4019fe:	4798      	blx	r3
		udd_ack_suspend();
  401a00:	f44f 7380 	mov.w	r3, #256	; 0x100
  401a04:	6223      	str	r3, [r4, #32]
		udd_enable_suspend_interrupt();
  401a06:	6123      	str	r3, [r4, #16]
		udd_enable_sof_interrupt();
  401a08:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401a0c:	6123      	str	r3, [r4, #16]
		goto udd_interrupt_end;
  401a0e:	e4a8      	b.n	401362 <UDP_Handler+0x9a>
		udd_ack_suspend();
  401a10:	4b17      	ldr	r3, [pc, #92]	; (401a70 <UDP_Handler+0x7a8>)
  401a12:	f44f 7280 	mov.w	r2, #256	; 0x100
  401a16:	621a      	str	r2, [r3, #32]
		udd_disable_suspend_interrupt();
  401a18:	615a      	str	r2, [r3, #20]
		udd_enable_wake_up_interrupt();
  401a1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  401a1e:	611a      	str	r2, [r3, #16]
		udd_enable_resume_interrupt();
  401a20:	f44f 7200 	mov.w	r2, #512	; 0x200
  401a24:	611a      	str	r2, [r3, #16]
		udd_enable_ext_resume_interrupt();
  401a26:	f44f 6280 	mov.w	r2, #1024	; 0x400
  401a2a:	611a      	str	r2, [r3, #16]
		udd_disable_periph_ck();
  401a2c:	2023      	movs	r0, #35	; 0x23
  401a2e:	4b14      	ldr	r3, [pc, #80]	; (401a80 <UDP_Handler+0x7b8>)
  401a30:	4798      	blx	r3
		udd_sleep_mode(false); // Enter in SUSPEND mode
  401a32:	2000      	movs	r0, #0
  401a34:	4b11      	ldr	r3, [pc, #68]	; (401a7c <UDP_Handler+0x7b4>)
  401a36:	4798      	blx	r3
		goto udd_interrupt_end;
  401a38:	e493      	b.n	401362 <UDP_Handler+0x9a>
	udd_ep_ack_out_received(ep);
  401a3a:	4630      	mov	r0, r6
  401a3c:	4b11      	ldr	r3, [pc, #68]	; (401a84 <UDP_Handler+0x7bc>)
  401a3e:	4798      	blx	r3
  401a40:	e652      	b.n	4016e8 <UDP_Handler+0x420>
		ptr_job->buf_cnt += nb_data;
  401a42:	eb07 0c87 	add.w	ip, r7, r7, lsl #2
  401a46:	4b08      	ldr	r3, [pc, #32]	; (401a68 <UDP_Handler+0x7a0>)
  401a48:	eb03 038c 	add.w	r3, r3, ip, lsl #2
  401a4c:	f8c3 e00c 	str.w	lr, [r3, #12]
		for (i = 0; i < nb_data; i++) {
  401a50:	2800      	cmp	r0, #0
  401a52:	d0f2      	beq.n	401a3a <UDP_Handler+0x772>
			b_full = true;
  401a54:	f04f 0b01 	mov.w	fp, #1
  401a58:	e637      	b.n	4016ca <UDP_Handler+0x402>
	udd_ep_ack_out_received(ep);
  401a5a:	4630      	mov	r0, r6
  401a5c:	4b09      	ldr	r3, [pc, #36]	; (401a84 <UDP_Handler+0x7bc>)
  401a5e:	4798      	blx	r3
	if ((b_full || b_short) &&
  401a60:	45ca      	cmp	sl, r9
  401a62:	f63f ae41 	bhi.w	4016e8 <UDP_Handler+0x420>
  401a66:	e47c      	b.n	401362 <UDP_Handler+0x9a>
  401a68:	200006c4 	.word	0x200006c4
  401a6c:	200000a0 	.word	0x200000a0
  401a70:	40084000 	.word	0x40084000
  401a74:	00401001 	.word	0x00401001
  401a78:	00401115 	.word	0x00401115
  401a7c:	00400d0d 	.word	0x00400d0d
  401a80:	00402349 	.word	0x00402349
  401a84:	00401041 	.word	0x00401041
	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  401a88:	4b4b      	ldr	r3, [pc, #300]	; (401bb8 <UDP_Handler+0x8f0>)
  401a8a:	699b      	ldr	r3, [r3, #24]
  401a8c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  401a90:	d1a9      	bne.n	4019e6 <UDP_Handler+0x71e>
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  401a92:	4b49      	ldr	r3, [pc, #292]	; (401bb8 <UDP_Handler+0x8f0>)
  401a94:	699b      	ldr	r3, [r3, #24]
	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  401a96:	f413 7f00 	tst.w	r3, #512	; 0x200
  401a9a:	d004      	beq.n	401aa6 <UDP_Handler+0x7de>
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  401a9c:	4b46      	ldr	r3, [pc, #280]	; (401bb8 <UDP_Handler+0x8f0>)
  401a9e:	69db      	ldr	r3, [r3, #28]
  401aa0:	f413 7f00 	tst.w	r3, #512	; 0x200
  401aa4:	d1a4      	bne.n	4019f0 <UDP_Handler+0x728>
		(Is_udd_ext_resume_interrupt_enabled() && Is_udd_ext_resume())) {
  401aa6:	4b44      	ldr	r3, [pc, #272]	; (401bb8 <UDP_Handler+0x8f0>)
  401aa8:	699b      	ldr	r3, [r3, #24]
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  401aaa:	f413 6f80 	tst.w	r3, #1024	; 0x400
  401aae:	d004      	beq.n	401aba <UDP_Handler+0x7f2>
		(Is_udd_ext_resume_interrupt_enabled() && Is_udd_ext_resume())) {
  401ab0:	4b41      	ldr	r3, [pc, #260]	; (401bb8 <UDP_Handler+0x8f0>)
  401ab2:	69db      	ldr	r3, [r3, #28]
  401ab4:	f413 6f80 	tst.w	r3, #1024	; 0x400
  401ab8:	d19a      	bne.n	4019f0 <UDP_Handler+0x728>
	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
  401aba:	4b3f      	ldr	r3, [pc, #252]	; (401bb8 <UDP_Handler+0x8f0>)
  401abc:	699b      	ldr	r3, [r3, #24]
  401abe:	f413 7f80 	tst.w	r3, #256	; 0x100
  401ac2:	d004      	beq.n	401ace <UDP_Handler+0x806>
  401ac4:	4b3c      	ldr	r3, [pc, #240]	; (401bb8 <UDP_Handler+0x8f0>)
  401ac6:	69db      	ldr	r3, [r3, #28]
  401ac8:	f413 7f80 	tst.w	r3, #256	; 0x100
  401acc:	d1a0      	bne.n	401a10 <UDP_Handler+0x748>
	if (Is_udd_reset()) {
  401ace:	4b3a      	ldr	r3, [pc, #232]	; (401bb8 <UDP_Handler+0x8f0>)
  401ad0:	69db      	ldr	r3, [r3, #28]
  401ad2:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  401ad6:	f43f ac44 	beq.w	401362 <UDP_Handler+0x9a>
		udd_ack_reset();
  401ada:	4c37      	ldr	r4, [pc, #220]	; (401bb8 <UDP_Handler+0x8f0>)
  401adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401ae0:	6223      	str	r3, [r4, #32]
		udd_ep_finish_job(&udd_ep_job[i], UDD_EP_TRANSFER_ABORT, i + 1);
  401ae2:	4e36      	ldr	r6, [pc, #216]	; (401bbc <UDP_Handler+0x8f4>)
  401ae4:	2201      	movs	r2, #1
  401ae6:	4611      	mov	r1, r2
  401ae8:	4630      	mov	r0, r6
  401aea:	4d35      	ldr	r5, [pc, #212]	; (401bc0 <UDP_Handler+0x8f8>)
  401aec:	47a8      	blx	r5
  401aee:	2202      	movs	r2, #2
  401af0:	2101      	movs	r1, #1
  401af2:	f106 0014 	add.w	r0, r6, #20
  401af6:	47a8      	blx	r5
  401af8:	2203      	movs	r2, #3
  401afa:	2101      	movs	r1, #1
  401afc:	f106 0028 	add.w	r0, r6, #40	; 0x28
  401b00:	47a8      	blx	r5
		udc_reset();
  401b02:	4b30      	ldr	r3, [pc, #192]	; (401bc4 <UDP_Handler+0x8fc>)
  401b04:	4798      	blx	r3
		udd_disable_address_state();
  401b06:	6863      	ldr	r3, [r4, #4]
  401b08:	f023 0301 	bic.w	r3, r3, #1
  401b0c:	6063      	str	r3, [r4, #4]
		udd_disable_configured_state();
  401b0e:	6863      	ldr	r3, [r4, #4]
  401b10:	f023 0302 	bic.w	r3, r3, #2
  401b14:	6063      	str	r3, [r4, #4]
	udd_enable_address();
  401b16:	68a3      	ldr	r3, [r4, #8]
  401b18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  401b1c:	60a3      	str	r3, [r4, #8]
	udd_configure_address(0);
  401b1e:	68a3      	ldr	r3, [r4, #8]
  401b20:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401b24:	60a3      	str	r3, [r4, #8]
	udd_configure_endpoint(0, USB_EP_TYPE_CONTROL, 0);
  401b26:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401b28:	9318      	str	r3, [sp, #96]	; 0x60
  401b2a:	9b18      	ldr	r3, [sp, #96]	; 0x60
  401b2c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401b30:	9318      	str	r3, [sp, #96]	; 0x60
  401b32:	9b18      	ldr	r3, [sp, #96]	; 0x60
  401b34:	f423 4307 	bic.w	r3, r3, #34560	; 0x8700
  401b38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  401b3c:	9318      	str	r3, [sp, #96]	; 0x60
  401b3e:	9b18      	ldr	r3, [sp, #96]	; 0x60
  401b40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  401b44:	9318      	str	r3, [sp, #96]	; 0x60
  401b46:	9b18      	ldr	r3, [sp, #96]	; 0x60
  401b48:	6323      	str	r3, [r4, #48]	; 0x30
  401b4a:	4622      	mov	r2, r4
  401b4c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401b4e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  401b52:	d0fb      	beq.n	401b4c <UDP_Handler+0x884>
	udd_enable_endpoint(0);
  401b54:	4a18      	ldr	r2, [pc, #96]	; (401bb8 <UDP_Handler+0x8f0>)
  401b56:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401b58:	9319      	str	r3, [sp, #100]	; 0x64
  401b5a:	9b19      	ldr	r3, [sp, #100]	; 0x64
  401b5c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401b60:	9319      	str	r3, [sp, #100]	; 0x64
  401b62:	9b19      	ldr	r3, [sp, #100]	; 0x64
  401b64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  401b68:	9319      	str	r3, [sp, #100]	; 0x64
  401b6a:	9b19      	ldr	r3, [sp, #100]	; 0x64
  401b6c:	6313      	str	r3, [r2, #48]	; 0x30
  401b6e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401b70:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  401b74:	d0fb      	beq.n	401b6e <UDP_Handler+0x8a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  401b76:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401b7a:	fab3 f383 	clz	r3, r3
  401b7e:	095b      	lsrs	r3, r3, #5
  401b80:	9317      	str	r3, [sp, #92]	; 0x5c
  __ASM volatile ("cpsid i" : : : "memory");
  401b82:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  401b84:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401b88:	2200      	movs	r2, #0
  401b8a:	4b0f      	ldr	r3, [pc, #60]	; (401bc8 <UDP_Handler+0x900>)
  401b8c:	701a      	strb	r2, [r3, #0]
	return flags;
  401b8e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
	udd_enable_endpoint_interrupt(0);
  401b90:	2101      	movs	r1, #1
  401b92:	4a09      	ldr	r2, [pc, #36]	; (401bb8 <UDP_Handler+0x8f0>)
  401b94:	6111      	str	r1, [r2, #16]
	if (cpu_irq_is_enabled_flags(flags))
  401b96:	b123      	cbz	r3, 401ba2 <UDP_Handler+0x8da>
		cpu_irq_enable();
  401b98:	4b0b      	ldr	r3, [pc, #44]	; (401bc8 <UDP_Handler+0x900>)
  401b9a:	7019      	strb	r1, [r3, #0]
  401b9c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401ba0:	b662      	cpsie	i
		udd_ctrl_init();
  401ba2:	4b0a      	ldr	r3, [pc, #40]	; (401bcc <UDP_Handler+0x904>)
  401ba4:	4798      	blx	r3
		udd_enable_suspend_interrupt();
  401ba6:	4b04      	ldr	r3, [pc, #16]	; (401bb8 <UDP_Handler+0x8f0>)
  401ba8:	f44f 7280 	mov.w	r2, #256	; 0x100
  401bac:	611a      	str	r2, [r3, #16]
		udd_enable_sof_interrupt();
  401bae:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401bb2:	611a      	str	r2, [r3, #16]
		goto udd_interrupt_end;
  401bb4:	f7ff bbd5 	b.w	401362 <UDP_Handler+0x9a>
  401bb8:	40084000 	.word	0x40084000
  401bbc:	200006c4 	.word	0x200006c4
  401bc0:	00401001 	.word	0x00401001
  401bc4:	004007a9 	.word	0x004007a9
  401bc8:	200000a0 	.word	0x200000a0
  401bcc:	00400db1 	.word	0x00400db1

00401bd0 <udd_is_high_speed>:
}
  401bd0:	2000      	movs	r0, #0
  401bd2:	4770      	bx	lr

00401bd4 <udd_set_address>:
	udd_disable_address_state();
  401bd4:	4b0d      	ldr	r3, [pc, #52]	; (401c0c <udd_set_address+0x38>)
  401bd6:	685a      	ldr	r2, [r3, #4]
  401bd8:	f022 0201 	bic.w	r2, r2, #1
  401bdc:	605a      	str	r2, [r3, #4]
	udd_disable_address();
  401bde:	689a      	ldr	r2, [r3, #8]
  401be0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  401be4:	609a      	str	r2, [r3, #8]
	if (address) {
  401be6:	4602      	mov	r2, r0
  401be8:	b170      	cbz	r0, 401c08 <udd_set_address+0x34>
		udd_configure_address(address);
  401bea:	6898      	ldr	r0, [r3, #8]
  401bec:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
  401bf0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
  401bf4:	4310      	orrs	r0, r2
  401bf6:	6098      	str	r0, [r3, #8]
		udd_enable_address();
  401bf8:	689a      	ldr	r2, [r3, #8]
  401bfa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  401bfe:	609a      	str	r2, [r3, #8]
		udd_enable_address_state();
  401c00:	685a      	ldr	r2, [r3, #4]
  401c02:	f042 0201 	orr.w	r2, r2, #1
  401c06:	605a      	str	r2, [r3, #4]
  401c08:	4770      	bx	lr
  401c0a:	bf00      	nop
  401c0c:	40084000 	.word	0x40084000

00401c10 <udd_getaddress>:
	if (Is_udd_address_state_enabled())
  401c10:	4b05      	ldr	r3, [pc, #20]	; (401c28 <udd_getaddress+0x18>)
  401c12:	685b      	ldr	r3, [r3, #4]
  401c14:	f013 0f01 	tst.w	r3, #1
		return udd_get_configured_address();
  401c18:	bf1d      	ittte	ne
  401c1a:	4b03      	ldrne	r3, [pc, #12]	; (401c28 <udd_getaddress+0x18>)
  401c1c:	6898      	ldrne	r0, [r3, #8]
  401c1e:	f000 007f 	andne.w	r0, r0, #127	; 0x7f
	return 0;
  401c22:	2000      	moveq	r0, #0
}
  401c24:	4770      	bx	lr
  401c26:	bf00      	nop
  401c28:	40084000 	.word	0x40084000

00401c2c <udd_get_frame_number>:
	return udd_frame_number();
  401c2c:	4b02      	ldr	r3, [pc, #8]	; (401c38 <udd_get_frame_number+0xc>)
  401c2e:	6818      	ldr	r0, [r3, #0]
}
  401c30:	f3c0 000a 	ubfx	r0, r0, #0, #11
  401c34:	4770      	bx	lr
  401c36:	bf00      	nop
  401c38:	40084000 	.word	0x40084000

00401c3c <udd_get_micro_frame_number>:
}
  401c3c:	2000      	movs	r0, #0
  401c3e:	4770      	bx	lr

00401c40 <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
  401c40:	4b01      	ldr	r3, [pc, #4]	; (401c48 <udd_set_setup_payload+0x8>)
  401c42:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
  401c44:	8199      	strh	r1, [r3, #12]
  401c46:	4770      	bx	lr
  401c48:	2000070c 	.word	0x2000070c

00401c4c <udd_ep_alloc>:
{
  401c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
  401c4e:	b083      	sub	sp, #12
	ep = ep & USB_EP_ADDR_MASK;
  401c50:	f000 040f 	and.w	r4, r0, #15
	if (ep > USB_DEVICE_MAX_EP) {
  401c54:	2c03      	cmp	r4, #3
  401c56:	d867      	bhi.n	401d28 <udd_ep_alloc+0xdc>
  401c58:	00a3      	lsls	r3, r4, #2
  401c5a:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  401c5e:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
	if (Is_udd_endpoint_enabled(ep)) {
  401c62:	6b1d      	ldr	r5, [r3, #48]	; 0x30
  401c64:	f415 4f00 	tst.w	r5, #32768	; 0x8000
  401c68:	d161      	bne.n	401d2e <udd_ep_alloc+0xe2>
	if (b_iso && (!udd_is_endpoint_support_iso(ep))) {
  401c6a:	f001 0503 	and.w	r5, r1, #3
  401c6e:	2d01      	cmp	r5, #1
  401c70:	d050      	beq.n	401d14 <udd_ep_alloc+0xc8>
	if (MaxEndpointSize > udd_get_endpoint_size_max(ep)) {
  401c72:	1f25      	subs	r5, r4, #4
  401c74:	b2ed      	uxtb	r5, r5
  401c76:	2d02      	cmp	r5, #2
  401c78:	bf34      	ite	cc
  401c7a:	f44f 7500 	movcc.w	r5, #512	; 0x200
  401c7e:	2540      	movcs	r5, #64	; 0x40
  401c80:	4295      	cmp	r5, r2
  401c82:	db58      	blt.n	401d36 <udd_ep_alloc+0xea>
  401c84:	b240      	sxtb	r0, r0
	ptr_job = &udd_ep_job[ep - 1];
  401c86:	1e66      	subs	r6, r4, #1
	ptr_job->size = MaxEndpointSize;
  401c88:	eb06 0786 	add.w	r7, r6, r6, lsl #2
  401c8c:	4d2b      	ldr	r5, [pc, #172]	; (401d3c <udd_ep_alloc+0xf0>)
  401c8e:	eb05 0587 	add.w	r5, r5, r7, lsl #2
  401c92:	f105 0710 	add.w	r7, r5, #16
  401c96:	f8b5 e010 	ldrh.w	lr, [r5, #16]
  401c9a:	f362 0e09 	bfi	lr, r2, #0, #10
  401c9e:	f8a5 e010 	strh.w	lr, [r5, #16]
	ptr_job->b_buf_end = false;
  401ca2:	7c6a      	ldrb	r2, [r5, #17]
	ptr_job->b_stall_requested = false;
  401ca4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
  401ca8:	f36f 1245 	bfc	r2, #5, #1
  401cac:	746a      	strb	r2, [r5, #17]
	if (b_dir_in) {
  401cae:	2800      	cmp	r0, #0
  401cb0:	db35      	blt.n	401d1e <udd_ep_alloc+0xd2>
	udd_reset_endpoint(ep);
  401cb2:	4e23      	ldr	r6, [pc, #140]	; (401d40 <udd_ep_alloc+0xf4>)
  401cb4:	6ab5      	ldr	r5, [r6, #40]	; 0x28
  401cb6:	2201      	movs	r2, #1
  401cb8:	fa02 f404 	lsl.w	r4, r2, r4
  401cbc:	4325      	orrs	r5, r4
  401cbe:	62b5      	str	r5, [r6, #40]	; 0x28
  401cc0:	4635      	mov	r5, r6
  401cc2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  401cc4:	4214      	tst	r4, r2
  401cc6:	d0fc      	beq.n	401cc2 <udd_ep_alloc+0x76>
  401cc8:	4d1d      	ldr	r5, [pc, #116]	; (401d40 <udd_ep_alloc+0xf4>)
  401cca:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  401ccc:	ea22 0404 	bic.w	r4, r2, r4
  401cd0:	62ac      	str	r4, [r5, #40]	; 0x28
	udd_configure_endpoint(ep,
  401cd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401cd4:	9201      	str	r2, [sp, #4]
  401cd6:	9a01      	ldr	r2, [sp, #4]
  401cd8:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401cdc:	9201      	str	r2, [sp, #4]
  401cde:	9a01      	ldr	r2, [sp, #4]
  401ce0:	f422 4207 	bic.w	r2, r2, #34560	; 0x8700
  401ce4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  401ce8:	9201      	str	r2, [sp, #4]
  401cea:	2800      	cmp	r0, #0
  401cec:	ea4f 2201 	mov.w	r2, r1, lsl #8
  401cf0:	f402 7240 	and.w	r2, r2, #768	; 0x300
  401cf4:	bfb4      	ite	lt
  401cf6:	f442 4204 	orrlt.w	r2, r2, #33792	; 0x8400
  401cfa:	f442 4200 	orrge.w	r2, r2, #32768	; 0x8000
  401cfe:	9901      	ldr	r1, [sp, #4]
  401d00:	4311      	orrs	r1, r2
  401d02:	9101      	str	r1, [sp, #4]
  401d04:	9901      	ldr	r1, [sp, #4]
  401d06:	6319      	str	r1, [r3, #48]	; 0x30
  401d08:	6b19      	ldr	r1, [r3, #48]	; 0x30
  401d0a:	ea32 0101 	bics.w	r1, r2, r1
  401d0e:	d1fb      	bne.n	401d08 <udd_ep_alloc+0xbc>
	return true;
  401d10:	2001      	movs	r0, #1
  401d12:	e00a      	b.n	401d2a <udd_ep_alloc+0xde>
	if (b_iso && (!udd_is_endpoint_support_iso(ep))) {
  401d14:	b16c      	cbz	r4, 401d32 <udd_ep_alloc+0xe6>
  401d16:	2c03      	cmp	r4, #3
  401d18:	d1ab      	bne.n	401c72 <udd_ep_alloc+0x26>
		return false;
  401d1a:	2000      	movs	r0, #0
  401d1c:	e005      	b.n	401d2a <udd_ep_alloc+0xde>
		ptr_job->bank = 0;
  401d1e:	787a      	ldrb	r2, [r7, #1]
  401d20:	f36f 0283 	bfc	r2, #2, #2
  401d24:	707a      	strb	r2, [r7, #1]
  401d26:	e7c4      	b.n	401cb2 <udd_ep_alloc+0x66>
		return false;
  401d28:	2000      	movs	r0, #0
}
  401d2a:	b003      	add	sp, #12
  401d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false;
  401d2e:	2000      	movs	r0, #0
  401d30:	e7fb      	b.n	401d2a <udd_ep_alloc+0xde>
		return false;
  401d32:	2000      	movs	r0, #0
  401d34:	e7f9      	b.n	401d2a <udd_ep_alloc+0xde>
		return false;
  401d36:	2000      	movs	r0, #0
  401d38:	e7f7      	b.n	401d2a <udd_ep_alloc+0xde>
  401d3a:	bf00      	nop
  401d3c:	200006c4 	.word	0x200006c4
  401d40:	40084000 	.word	0x40084000

00401d44 <udd_ep_free>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  401d44:	f000 020f 	and.w	r2, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
  401d48:	2a03      	cmp	r2, #3
  401d4a:	d822      	bhi.n	401d92 <udd_ep_free+0x4e>
{
  401d4c:	b500      	push	{lr}
  401d4e:	b083      	sub	sp, #12
  401d50:	0091      	lsls	r1, r2, #2
  401d52:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
  401d56:	f501 2100 	add.w	r1, r1, #524288	; 0x80000
	udd_disable_endpoint(ep_index);
  401d5a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  401d5c:	9301      	str	r3, [sp, #4]
  401d5e:	9b01      	ldr	r3, [sp, #4]
  401d60:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401d64:	9301      	str	r3, [sp, #4]
  401d66:	9b01      	ldr	r3, [sp, #4]
  401d68:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
  401d6c:	9301      	str	r3, [sp, #4]
  401d6e:	9b01      	ldr	r3, [sp, #4]
  401d70:	630b      	str	r3, [r1, #48]	; 0x30
  401d72:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  401d74:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  401d78:	d1fb      	bne.n	401d72 <udd_ep_free+0x2e>
	udd_ep_finish_job(&udd_ep_job[ep - 1], UDD_EP_TRANSFER_ABORT, ep);
  401d7a:	1e50      	subs	r0, r2, #1
  401d7c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401d80:	2101      	movs	r1, #1
  401d82:	4b04      	ldr	r3, [pc, #16]	; (401d94 <udd_ep_free+0x50>)
  401d84:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401d88:	4b03      	ldr	r3, [pc, #12]	; (401d98 <udd_ep_free+0x54>)
  401d8a:	4798      	blx	r3
}
  401d8c:	b003      	add	sp, #12
  401d8e:	f85d fb04 	ldr.w	pc, [sp], #4
  401d92:	4770      	bx	lr
  401d94:	200006c4 	.word	0x200006c4
  401d98:	00401001 	.word	0x00401001

00401d9c <udd_ep_is_halted>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  401d9c:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
  401da0:	2803      	cmp	r0, #3
  401da2:	d815      	bhi.n	401dd0 <udd_ep_is_halted+0x34>
	return ptr_job->b_stall_requested ||
  401da4:	1e43      	subs	r3, r0, #1
  401da6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401daa:	4a0a      	ldr	r2, [pc, #40]	; (401dd4 <udd_ep_is_halted+0x38>)
  401dac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401db0:	7c5b      	ldrb	r3, [r3, #17]
  401db2:	f013 0f20 	tst.w	r3, #32
  401db6:	d109      	bne.n	401dcc <udd_ep_is_halted+0x30>
			Is_udd_endpoint_stall_pending(ep & USB_EP_ADDR_MASK);
  401db8:	300c      	adds	r0, #12
  401dba:	4b07      	ldr	r3, [pc, #28]	; (401dd8 <udd_ep_is_halted+0x3c>)
  401dbc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	return ptr_job->b_stall_requested ||
  401dc0:	f013 0f28 	tst.w	r3, #40	; 0x28
  401dc4:	bf14      	ite	ne
  401dc6:	2001      	movne	r0, #1
  401dc8:	2000      	moveq	r0, #0
  401dca:	4770      	bx	lr
  401dcc:	2001      	movs	r0, #1
  401dce:	4770      	bx	lr
		return false;
  401dd0:	2000      	movs	r0, #0
}
  401dd2:	4770      	bx	lr
  401dd4:	200006c4 	.word	0x200006c4
  401dd8:	40084000 	.word	0x40084000

00401ddc <udd_ep_set_halt>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  401ddc:	f000 010f 	and.w	r1, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
  401de0:	2903      	cmp	r1, #3
  401de2:	d860      	bhi.n	401ea6 <udd_ep_set_halt+0xca>
{
  401de4:	b410      	push	{r4}
  401de6:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  401de8:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401dec:	fab3 f383 	clz	r3, r3
  401df0:	095b      	lsrs	r3, r3, #5
  401df2:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  401df4:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  401df6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401dfa:	2200      	movs	r2, #0
  401dfc:	4b2d      	ldr	r3, [pc, #180]	; (401eb4 <udd_ep_set_halt+0xd8>)
  401dfe:	701a      	strb	r2, [r3, #0]
	return flags;
  401e00:	9c01      	ldr	r4, [sp, #4]
	if (b_dir_in && (Is_udd_transmit_ready(ep_index)
  401e02:	f010 0f80 	tst.w	r0, #128	; 0x80
  401e06:	d125      	bne.n	401e54 <udd_ep_set_halt+0x78>
  401e08:	008a      	lsls	r2, r1, #2
  401e0a:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  401e0e:	f502 2200 	add.w	r2, r2, #524288	; 0x80000
		udd_enable_stall_handshake(ep_index);
  401e12:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401e14:	9300      	str	r3, [sp, #0]
  401e16:	9b00      	ldr	r3, [sp, #0]
  401e18:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401e1c:	9300      	str	r3, [sp, #0]
  401e1e:	9b00      	ldr	r3, [sp, #0]
  401e20:	f043 0320 	orr.w	r3, r3, #32
  401e24:	9300      	str	r3, [sp, #0]
  401e26:	9b00      	ldr	r3, [sp, #0]
  401e28:	6313      	str	r3, [r2, #48]	; 0x30
  401e2a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401e2c:	f013 0f20 	tst.w	r3, #32
  401e30:	d0fb      	beq.n	401e2a <udd_ep_set_halt+0x4e>
		udd_enable_endpoint_interrupt(ep_index);
  401e32:	2301      	movs	r3, #1
  401e34:	fa03 f101 	lsl.w	r1, r3, r1
  401e38:	4b1f      	ldr	r3, [pc, #124]	; (401eb8 <udd_ep_set_halt+0xdc>)
  401e3a:	6119      	str	r1, [r3, #16]
	if (cpu_irq_is_enabled_flags(flags))
  401e3c:	2c00      	cmp	r4, #0
  401e3e:	d036      	beq.n	401eae <udd_ep_set_halt+0xd2>
		cpu_irq_enable();
  401e40:	2001      	movs	r0, #1
  401e42:	4b1c      	ldr	r3, [pc, #112]	; (401eb4 <udd_ep_set_halt+0xd8>)
  401e44:	7018      	strb	r0, [r3, #0]
  401e46:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401e4a:	b662      	cpsie	i
}
  401e4c:	b003      	add	sp, #12
  401e4e:	f85d 4b04 	ldr.w	r4, [sp], #4
  401e52:	4770      	bx	lr
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
  401e54:	1e4b      	subs	r3, r1, #1
	if (b_dir_in && (Is_udd_transmit_ready(ep_index)
  401e56:	f101 020c 	add.w	r2, r1, #12
  401e5a:	4817      	ldr	r0, [pc, #92]	; (401eb8 <udd_ep_set_halt+0xdc>)
  401e5c:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
  401e60:	f012 0f10 	tst.w	r2, #16
  401e64:	d109      	bne.n	401e7a <udd_ep_set_halt+0x9e>
				|| ptr_job->bank > 1)) {
  401e66:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  401e6a:	4814      	ldr	r0, [pc, #80]	; (401ebc <udd_ep_set_halt+0xe0>)
  401e6c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  401e70:	7c52      	ldrb	r2, [r2, #17]
  401e72:	f3c2 0281 	ubfx	r2, r2, #2, #2
  401e76:	2a01      	cmp	r2, #1
  401e78:	ddc6      	ble.n	401e08 <udd_ep_set_halt+0x2c>
		ptr_job->b_stall_requested = true;
  401e7a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  401e7e:	4b0f      	ldr	r3, [pc, #60]	; (401ebc <udd_ep_set_halt+0xe0>)
  401e80:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  401e84:	7c5a      	ldrb	r2, [r3, #17]
  401e86:	f042 0220 	orr.w	r2, r2, #32
  401e8a:	745a      	strb	r2, [r3, #17]
		udd_enable_endpoint_interrupt(ep_index);
  401e8c:	2301      	movs	r3, #1
  401e8e:	fa03 f101 	lsl.w	r1, r3, r1
  401e92:	4b09      	ldr	r3, [pc, #36]	; (401eb8 <udd_ep_set_halt+0xdc>)
  401e94:	6119      	str	r1, [r3, #16]
	if (cpu_irq_is_enabled_flags(flags))
  401e96:	b144      	cbz	r4, 401eaa <udd_ep_set_halt+0xce>
		cpu_irq_enable();
  401e98:	2001      	movs	r0, #1
  401e9a:	4b06      	ldr	r3, [pc, #24]	; (401eb4 <udd_ep_set_halt+0xd8>)
  401e9c:	7018      	strb	r0, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  401e9e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401ea2:	b662      	cpsie	i
  401ea4:	e7d2      	b.n	401e4c <udd_ep_set_halt+0x70>
		return false;
  401ea6:	2000      	movs	r0, #0
  401ea8:	4770      	bx	lr
		return true;
  401eaa:	2001      	movs	r0, #1
  401eac:	e7ce      	b.n	401e4c <udd_ep_set_halt+0x70>
	return true;
  401eae:	2001      	movs	r0, #1
  401eb0:	e7cc      	b.n	401e4c <udd_ep_set_halt+0x70>
  401eb2:	bf00      	nop
  401eb4:	200000a0 	.word	0x200000a0
  401eb8:	40084000 	.word	0x40084000
  401ebc:	200006c4 	.word	0x200006c4

00401ec0 <udd_ep_clear_halt>:
	ep &= USB_EP_ADDR_MASK;
  401ec0:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep)
  401ec4:	2803      	cmp	r0, #3
  401ec6:	d85e      	bhi.n	401f86 <udd_ep_clear_halt+0xc6>
{
  401ec8:	b530      	push	{r4, r5, lr}
  401eca:	b083      	sub	sp, #12
	ptr_job = &udd_ep_job[ep - 1];
  401ecc:	1e44      	subs	r4, r0, #1
	ptr_job->b_stall_requested = false;
  401ece:	eb04 0284 	add.w	r2, r4, r4, lsl #2
  401ed2:	4b2f      	ldr	r3, [pc, #188]	; (401f90 <udd_ep_clear_halt+0xd0>)
  401ed4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  401ed8:	7c5a      	ldrb	r2, [r3, #17]
  401eda:	f36f 1245 	bfc	r2, #5, #1
  401ede:	745a      	strb	r2, [r3, #17]
  401ee0:	0083      	lsls	r3, r0, #2
  401ee2:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  401ee6:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
	if (Is_udd_endpoint_stall_requested(ep)) {
  401eea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401eec:	f012 0f20 	tst.w	r2, #32
  401ef0:	d04b      	beq.n	401f8a <udd_ep_clear_halt+0xca>
		udd_disable_stall_handshake(ep);
  401ef2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401ef4:	9200      	str	r2, [sp, #0]
  401ef6:	9a00      	ldr	r2, [sp, #0]
  401ef8:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401efc:	9200      	str	r2, [sp, #0]
  401efe:	9a00      	ldr	r2, [sp, #0]
  401f00:	f022 0220 	bic.w	r2, r2, #32
  401f04:	9200      	str	r2, [sp, #0]
  401f06:	9a00      	ldr	r2, [sp, #0]
  401f08:	631a      	str	r2, [r3, #48]	; 0x30
  401f0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401f0c:	f012 0f20 	tst.w	r2, #32
  401f10:	d1fb      	bne.n	401f0a <udd_ep_clear_halt+0x4a>
		udd_reset_endpoint(ep);
  401f12:	4d20      	ldr	r5, [pc, #128]	; (401f94 <udd_ep_clear_halt+0xd4>)
  401f14:	6aa9      	ldr	r1, [r5, #40]	; 0x28
  401f16:	2201      	movs	r2, #1
  401f18:	fa02 f000 	lsl.w	r0, r2, r0
  401f1c:	4301      	orrs	r1, r0
  401f1e:	62a9      	str	r1, [r5, #40]	; 0x28
  401f20:	4629      	mov	r1, r5
  401f22:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  401f24:	4210      	tst	r0, r2
  401f26:	d0fc      	beq.n	401f22 <udd_ep_clear_halt+0x62>
  401f28:	491a      	ldr	r1, [pc, #104]	; (401f94 <udd_ep_clear_halt+0xd4>)
  401f2a:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  401f2c:	ea22 0000 	bic.w	r0, r2, r0
  401f30:	6288      	str	r0, [r1, #40]	; 0x28
		udd_ack_stall(ep);
  401f32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401f34:	9201      	str	r2, [sp, #4]
  401f36:	9a01      	ldr	r2, [sp, #4]
  401f38:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401f3c:	9201      	str	r2, [sp, #4]
  401f3e:	9a01      	ldr	r2, [sp, #4]
  401f40:	f022 0208 	bic.w	r2, r2, #8
  401f44:	9201      	str	r2, [sp, #4]
  401f46:	9a01      	ldr	r2, [sp, #4]
  401f48:	631a      	str	r2, [r3, #48]	; 0x30
  401f4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401f4c:	f012 0f08 	tst.w	r2, #8
  401f50:	d1fb      	bne.n	401f4a <udd_ep_clear_halt+0x8a>
		if (ptr_job->busy == true) {
  401f52:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  401f56:	4a0e      	ldr	r2, [pc, #56]	; (401f90 <udd_ep_clear_halt+0xd0>)
  401f58:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401f5c:	7c5b      	ldrb	r3, [r3, #17]
  401f5e:	f013 0f10 	tst.w	r3, #16
  401f62:	d101      	bne.n	401f68 <udd_ep_clear_halt+0xa8>
	return true;
  401f64:	2001      	movs	r0, #1
  401f66:	e011      	b.n	401f8c <udd_ep_clear_halt+0xcc>
			ptr_job->busy = false;
  401f68:	4611      	mov	r1, r2
  401f6a:	00a2      	lsls	r2, r4, #2
  401f6c:	1913      	adds	r3, r2, r4
  401f6e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  401f72:	7c58      	ldrb	r0, [r3, #17]
  401f74:	f36f 1004 	bfc	r0, #4, #1
  401f78:	7458      	strb	r0, [r3, #17]
			ptr_job->call_nohalt();
  401f7a:	4414      	add	r4, r2
  401f7c:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
  401f80:	4798      	blx	r3
	return true;
  401f82:	2001      	movs	r0, #1
  401f84:	e002      	b.n	401f8c <udd_ep_clear_halt+0xcc>
		return false;
  401f86:	2000      	movs	r0, #0
  401f88:	4770      	bx	lr
	return true;
  401f8a:	2001      	movs	r0, #1
}
  401f8c:	b003      	add	sp, #12
  401f8e:	bd30      	pop	{r4, r5, pc}
  401f90:	200006c4 	.word	0x200006c4
  401f94:	40084000 	.word	0x40084000

00401f98 <udd_ep_run>:
{
  401f98:	b5f0      	push	{r4, r5, r6, r7, lr}
  401f9a:	b083      	sub	sp, #12
	ep &= USB_EP_ADDR_MASK;
  401f9c:	f000 070f 	and.w	r7, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
  401fa0:	2f03      	cmp	r7, #3
  401fa2:	f200 80a2 	bhi.w	4020ea <udd_ep_run+0x152>
  401fa6:	00bc      	lsls	r4, r7, #2
  401fa8:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
  401fac:	f504 2400 	add.w	r4, r4, #524288	; 0x80000
	if ((!Is_udd_endpoint_enabled(ep))
  401fb0:	6b25      	ldr	r5, [r4, #48]	; 0x30
  401fb2:	f415 4f00 	tst.w	r5, #32768	; 0x8000
  401fb6:	f000 809b 	beq.w	4020f0 <udd_ep_run+0x158>
	ptr_job = &udd_ep_job[ep - 1];
  401fba:	1e7d      	subs	r5, r7, #1
			|| ptr_job->b_stall_requested
  401fbc:	eb05 0e85 	add.w	lr, r5, r5, lsl #2
  401fc0:	4e50      	ldr	r6, [pc, #320]	; (402104 <udd_ep_run+0x16c>)
  401fc2:	eb06 068e 	add.w	r6, r6, lr, lsl #2
  401fc6:	7c76      	ldrb	r6, [r6, #17]
  401fc8:	f016 0f20 	tst.w	r6, #32
  401fcc:	f040 8092 	bne.w	4020f4 <udd_ep_run+0x15c>
			|| Is_udd_endpoint_stall_requested(ep)) {
  401fd0:	6b26      	ldr	r6, [r4, #48]	; 0x30
  401fd2:	f016 0f20 	tst.w	r6, #32
  401fd6:	f040 808f 	bne.w	4020f8 <udd_ep_run+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  401fda:	f3ef 8610 	mrs	r6, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401fde:	fab6 f686 	clz	r6, r6
  401fe2:	0976      	lsrs	r6, r6, #5
  401fe4:	9600      	str	r6, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  401fe6:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  401fe8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401fec:	f04f 0e00 	mov.w	lr, #0
  401ff0:	4e45      	ldr	r6, [pc, #276]	; (402108 <udd_ep_run+0x170>)
  401ff2:	f886 e000 	strb.w	lr, [r6]
	return flags;
  401ff6:	f8dd c000 	ldr.w	ip, [sp]
	if (ptr_job->busy == true) {
  401ffa:	eb05 0e85 	add.w	lr, r5, r5, lsl #2
  401ffe:	4e41      	ldr	r6, [pc, #260]	; (402104 <udd_ep_run+0x16c>)
  402000:	eb06 068e 	add.w	r6, r6, lr, lsl #2
  402004:	7c76      	ldrb	r6, [r6, #17]
  402006:	f016 0f10 	tst.w	r6, #16
  40200a:	d00a      	beq.n	402022 <udd_ep_run+0x8a>
	if (cpu_irq_is_enabled_flags(flags))
  40200c:	f1bc 0f00 	cmp.w	ip, #0
  402010:	d074      	beq.n	4020fc <udd_ep_run+0x164>
		cpu_irq_enable();
  402012:	2201      	movs	r2, #1
  402014:	4b3c      	ldr	r3, [pc, #240]	; (402108 <udd_ep_run+0x170>)
  402016:	701a      	strb	r2, [r3, #0]
  402018:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40201c:	b662      	cpsie	i
		return false; // Job already on going
  40201e:	2000      	movs	r0, #0
  402020:	e064      	b.n	4020ec <udd_ep_run+0x154>
	ptr_job->busy = true;
  402022:	eb05 0e85 	add.w	lr, r5, r5, lsl #2
  402026:	4e37      	ldr	r6, [pc, #220]	; (402104 <udd_ep_run+0x16c>)
  402028:	eb06 068e 	add.w	r6, r6, lr, lsl #2
  40202c:	f896 e011 	ldrb.w	lr, [r6, #17]
  402030:	f04e 0e10 	orr.w	lr, lr, #16
  402034:	f886 e011 	strb.w	lr, [r6, #17]
	if (cpu_irq_is_enabled_flags(flags))
  402038:	f1bc 0f00 	cmp.w	ip, #0
  40203c:	d007      	beq.n	40204e <udd_ep_run+0xb6>
		cpu_irq_enable();
  40203e:	f04f 0e01 	mov.w	lr, #1
  402042:	4e31      	ldr	r6, [pc, #196]	; (402108 <udd_ep_run+0x170>)
  402044:	f886 e000 	strb.w	lr, [r6]
  __ASM volatile ("dmb 0xF":::"memory");
  402048:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40204c:	b662      	cpsie	i
	ptr_job->buf = buf;
  40204e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 402104 <udd_ep_run+0x16c>
  402052:	eb05 0685 	add.w	r6, r5, r5, lsl #2
  402056:	00b6      	lsls	r6, r6, #2
  402058:	eb0c 0e06 	add.w	lr, ip, r6
  40205c:	f8ce 2004 	str.w	r2, [lr, #4]
	ptr_job->buf_size = buf_size;
  402060:	f8ce 3008 	str.w	r3, [lr, #8]
	ptr_job->buf_cnt = 0;
  402064:	2200      	movs	r2, #0
  402066:	f8ce 200c 	str.w	r2, [lr, #12]
	ptr_job->call_trans = callback;
  40206a:	9a08      	ldr	r2, [sp, #32]
  40206c:	f84c 2006 	str.w	r2, [ip, r6]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
  402070:	b911      	cbnz	r1, 402078 <udd_ep_run+0xe0>
  402072:	fab3 f183 	clz	r1, r3
  402076:	0949      	lsrs	r1, r1, #5
  402078:	4a22      	ldr	r2, [pc, #136]	; (402104 <udd_ep_run+0x16c>)
  40207a:	00ae      	lsls	r6, r5, #2
  40207c:	1973      	adds	r3, r6, r5
  40207e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  402082:	7c5b      	ldrb	r3, [r3, #17]
  402084:	f361 1386 	bfi	r3, r1, #6, #1
	ptr_job->b_buf_end = false;
  402088:	4435      	add	r5, r6
  40208a:	eb02 0285 	add.w	r2, r2, r5, lsl #2
  40208e:	f36f 13c7 	bfc	r3, #7, #1
  402092:	7453      	strb	r3, [r2, #17]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  402094:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  402098:	fab3 f383 	clz	r3, r3
  40209c:	095b      	lsrs	r3, r3, #5
  40209e:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4020a0:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  4020a2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4020a6:	2200      	movs	r2, #0
  4020a8:	4b17      	ldr	r3, [pc, #92]	; (402108 <udd_ep_run+0x170>)
  4020aa:	701a      	strb	r2, [r3, #0]
	return flags;
  4020ac:	9d01      	ldr	r5, [sp, #4]
	udd_enable_endpoint_interrupt(ep);
  4020ae:	2301      	movs	r3, #1
  4020b0:	40bb      	lsls	r3, r7
  4020b2:	4a16      	ldr	r2, [pc, #88]	; (40210c <udd_ep_run+0x174>)
  4020b4:	6113      	str	r3, [r2, #16]
	if (b_dir_in) {
  4020b6:	f010 0f80 	tst.w	r0, #128	; 0x80
  4020ba:	d107      	bne.n	4020cc <udd_ep_run+0x134>
	if (cpu_irq_is_enabled_flags(flags))
  4020bc:	b305      	cbz	r5, 402100 <udd_ep_run+0x168>
		cpu_irq_enable();
  4020be:	2001      	movs	r0, #1
  4020c0:	4b11      	ldr	r3, [pc, #68]	; (402108 <udd_ep_run+0x170>)
  4020c2:	7018      	strb	r0, [r3, #0]
  4020c4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4020c8:	b662      	cpsie	i
  4020ca:	e00f      	b.n	4020ec <udd_ep_run+0x154>
		if (Is_udd_in_pending(ep)) {
  4020cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4020ce:	f013 0f11 	tst.w	r3, #17
  4020d2:	d1f3      	bne.n	4020bc <udd_ep_run+0x124>
			if (udd_ep_in_sent(ep, true)) {
  4020d4:	2101      	movs	r1, #1
  4020d6:	4638      	mov	r0, r7
  4020d8:	4b0d      	ldr	r3, [pc, #52]	; (402110 <udd_ep_run+0x178>)
  4020da:	4798      	blx	r3
  4020dc:	2800      	cmp	r0, #0
  4020de:	d0ed      	beq.n	4020bc <udd_ep_run+0x124>
				udd_ep_in_sent(ep, false);
  4020e0:	2100      	movs	r1, #0
  4020e2:	4638      	mov	r0, r7
  4020e4:	4b0a      	ldr	r3, [pc, #40]	; (402110 <udd_ep_run+0x178>)
  4020e6:	4798      	blx	r3
  4020e8:	e7e8      	b.n	4020bc <udd_ep_run+0x124>
		return false;
  4020ea:	2000      	movs	r0, #0
}
  4020ec:	b003      	add	sp, #12
  4020ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false; // Endpoint is halted
  4020f0:	2000      	movs	r0, #0
  4020f2:	e7fb      	b.n	4020ec <udd_ep_run+0x154>
  4020f4:	2000      	movs	r0, #0
  4020f6:	e7f9      	b.n	4020ec <udd_ep_run+0x154>
  4020f8:	2000      	movs	r0, #0
  4020fa:	e7f7      	b.n	4020ec <udd_ep_run+0x154>
		return false; // Job already on going
  4020fc:	2000      	movs	r0, #0
  4020fe:	e7f5      	b.n	4020ec <udd_ep_run+0x154>
	return true;
  402100:	2001      	movs	r0, #1
  402102:	e7f3      	b.n	4020ec <udd_ep_run+0x154>
  402104:	200006c4 	.word	0x200006c4
  402108:	200000a0 	.word	0x200000a0
  40210c:	40084000 	.word	0x40084000
  402110:	00401115 	.word	0x00401115

00402114 <udd_ep_abort>:
{
  402114:	b5f0      	push	{r4, r5, r6, r7, lr}
  402116:	b087      	sub	sp, #28
	ep &= USB_EP_ADDR_MASK;
  402118:	f000 050f 	and.w	r5, r0, #15
	if (USB_DEVICE_MAX_EP < ep)
  40211c:	2d03      	cmp	r5, #3
  40211e:	d840      	bhi.n	4021a2 <udd_ep_abort+0x8e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  402120:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  402124:	fab3 f383 	clz	r3, r3
  402128:	095b      	lsrs	r3, r3, #5
  40212a:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
  40212c:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  40212e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402132:	2200      	movs	r2, #0
  402134:	4b4b      	ldr	r3, [pc, #300]	; (402264 <udd_ep_abort+0x150>)
  402136:	701a      	strb	r2, [r3, #0]
	return flags;
  402138:	9b05      	ldr	r3, [sp, #20]
	udd_disable_endpoint_interrupt(ep);
  40213a:	2401      	movs	r4, #1
  40213c:	40ac      	lsls	r4, r5
  40213e:	4a4a      	ldr	r2, [pc, #296]	; (402268 <udd_ep_abort+0x154>)
  402140:	6154      	str	r4, [r2, #20]
	if (cpu_irq_is_enabled_flags(flags))
  402142:	b12b      	cbz	r3, 402150 <udd_ep_abort+0x3c>
		cpu_irq_enable();
  402144:	2201      	movs	r2, #1
  402146:	4b47      	ldr	r3, [pc, #284]	; (402264 <udd_ep_abort+0x150>)
  402148:	701a      	strb	r2, [r3, #0]
  40214a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40214e:	b662      	cpsie	i
	if (b_dir_in) {
  402150:	f010 0f80 	tst.w	r0, #128	; 0x80
  402154:	d127      	bne.n	4021a6 <udd_ep_abort+0x92>
  402156:	00ae      	lsls	r6, r5, #2
  402158:	f106 2640 	add.w	r6, r6, #1073758208	; 0x40004000
  40215c:	f506 2600 	add.w	r6, r6, #524288	; 0x80000
		while(Is_udd_any_bank_received(ep)) {
  402160:	6b33      	ldr	r3, [r6, #48]	; 0x30
  402162:	f013 0f42 	tst.w	r3, #66	; 0x42
  402166:	d006      	beq.n	402176 <udd_ep_abort+0x62>
			udd_ep_ack_out_received(ep);
  402168:	4f40      	ldr	r7, [pc, #256]	; (40226c <udd_ep_abort+0x158>)
  40216a:	4628      	mov	r0, r5
  40216c:	47b8      	blx	r7
		while(Is_udd_any_bank_received(ep)) {
  40216e:	6b33      	ldr	r3, [r6, #48]	; 0x30
  402170:	f013 0f42 	tst.w	r3, #66	; 0x42
  402174:	d1f9      	bne.n	40216a <udd_ep_abort+0x56>
	udd_reset_endpoint(ep);
  402176:	4a3c      	ldr	r2, [pc, #240]	; (402268 <udd_ep_abort+0x154>)
  402178:	6a93      	ldr	r3, [r2, #40]	; 0x28
  40217a:	4323      	orrs	r3, r4
  40217c:	6293      	str	r3, [r2, #40]	; 0x28
  40217e:	6a93      	ldr	r3, [r2, #40]	; 0x28
  402180:	421c      	tst	r4, r3
  402182:	d0fc      	beq.n	40217e <udd_ep_abort+0x6a>
  402184:	4a38      	ldr	r2, [pc, #224]	; (402268 <udd_ep_abort+0x154>)
  402186:	6a93      	ldr	r3, [r2, #40]	; 0x28
  402188:	ea23 0404 	bic.w	r4, r3, r4
  40218c:	6294      	str	r4, [r2, #40]	; 0x28
	udd_ep_finish_job(&udd_ep_job[ep - 1], UDD_EP_TRANSFER_ABORT, ep);
  40218e:	1e68      	subs	r0, r5, #1
  402190:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402194:	462a      	mov	r2, r5
  402196:	2101      	movs	r1, #1
  402198:	4b35      	ldr	r3, [pc, #212]	; (402270 <udd_ep_abort+0x15c>)
  40219a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40219e:	4b35      	ldr	r3, [pc, #212]	; (402274 <udd_ep_abort+0x160>)
  4021a0:	4798      	blx	r3
}
  4021a2:	b007      	add	sp, #28
  4021a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4021a6:	00ab      	lsls	r3, r5, #2
  4021a8:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  4021ac:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
		if (Is_udd_transmit_ready(ep)) {
  4021b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4021b2:	f012 0f10 	tst.w	r2, #16
  4021b6:	d03a      	beq.n	40222e <udd_ep_abort+0x11a>
			udd_kill_data_in_fifo(ep,
  4021b8:	b34d      	cbz	r5, 40220e <udd_ep_abort+0xfa>
  4021ba:	2d03      	cmp	r5, #3
  4021bc:	d027      	beq.n	40220e <udd_ep_abort+0xfa>
  4021be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4021c0:	9201      	str	r2, [sp, #4]
  4021c2:	9a01      	ldr	r2, [sp, #4]
  4021c4:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4021c8:	9201      	str	r2, [sp, #4]
  4021ca:	9a01      	ldr	r2, [sp, #4]
  4021cc:	f022 0210 	bic.w	r2, r2, #16
  4021d0:	9201      	str	r2, [sp, #4]
  4021d2:	9a01      	ldr	r2, [sp, #4]
  4021d4:	631a      	str	r2, [r3, #48]	; 0x30
  4021d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4021d8:	f012 0f10 	tst.w	r2, #16
  4021dc:	d1fb      	bne.n	4021d6 <udd_ep_abort+0xc2>
  4021de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4021e0:	f012 0f10 	tst.w	r2, #16
  4021e4:	d1fb      	bne.n	4021de <udd_ep_abort+0xca>
  4021e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4021e8:	9202      	str	r2, [sp, #8]
  4021ea:	9a02      	ldr	r2, [sp, #8]
  4021ec:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4021f0:	9202      	str	r2, [sp, #8]
  4021f2:	9a02      	ldr	r2, [sp, #8]
  4021f4:	f042 0210 	orr.w	r2, r2, #16
  4021f8:	9202      	str	r2, [sp, #8]
  4021fa:	9a02      	ldr	r2, [sp, #8]
  4021fc:	631a      	str	r2, [r3, #48]	; 0x30
  4021fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402200:	f012 0f10 	tst.w	r2, #16
  402204:	d0fb      	beq.n	4021fe <udd_ep_abort+0xea>
  402206:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402208:	f012 0f10 	tst.w	r2, #16
  40220c:	d0fb      	beq.n	402206 <udd_ep_abort+0xf2>
  40220e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402210:	9203      	str	r2, [sp, #12]
  402212:	9a03      	ldr	r2, [sp, #12]
  402214:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402218:	9203      	str	r2, [sp, #12]
  40221a:	9a03      	ldr	r2, [sp, #12]
  40221c:	f022 0210 	bic.w	r2, r2, #16
  402220:	9203      	str	r2, [sp, #12]
  402222:	9a03      	ldr	r2, [sp, #12]
  402224:	631a      	str	r2, [r3, #48]	; 0x30
  402226:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402228:	f012 0f10 	tst.w	r2, #16
  40222c:	d1fb      	bne.n	402226 <udd_ep_abort+0x112>
		udd_ack_in_sent(ep);
  40222e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402230:	9204      	str	r2, [sp, #16]
  402232:	9a04      	ldr	r2, [sp, #16]
  402234:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402238:	9204      	str	r2, [sp, #16]
  40223a:	9a04      	ldr	r2, [sp, #16]
  40223c:	f022 0201 	bic.w	r2, r2, #1
  402240:	9204      	str	r2, [sp, #16]
  402242:	9a04      	ldr	r2, [sp, #16]
  402244:	631a      	str	r2, [r3, #48]	; 0x30
  402246:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402248:	f012 0f01 	tst.w	r2, #1
  40224c:	d1fb      	bne.n	402246 <udd_ep_abort+0x132>
		udd_ep_job[ep - 1].bank = 0;
  40224e:	1e6b      	subs	r3, r5, #1
  402250:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  402254:	4b06      	ldr	r3, [pc, #24]	; (402270 <udd_ep_abort+0x15c>)
  402256:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  40225a:	7c5a      	ldrb	r2, [r3, #17]
  40225c:	f36f 0283 	bfc	r2, #2, #2
  402260:	745a      	strb	r2, [r3, #17]
  402262:	e788      	b.n	402176 <udd_ep_abort+0x62>
  402264:	200000a0 	.word	0x200000a0
  402268:	40084000 	.word	0x40084000
  40226c:	00401041 	.word	0x00401041
  402270:	200006c4 	.word	0x200006c4
  402274:	00401001 	.word	0x00401001

00402278 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  402278:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  40227a:	4770      	bx	lr

0040227c <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  40227c:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  40227e:	4770      	bx	lr

00402280 <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_set_pin_sense_mode(pin, sense);\
	} while (0)

void board_init(void)
{
  402280:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  402282:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  402286:	4b18      	ldr	r3, [pc, #96]	; (4022e8 <board_init+0x68>)
  402288:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40228a:	2009      	movs	r0, #9
  40228c:	4c17      	ldr	r4, [pc, #92]	; (4022ec <board_init+0x6c>)
  40228e:	47a0      	blx	r4
  402290:	200a      	movs	r0, #10
  402292:	47a0      	blx	r4
  402294:	200b      	movs	r0, #11
  402296:	47a0      	blx	r4
  402298:	200c      	movs	r0, #12
  40229a:	47a0      	blx	r4
  40229c:	200d      	movs	r0, #13
  40229e:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4022a0:	4b13      	ldr	r3, [pc, #76]	; (4022f0 <board_init+0x70>)
  4022a2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4022a6:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4022a8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4022ac:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4022ae:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  4022b2:	2204      	movs	r2, #4
  4022b4:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4022b6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4022ba:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4022bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4022c0:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  4022c2:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  4022c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4022c8:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4022ca:	f021 0104 	bic.w	r1, r1, #4
  4022ce:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4022d0:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4022d2:	f021 0104 	bic.w	r1, r1, #4
  4022d6:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  4022d8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4022dc:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4022e0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  4022e4:	bd10      	pop	{r4, pc}
  4022e6:	bf00      	nop
  4022e8:	400e1850 	.word	0x400e1850
  4022ec:	004022f5 	.word	0x004022f5
  4022f0:	400e1400 	.word	0x400e1400

004022f4 <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  4022f4:	282f      	cmp	r0, #47	; 0x2f
  4022f6:	d81e      	bhi.n	402336 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4022f8:	281f      	cmp	r0, #31
  4022fa:	d80c      	bhi.n	402316 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4022fc:	4b11      	ldr	r3, [pc, #68]	; (402344 <pmc_enable_periph_clk+0x50>)
  4022fe:	699a      	ldr	r2, [r3, #24]
  402300:	2301      	movs	r3, #1
  402302:	4083      	lsls	r3, r0
  402304:	4393      	bics	r3, r2
  402306:	d018      	beq.n	40233a <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  402308:	2301      	movs	r3, #1
  40230a:	fa03 f000 	lsl.w	r0, r3, r0
  40230e:	4b0d      	ldr	r3, [pc, #52]	; (402344 <pmc_enable_periph_clk+0x50>)
  402310:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  402312:	2000      	movs	r0, #0
  402314:	4770      	bx	lr
		ul_id -= 32;
  402316:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  402318:	4b0a      	ldr	r3, [pc, #40]	; (402344 <pmc_enable_periph_clk+0x50>)
  40231a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40231e:	2301      	movs	r3, #1
  402320:	4083      	lsls	r3, r0
  402322:	4393      	bics	r3, r2
  402324:	d00b      	beq.n	40233e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  402326:	2301      	movs	r3, #1
  402328:	fa03 f000 	lsl.w	r0, r3, r0
  40232c:	4b05      	ldr	r3, [pc, #20]	; (402344 <pmc_enable_periph_clk+0x50>)
  40232e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  402332:	2000      	movs	r0, #0
  402334:	4770      	bx	lr
		return 1;
  402336:	2001      	movs	r0, #1
  402338:	4770      	bx	lr
	return 0;
  40233a:	2000      	movs	r0, #0
  40233c:	4770      	bx	lr
  40233e:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  402340:	4770      	bx	lr
  402342:	bf00      	nop
  402344:	400e0400 	.word	0x400e0400

00402348 <pmc_disable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  402348:	282f      	cmp	r0, #47	; 0x2f
  40234a:	d822      	bhi.n	402392 <pmc_disable_periph_clk+0x4a>
		return 1;
	}

	if (ul_id < 32) {
  40234c:	281f      	cmp	r0, #31
  40234e:	d80e      	bhi.n	40236e <pmc_disable_periph_clk+0x26>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
  402350:	4b11      	ldr	r3, [pc, #68]	; (402398 <pmc_disable_periph_clk+0x50>)
  402352:	699a      	ldr	r2, [r3, #24]
  402354:	2301      	movs	r3, #1
  402356:	4083      	lsls	r3, r0
  402358:	4393      	bics	r3, r2
  40235a:	d001      	beq.n	402360 <pmc_disable_periph_clk+0x18>
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
  40235c:	2000      	movs	r0, #0
  40235e:	4770      	bx	lr
			PMC->PMC_PCDR0 = 1 << ul_id;
  402360:	2301      	movs	r3, #1
  402362:	fa03 f000 	lsl.w	r0, r3, r0
  402366:	4b0c      	ldr	r3, [pc, #48]	; (402398 <pmc_disable_periph_clk+0x50>)
  402368:	6158      	str	r0, [r3, #20]
	return 0;
  40236a:	2000      	movs	r0, #0
  40236c:	4770      	bx	lr
		ul_id -= 32;
  40236e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
  402370:	4b09      	ldr	r3, [pc, #36]	; (402398 <pmc_disable_periph_clk+0x50>)
  402372:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  402376:	2301      	movs	r3, #1
  402378:	4083      	lsls	r3, r0
  40237a:	4393      	bics	r3, r2
  40237c:	d001      	beq.n	402382 <pmc_disable_periph_clk+0x3a>
	return 0;
  40237e:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  402380:	4770      	bx	lr
			PMC->PMC_PCDR1 = 1 << ul_id;
  402382:	2301      	movs	r3, #1
  402384:	fa03 f000 	lsl.w	r0, r3, r0
  402388:	4b03      	ldr	r3, [pc, #12]	; (402398 <pmc_disable_periph_clk+0x50>)
  40238a:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
	return 0;
  40238e:	2000      	movs	r0, #0
  402390:	4770      	bx	lr
		return 1;
  402392:	2001      	movs	r0, #1
  402394:	4770      	bx	lr
  402396:	bf00      	nop
  402398:	400e0400 	.word	0x400e0400

0040239c <pmc_is_wakeup_clocks_restored>:
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_sleep_clock_used;
  40239c:	4b02      	ldr	r3, [pc, #8]	; (4023a8 <pmc_is_wakeup_clocks_restored+0xc>)
  40239e:	7818      	ldrb	r0, [r3, #0]
}
  4023a0:	f080 0001 	eor.w	r0, r0, #1
  4023a4:	4770      	bx	lr
  4023a6:	bf00      	nop
  4023a8:	20000700 	.word	0x20000700

004023ac <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4023ac:	e7fe      	b.n	4023ac <Dummy_Handler>
	...

004023b0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  4023b0:	b500      	push	{lr}
  4023b2:	b083      	sub	sp, #12

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  4023b4:	4b25      	ldr	r3, [pc, #148]	; (40244c <Reset_Handler+0x9c>)
  4023b6:	4a26      	ldr	r2, [pc, #152]	; (402450 <Reset_Handler+0xa0>)
  4023b8:	429a      	cmp	r2, r3
  4023ba:	d010      	beq.n	4023de <Reset_Handler+0x2e>
		for (; pDest < &_erelocate;) {
  4023bc:	4b25      	ldr	r3, [pc, #148]	; (402454 <Reset_Handler+0xa4>)
  4023be:	4a23      	ldr	r2, [pc, #140]	; (40244c <Reset_Handler+0x9c>)
  4023c0:	429a      	cmp	r2, r3
  4023c2:	d20c      	bcs.n	4023de <Reset_Handler+0x2e>
  4023c4:	3b01      	subs	r3, #1
  4023c6:	1a9b      	subs	r3, r3, r2
  4023c8:	f023 0303 	bic.w	r3, r3, #3
  4023cc:	3304      	adds	r3, #4
  4023ce:	4413      	add	r3, r2
  4023d0:	491f      	ldr	r1, [pc, #124]	; (402450 <Reset_Handler+0xa0>)
			*pDest++ = *pSrc++;
  4023d2:	f851 0b04 	ldr.w	r0, [r1], #4
  4023d6:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  4023da:	429a      	cmp	r2, r3
  4023dc:	d1f9      	bne.n	4023d2 <Reset_Handler+0x22>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4023de:	4b1e      	ldr	r3, [pc, #120]	; (402458 <Reset_Handler+0xa8>)
  4023e0:	4a1e      	ldr	r2, [pc, #120]	; (40245c <Reset_Handler+0xac>)
  4023e2:	429a      	cmp	r2, r3
  4023e4:	d20a      	bcs.n	4023fc <Reset_Handler+0x4c>
  4023e6:	3b01      	subs	r3, #1
  4023e8:	1a9b      	subs	r3, r3, r2
  4023ea:	f023 0303 	bic.w	r3, r3, #3
  4023ee:	3304      	adds	r3, #4
  4023f0:	4413      	add	r3, r2
		*pDest++ = 0;
  4023f2:	2100      	movs	r1, #0
  4023f4:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  4023f8:	4293      	cmp	r3, r2
  4023fa:	d1fb      	bne.n	4023f4 <Reset_Handler+0x44>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4023fc:	4a18      	ldr	r2, [pc, #96]	; (402460 <Reset_Handler+0xb0>)
  4023fe:	4b19      	ldr	r3, [pc, #100]	; (402464 <Reset_Handler+0xb4>)
  402400:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  402404:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  402406:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40240a:	fab3 f383 	clz	r3, r3
  40240e:	095b      	lsrs	r3, r3, #5
  402410:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  402412:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  402414:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402418:	2200      	movs	r2, #0
  40241a:	4b13      	ldr	r3, [pc, #76]	; (402468 <Reset_Handler+0xb8>)
  40241c:	701a      	strb	r2, [r3, #0]
	return flags;
  40241e:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  402420:	4a12      	ldr	r2, [pc, #72]	; (40246c <Reset_Handler+0xbc>)
  402422:	6813      	ldr	r3, [r2, #0]
  402424:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  402428:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  40242a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40242e:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  402432:	b129      	cbz	r1, 402440 <Reset_Handler+0x90>
		cpu_irq_enable();
  402434:	2201      	movs	r2, #1
  402436:	4b0c      	ldr	r3, [pc, #48]	; (402468 <Reset_Handler+0xb8>)
  402438:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  40243a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40243e:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

	/* Initialize the C library */
	__libc_init_array();
  402440:	4b0b      	ldr	r3, [pc, #44]	; (402470 <Reset_Handler+0xc0>)
  402442:	4798      	blx	r3

	/* Branch to main function */
	main();
  402444:	4b0b      	ldr	r3, [pc, #44]	; (402474 <Reset_Handler+0xc4>)
  402446:	4798      	blx	r3
  402448:	e7fe      	b.n	402448 <Reset_Handler+0x98>
  40244a:	bf00      	nop
  40244c:	20000000 	.word	0x20000000
  402450:	00402638 	.word	0x00402638
  402454:	200004d4 	.word	0x200004d4
  402458:	2000074c 	.word	0x2000074c
  40245c:	200004d4 	.word	0x200004d4
  402460:	e000ed00 	.word	0xe000ed00
  402464:	00400000 	.word	0x00400000
  402468:	200000a0 	.word	0x200000a0
  40246c:	e000ed88 	.word	0xe000ed88
  402470:	004024a1 	.word	0x004024a1
  402474:	00402479 	.word	0x00402479

00402478 <main>:
 * Support and FAQ: visit <a href="https://www.microchip.com/support/">Microchip Support</a>
 */
#include <asf.h>

int main (void)
{
  402478:	b508      	push	{r3, lr}
	board_init();
  40247a:	4b06      	ldr	r3, [pc, #24]	; (402494 <main+0x1c>)
  40247c:	4798      	blx	r3
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  40247e:	4806      	ldr	r0, [pc, #24]	; (402498 <main+0x20>)
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402480:	4906      	ldr	r1, [pc, #24]	; (40249c <main+0x24>)
  402482:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  402486:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
	/* Insert application code here, after the board has been initialized. */

	/* This skeleton code simply sets the LED to the state of the button. */
	while (1) {
		/* Is button pressed? */
		if (ioport_get_pin_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE) {
  402488:	f013 0f04 	tst.w	r3, #4
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40248c:	bf0c      	ite	eq
  40248e:	634a      	streq	r2, [r1, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402490:	630a      	strne	r2, [r1, #48]	; 0x30
  402492:	e7f8      	b.n	402486 <main+0xe>
  402494:	00402281 	.word	0x00402281
  402498:	400e0e00 	.word	0x400e0e00
  40249c:	400e1400 	.word	0x400e1400

004024a0 <__libc_init_array>:
  4024a0:	b570      	push	{r4, r5, r6, lr}
  4024a2:	4e0f      	ldr	r6, [pc, #60]	; (4024e0 <__libc_init_array+0x40>)
  4024a4:	4d0f      	ldr	r5, [pc, #60]	; (4024e4 <__libc_init_array+0x44>)
  4024a6:	1b76      	subs	r6, r6, r5
  4024a8:	10b6      	asrs	r6, r6, #2
  4024aa:	bf18      	it	ne
  4024ac:	2400      	movne	r4, #0
  4024ae:	d005      	beq.n	4024bc <__libc_init_array+0x1c>
  4024b0:	3401      	adds	r4, #1
  4024b2:	f855 3b04 	ldr.w	r3, [r5], #4
  4024b6:	4798      	blx	r3
  4024b8:	42a6      	cmp	r6, r4
  4024ba:	d1f9      	bne.n	4024b0 <__libc_init_array+0x10>
  4024bc:	4e0a      	ldr	r6, [pc, #40]	; (4024e8 <__libc_init_array+0x48>)
  4024be:	4d0b      	ldr	r5, [pc, #44]	; (4024ec <__libc_init_array+0x4c>)
  4024c0:	1b76      	subs	r6, r6, r5
  4024c2:	f000 f8a7 	bl	402614 <_init>
  4024c6:	10b6      	asrs	r6, r6, #2
  4024c8:	bf18      	it	ne
  4024ca:	2400      	movne	r4, #0
  4024cc:	d006      	beq.n	4024dc <__libc_init_array+0x3c>
  4024ce:	3401      	adds	r4, #1
  4024d0:	f855 3b04 	ldr.w	r3, [r5], #4
  4024d4:	4798      	blx	r3
  4024d6:	42a6      	cmp	r6, r4
  4024d8:	d1f9      	bne.n	4024ce <__libc_init_array+0x2e>
  4024da:	bd70      	pop	{r4, r5, r6, pc}
  4024dc:	bd70      	pop	{r4, r5, r6, pc}
  4024de:	bf00      	nop
  4024e0:	00402620 	.word	0x00402620
  4024e4:	00402620 	.word	0x00402620
  4024e8:	00402628 	.word	0x00402628
  4024ec:	00402620 	.word	0x00402620

004024f0 <register_fini>:
  4024f0:	4b02      	ldr	r3, [pc, #8]	; (4024fc <register_fini+0xc>)
  4024f2:	b113      	cbz	r3, 4024fa <register_fini+0xa>
  4024f4:	4802      	ldr	r0, [pc, #8]	; (402500 <register_fini+0x10>)
  4024f6:	f000 b805 	b.w	402504 <atexit>
  4024fa:	4770      	bx	lr
  4024fc:	00000000 	.word	0x00000000
  402500:	00402511 	.word	0x00402511

00402504 <atexit>:
  402504:	2300      	movs	r3, #0
  402506:	4601      	mov	r1, r0
  402508:	461a      	mov	r2, r3
  40250a:	4618      	mov	r0, r3
  40250c:	f000 b81e 	b.w	40254c <__register_exitproc>

00402510 <__libc_fini_array>:
  402510:	b538      	push	{r3, r4, r5, lr}
  402512:	4c0a      	ldr	r4, [pc, #40]	; (40253c <__libc_fini_array+0x2c>)
  402514:	4d0a      	ldr	r5, [pc, #40]	; (402540 <__libc_fini_array+0x30>)
  402516:	1b64      	subs	r4, r4, r5
  402518:	10a4      	asrs	r4, r4, #2
  40251a:	d00a      	beq.n	402532 <__libc_fini_array+0x22>
  40251c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  402520:	3b01      	subs	r3, #1
  402522:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  402526:	3c01      	subs	r4, #1
  402528:	f855 3904 	ldr.w	r3, [r5], #-4
  40252c:	4798      	blx	r3
  40252e:	2c00      	cmp	r4, #0
  402530:	d1f9      	bne.n	402526 <__libc_fini_array+0x16>
  402532:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  402536:	f000 b877 	b.w	402628 <_fini>
  40253a:	bf00      	nop
  40253c:	00402638 	.word	0x00402638
  402540:	00402634 	.word	0x00402634

00402544 <__retarget_lock_acquire_recursive>:
  402544:	4770      	bx	lr
  402546:	bf00      	nop

00402548 <__retarget_lock_release_recursive>:
  402548:	4770      	bx	lr
  40254a:	bf00      	nop

0040254c <__register_exitproc>:
  40254c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402550:	4d2c      	ldr	r5, [pc, #176]	; (402604 <__register_exitproc+0xb8>)
  402552:	4606      	mov	r6, r0
  402554:	6828      	ldr	r0, [r5, #0]
  402556:	4698      	mov	r8, r3
  402558:	460f      	mov	r7, r1
  40255a:	4691      	mov	r9, r2
  40255c:	f7ff fff2 	bl	402544 <__retarget_lock_acquire_recursive>
  402560:	4b29      	ldr	r3, [pc, #164]	; (402608 <__register_exitproc+0xbc>)
  402562:	681c      	ldr	r4, [r3, #0]
  402564:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  402568:	2b00      	cmp	r3, #0
  40256a:	d03e      	beq.n	4025ea <__register_exitproc+0x9e>
  40256c:	685a      	ldr	r2, [r3, #4]
  40256e:	2a1f      	cmp	r2, #31
  402570:	dc1c      	bgt.n	4025ac <__register_exitproc+0x60>
  402572:	f102 0e01 	add.w	lr, r2, #1
  402576:	b176      	cbz	r6, 402596 <__register_exitproc+0x4a>
  402578:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  40257c:	2401      	movs	r4, #1
  40257e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  402582:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  402586:	4094      	lsls	r4, r2
  402588:	4320      	orrs	r0, r4
  40258a:	2e02      	cmp	r6, #2
  40258c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  402590:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  402594:	d023      	beq.n	4025de <__register_exitproc+0x92>
  402596:	3202      	adds	r2, #2
  402598:	f8c3 e004 	str.w	lr, [r3, #4]
  40259c:	6828      	ldr	r0, [r5, #0]
  40259e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4025a2:	f7ff ffd1 	bl	402548 <__retarget_lock_release_recursive>
  4025a6:	2000      	movs	r0, #0
  4025a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4025ac:	4b17      	ldr	r3, [pc, #92]	; (40260c <__register_exitproc+0xc0>)
  4025ae:	b30b      	cbz	r3, 4025f4 <__register_exitproc+0xa8>
  4025b0:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4025b4:	f3af 8000 	nop.w
  4025b8:	4603      	mov	r3, r0
  4025ba:	b1d8      	cbz	r0, 4025f4 <__register_exitproc+0xa8>
  4025bc:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  4025c0:	6002      	str	r2, [r0, #0]
  4025c2:	2100      	movs	r1, #0
  4025c4:	6041      	str	r1, [r0, #4]
  4025c6:	460a      	mov	r2, r1
  4025c8:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4025cc:	f04f 0e01 	mov.w	lr, #1
  4025d0:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  4025d4:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  4025d8:	2e00      	cmp	r6, #0
  4025da:	d0dc      	beq.n	402596 <__register_exitproc+0x4a>
  4025dc:	e7cc      	b.n	402578 <__register_exitproc+0x2c>
  4025de:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  4025e2:	430c      	orrs	r4, r1
  4025e4:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  4025e8:	e7d5      	b.n	402596 <__register_exitproc+0x4a>
  4025ea:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  4025ee:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  4025f2:	e7bb      	b.n	40256c <__register_exitproc+0x20>
  4025f4:	6828      	ldr	r0, [r5, #0]
  4025f6:	f7ff ffa7 	bl	402548 <__retarget_lock_release_recursive>
  4025fa:	f04f 30ff 	mov.w	r0, #4294967295
  4025fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402602:	bf00      	nop
  402604:	200004d0 	.word	0x200004d0
  402608:	00402610 	.word	0x00402610
  40260c:	00000000 	.word	0x00000000

00402610 <_global_impure_ptr>:
  402610:	200000a8                                ... 

00402614 <_init>:
  402614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402616:	bf00      	nop
  402618:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40261a:	bc08      	pop	{r3}
  40261c:	469e      	mov	lr, r3
  40261e:	4770      	bx	lr

00402620 <__init_array_start>:
  402620:	004024f1 	.word	0x004024f1

00402624 <__frame_dummy_init_array_entry>:
  402624:	0040011d                                ..@.

00402628 <_fini>:
  402628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40262a:	bf00      	nop
  40262c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40262e:	bc08      	pop	{r3}
  402630:	469e      	mov	lr, r3
  402632:	4770      	bx	lr

00402634 <__fini_array_start>:
  402634:	004000f9 	.word	0x004000f9
